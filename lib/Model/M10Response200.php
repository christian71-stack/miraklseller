<?php
/**
 * M10Response200
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  cbdesk\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mirakl Marketplace APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest-release
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace cbdesk\Mirakl\Model;

use \ArrayAccess;
use \cbdesk\Mirakl\ObjectSerializer;

/**
 * M10Response200 Class Doc Comment
 *
 * @category Class
 * @package  cbdesk\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class M10Response200 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'M10_Response_200';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'authorized_participants' => '\cbdesk\Mirakl\Model\M10Response200AuthorizedParticipants[]',
        'current_participants' => '\cbdesk\Mirakl\Model\M10Response200CurrentParticipants[]',
        'customer_organization' => '\cbdesk\Mirakl\Model\M10Response200CustomerOrganization',
        'date_created' => '\DateTime',
        'date_updated' => '\DateTime',
        'entities' => '\cbdesk\Mirakl\Model\M10Response200Entities[]',
        'id' => 'string',
        'messages' => '\cbdesk\Mirakl\Model\M10Response200Messages[]',
        'metadata' => '\cbdesk\Mirakl\Model\M10Response200Metadata',
        'no_store_reply_needed' => '\cbdesk\Mirakl\Model\M10Response200NoStoreReplyNeeded[]',
        'topic' => '\cbdesk\Mirakl\Model\M10Response200Topic'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'authorized_participants' => null,
        'current_participants' => null,
        'customer_organization' => null,
        'date_created' => 'date-time',
        'date_updated' => 'date-time',
        'entities' => null,
        'id' => null,
        'messages' => null,
        'metadata' => null,
        'no_store_reply_needed' => null,
        'topic' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'authorized_participants' => false,
        'current_participants' => false,
        'customer_organization' => false,
        'date_created' => false,
        'date_updated' => false,
        'entities' => false,
        'id' => false,
        'messages' => false,
        'metadata' => false,
        'no_store_reply_needed' => false,
        'topic' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'authorized_participants' => 'authorized_participants',
        'current_participants' => 'current_participants',
        'customer_organization' => 'customer_organization',
        'date_created' => 'date_created',
        'date_updated' => 'date_updated',
        'entities' => 'entities',
        'id' => 'id',
        'messages' => 'messages',
        'metadata' => 'metadata',
        'no_store_reply_needed' => 'no_store_reply_needed',
        'topic' => 'topic'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'authorized_participants' => 'setAuthorizedParticipants',
        'current_participants' => 'setCurrentParticipants',
        'customer_organization' => 'setCustomerOrganization',
        'date_created' => 'setDateCreated',
        'date_updated' => 'setDateUpdated',
        'entities' => 'setEntities',
        'id' => 'setId',
        'messages' => 'setMessages',
        'metadata' => 'setMetadata',
        'no_store_reply_needed' => 'setNoStoreReplyNeeded',
        'topic' => 'setTopic'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'authorized_participants' => 'getAuthorizedParticipants',
        'current_participants' => 'getCurrentParticipants',
        'customer_organization' => 'getCustomerOrganization',
        'date_created' => 'getDateCreated',
        'date_updated' => 'getDateUpdated',
        'entities' => 'getEntities',
        'id' => 'getId',
        'messages' => 'getMessages',
        'metadata' => 'getMetadata',
        'no_store_reply_needed' => 'getNoStoreReplyNeeded',
        'topic' => 'getTopic'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('authorized_participants', $data ?? [], null);
        $this->setIfExists('current_participants', $data ?? [], null);
        $this->setIfExists('customer_organization', $data ?? [], null);
        $this->setIfExists('date_created', $data ?? [], null);
        $this->setIfExists('date_updated', $data ?? [], null);
        $this->setIfExists('entities', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('messages', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
        $this->setIfExists('no_store_reply_needed', $data ?? [], null);
        $this->setIfExists('topic', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets authorized_participants
     *
     * @return \cbdesk\Mirakl\Model\M10Response200AuthorizedParticipants[]|null
     */
    public function getAuthorizedParticipants()
    {
        return $this->container['authorized_participants'];
    }

    /**
     * Sets authorized_participants
     *
     * @param \cbdesk\Mirakl\Model\M10Response200AuthorizedParticipants[]|null $authorized_participants Thread authorized participants<br/> Those are the participants who are authorized to join the thread.
     *
     * @return self
     */
    public function setAuthorizedParticipants($authorized_participants)
    {
        if (is_null($authorized_participants)) {
            throw new \InvalidArgumentException('non-nullable authorized_participants cannot be null');
        }
        $this->container['authorized_participants'] = $authorized_participants;

        return $this;
    }

    /**
     * Gets current_participants
     *
     * @return \cbdesk\Mirakl\Model\M10Response200CurrentParticipants[]|null
     */
    public function getCurrentParticipants()
    {
        return $this->container['current_participants'];
    }

    /**
     * Sets current_participants
     *
     * @param \cbdesk\Mirakl\Model\M10Response200CurrentParticipants[]|null $current_participants Thread current participants<br/> Those are the participants who have actually participated in the thread, meaning that they are either sender or receivers of at least one message of the thread.<br/> These participants must be on the list of the <code>authorized_participants</code>
     *
     * @return self
     */
    public function setCurrentParticipants($current_participants)
    {
        if (is_null($current_participants)) {
            throw new \InvalidArgumentException('non-nullable current_participants cannot be null');
        }
        $this->container['current_participants'] = $current_participants;

        return $this;
    }

    /**
     * Gets customer_organization
     *
     * @return \cbdesk\Mirakl\Model\M10Response200CustomerOrganization|null
     */
    public function getCustomerOrganization()
    {
        return $this->container['customer_organization'];
    }

    /**
     * Sets customer_organization
     *
     * @param \cbdesk\Mirakl\Model\M10Response200CustomerOrganization|null $customer_organization customer_organization
     *
     * @return self
     */
    public function setCustomerOrganization($customer_organization)
    {
        if (is_null($customer_organization)) {
            throw new \InvalidArgumentException('non-nullable customer_organization cannot be null');
        }
        $this->container['customer_organization'] = $customer_organization;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return \DateTime|null
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param \DateTime|null $date_created Thread created date
     *
     * @return self
     */
    public function setDateCreated($date_created)
    {
        if (is_null($date_created)) {
            throw new \InvalidArgumentException('non-nullable date_created cannot be null');
        }
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets date_updated
     *
     * @return \DateTime|null
     */
    public function getDateUpdated()
    {
        return $this->container['date_updated'];
    }

    /**
     * Sets date_updated
     *
     * @param \DateTime|null $date_updated Thread updated date
     *
     * @return self
     */
    public function setDateUpdated($date_updated)
    {
        if (is_null($date_updated)) {
            throw new \InvalidArgumentException('non-nullable date_updated cannot be null');
        }
        $this->container['date_updated'] = $date_updated;

        return $this;
    }

    /**
     * Gets entities
     *
     * @return \cbdesk\Mirakl\Model\M10Response200Entities[]|null
     */
    public function getEntities()
    {
        return $this->container['entities'];
    }

    /**
     * Sets entities
     *
     * @param \cbdesk\Mirakl\Model\M10Response200Entities[]|null $entities Thread entities
     *
     * @return self
     */
    public function setEntities($entities)
    {
        if (is_null($entities)) {
            throw new \InvalidArgumentException('non-nullable entities cannot be null');
        }
        $this->container['entities'] = $entities;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Thread id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets messages
     *
     * @return \cbdesk\Mirakl\Model\M10Response200Messages[]|null
     */
    public function getMessages()
    {
        return $this->container['messages'];
    }

    /**
     * Sets messages
     *
     * @param \cbdesk\Mirakl\Model\M10Response200Messages[]|null $messages Thread messages
     *
     * @return self
     */
    public function setMessages($messages)
    {
        if (is_null($messages)) {
            throw new \InvalidArgumentException('non-nullable messages cannot be null');
        }
        $this->container['messages'] = $messages;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return \cbdesk\Mirakl\Model\M10Response200Metadata|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param \cbdesk\Mirakl\Model\M10Response200Metadata|null $metadata metadata
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            throw new \InvalidArgumentException('non-nullable metadata cannot be null');
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets no_store_reply_needed
     *
     * @return \cbdesk\Mirakl\Model\M10Response200NoStoreReplyNeeded[]|null
     */
    public function getNoStoreReplyNeeded()
    {
        return $this->container['no_store_reply_needed'];
    }

    /**
     * Sets no_store_reply_needed
     *
     * @param \cbdesk\Mirakl\Model\M10Response200NoStoreReplyNeeded[]|null $no_store_reply_needed Thread \"no store reply needed\" actions.
     *
     * @return self
     */
    public function setNoStoreReplyNeeded($no_store_reply_needed)
    {
        if (is_null($no_store_reply_needed)) {
            throw new \InvalidArgumentException('non-nullable no_store_reply_needed cannot be null');
        }
        $this->container['no_store_reply_needed'] = $no_store_reply_needed;

        return $this;
    }

    /**
     * Gets topic
     *
     * @return \cbdesk\Mirakl\Model\M10Response200Topic|null
     */
    public function getTopic()
    {
        return $this->container['topic'];
    }

    /**
     * Sets topic
     *
     * @param \cbdesk\Mirakl\Model\M10Response200Topic|null $topic topic
     *
     * @return self
     */
    public function setTopic($topic)
    {
        if (is_null($topic)) {
            throw new \InvalidArgumentException('non-nullable topic cannot be null');
        }
        $this->container['topic'] = $topic;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


