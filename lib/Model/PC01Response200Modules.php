<?php
/**
 * PC01Response200Modules
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  cbdesk\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mirakl Marketplace APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest-release
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace cbdesk\Mirakl\Model;

use \ArrayAccess;
use \cbdesk\Mirakl\ObjectSerializer;

/**
 * PC01Response200Modules Class Doc Comment
 *
 * @category Class
 * @package  cbdesk\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PC01Response200Modules implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PC01_Response_200_Modules';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'mirakl_catalog_integrator' => 'bool',
        'mirakl_catalog_manager' => 'bool',
        'mirakl_catalog_transformer' => 'bool',
        'mirakl_platform_services' => 'bool',
        'offer_management' => 'bool',
        'offer_management_mode' => 'string',
        'order_management' => 'bool',
        'order_management_mode' => 'string',
        'promotions' => 'bool',
        'quotes' => 'bool',
        'tax_manager' => '\cbdesk\Mirakl\Model\PC01Response200ModulesTaxManager'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'mirakl_catalog_integrator' => null,
        'mirakl_catalog_manager' => null,
        'mirakl_catalog_transformer' => null,
        'mirakl_platform_services' => null,
        'offer_management' => null,
        'offer_management_mode' => null,
        'order_management' => null,
        'order_management_mode' => null,
        'promotions' => null,
        'quotes' => null,
        'tax_manager' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'mirakl_catalog_integrator' => false,
        'mirakl_catalog_manager' => false,
        'mirakl_catalog_transformer' => false,
        'mirakl_platform_services' => false,
        'offer_management' => false,
        'offer_management_mode' => false,
        'order_management' => false,
        'order_management_mode' => false,
        'promotions' => false,
        'quotes' => false,
        'tax_manager' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'mirakl_catalog_integrator' => 'mirakl_catalog_integrator',
        'mirakl_catalog_manager' => 'mirakl_catalog_manager',
        'mirakl_catalog_transformer' => 'mirakl_catalog_transformer',
        'mirakl_platform_services' => 'mirakl_platform_services',
        'offer_management' => 'offer_management',
        'offer_management_mode' => 'offer_management_mode',
        'order_management' => 'order_management',
        'order_management_mode' => 'order_management_mode',
        'promotions' => 'promotions',
        'quotes' => 'quotes',
        'tax_manager' => 'tax_manager'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'mirakl_catalog_integrator' => 'setMiraklCatalogIntegrator',
        'mirakl_catalog_manager' => 'setMiraklCatalogManager',
        'mirakl_catalog_transformer' => 'setMiraklCatalogTransformer',
        'mirakl_platform_services' => 'setMiraklPlatformServices',
        'offer_management' => 'setOfferManagement',
        'offer_management_mode' => 'setOfferManagementMode',
        'order_management' => 'setOrderManagement',
        'order_management_mode' => 'setOrderManagementMode',
        'promotions' => 'setPromotions',
        'quotes' => 'setQuotes',
        'tax_manager' => 'setTaxManager'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'mirakl_catalog_integrator' => 'getMiraklCatalogIntegrator',
        'mirakl_catalog_manager' => 'getMiraklCatalogManager',
        'mirakl_catalog_transformer' => 'getMiraklCatalogTransformer',
        'mirakl_platform_services' => 'getMiraklPlatformServices',
        'offer_management' => 'getOfferManagement',
        'offer_management_mode' => 'getOfferManagementMode',
        'order_management' => 'getOrderManagement',
        'order_management_mode' => 'getOrderManagementMode',
        'promotions' => 'getPromotions',
        'quotes' => 'getQuotes',
        'tax_manager' => 'getTaxManager'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('mirakl_catalog_integrator', $data ?? [], null);
        $this->setIfExists('mirakl_catalog_manager', $data ?? [], null);
        $this->setIfExists('mirakl_catalog_transformer', $data ?? [], null);
        $this->setIfExists('mirakl_platform_services', $data ?? [], null);
        $this->setIfExists('offer_management', $data ?? [], null);
        $this->setIfExists('offer_management_mode', $data ?? [], null);
        $this->setIfExists('order_management', $data ?? [], null);
        $this->setIfExists('order_management_mode', $data ?? [], null);
        $this->setIfExists('promotions', $data ?? [], null);
        $this->setIfExists('quotes', $data ?? [], null);
        $this->setIfExists('tax_manager', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets mirakl_catalog_integrator
     *
     * @return bool|null
     */
    public function getMiraklCatalogIntegrator()
    {
        return $this->container['mirakl_catalog_integrator'];
    }

    /**
     * Sets mirakl_catalog_integrator
     *
     * @param bool|null $mirakl_catalog_integrator Mirakl Catalog integrator activated. Allows operator to manage catalog structure into Mirakl.
     *
     * @return self
     */
    public function setMiraklCatalogIntegrator($mirakl_catalog_integrator)
    {
        if (is_null($mirakl_catalog_integrator)) {
            throw new \InvalidArgumentException('non-nullable mirakl_catalog_integrator cannot be null');
        }
        $this->container['mirakl_catalog_integrator'] = $mirakl_catalog_integrator;

        return $this;
    }

    /**
     * Gets mirakl_catalog_manager
     *
     * @return bool|null
     */
    public function getMiraklCatalogManager()
    {
        return $this->container['mirakl_catalog_manager'];
    }

    /**
     * Sets mirakl_catalog_manager
     *
     * @param bool|null $mirakl_catalog_manager Mirakl Catalog Manager activated. Allows operator to remove the complexity of integrating catalogs from multiple sources.
     *
     * @return self
     */
    public function setMiraklCatalogManager($mirakl_catalog_manager)
    {
        if (is_null($mirakl_catalog_manager)) {
            throw new \InvalidArgumentException('non-nullable mirakl_catalog_manager cannot be null');
        }
        $this->container['mirakl_catalog_manager'] = $mirakl_catalog_manager;

        return $this;
    }

    /**
     * Gets mirakl_catalog_transformer
     *
     * @return bool|null
     */
    public function getMiraklCatalogTransformer()
    {
        return $this->container['mirakl_catalog_transformer'];
    }

    /**
     * Sets mirakl_catalog_transformer
     *
     * @param bool|null $mirakl_catalog_transformer Mirakl Catalog Transformer activated.
     *
     * @return self
     */
    public function setMiraklCatalogTransformer($mirakl_catalog_transformer)
    {
        if (is_null($mirakl_catalog_transformer)) {
            throw new \InvalidArgumentException('non-nullable mirakl_catalog_transformer cannot be null');
        }
        $this->container['mirakl_catalog_transformer'] = $mirakl_catalog_transformer;

        return $this;
    }

    /**
     * Gets mirakl_platform_services
     *
     * @return bool|null
     */
    public function getMiraklPlatformServices()
    {
        return $this->container['mirakl_platform_services'];
    }

    /**
     * Sets mirakl_platform_services
     *
     * @param bool|null $mirakl_platform_services Mirakl Platform for Services activated. Specific module for services management: separated from the product management module.
     *
     * @return self
     */
    public function setMiraklPlatformServices($mirakl_platform_services)
    {
        if (is_null($mirakl_platform_services)) {
            throw new \InvalidArgumentException('non-nullable mirakl_platform_services cannot be null');
        }
        $this->container['mirakl_platform_services'] = $mirakl_platform_services;

        return $this;
    }

    /**
     * Gets offer_management
     *
     * @return bool|null
     */
    public function getOfferManagement()
    {
        return $this->container['offer_management'];
    }

    /**
     * Sets offer_management
     *
     * @param bool|null $offer_management Offer management available on the platform
     *
     * @return self
     */
    public function setOfferManagement($offer_management)
    {
        if (is_null($offer_management)) {
            throw new \InvalidArgumentException('non-nullable offer_management cannot be null');
        }
        $this->container['offer_management'] = $offer_management;

        return $this;
    }

    /**
     * Gets offer_management_mode
     *
     * @return string|null
     */
    public function getOfferManagementMode()
    {
        return $this->container['offer_management_mode'];
    }

    /**
     * Sets offer_management_mode
     *
     * @param string|null $offer_management_mode Offer management mode on the platform: SIMPLE: All shops can push offers. HYBRID: The operator decides whether a shop can push offers on the platform.
     *
     * @return self
     */
    public function setOfferManagementMode($offer_management_mode)
    {
        if (is_null($offer_management_mode)) {
            throw new \InvalidArgumentException('non-nullable offer_management_mode cannot be null');
        }
        $this->container['offer_management_mode'] = $offer_management_mode;

        return $this;
    }

    /**
     * Gets order_management
     *
     * @return bool|null
     */
    public function getOrderManagement()
    {
        return $this->container['order_management'];
    }

    /**
     * Sets order_management
     *
     * @param bool|null $order_management Order management available on the platform
     *
     * @return self
     */
    public function setOrderManagement($order_management)
    {
        if (is_null($order_management)) {
            throw new \InvalidArgumentException('non-nullable order_management cannot be null');
        }
        $this->container['order_management'] = $order_management;

        return $this;
    }

    /**
     * Gets order_management_mode
     *
     * @return string|null
     */
    public function getOrderManagementMode()
    {
        return $this->container['order_management_mode'];
    }

    /**
     * Sets order_management_mode
     *
     * @param string|null $order_management_mode Order management mode on the platform: SIMPLE: All shops can process orders. HYBRID: The operator decides whether a shop can process orders on the platform.
     *
     * @return self
     */
    public function setOrderManagementMode($order_management_mode)
    {
        if (is_null($order_management_mode)) {
            throw new \InvalidArgumentException('non-nullable order_management_mode cannot be null');
        }
        $this->container['order_management_mode'] = $order_management_mode;

        return $this;
    }

    /**
     * Gets promotions
     *
     * @return bool|null
     */
    public function getPromotions()
    {
        return $this->container['promotions'];
    }

    /**
     * Sets promotions
     *
     * @param bool|null $promotions Promotion module activated
     *
     * @return self
     */
    public function setPromotions($promotions)
    {
        if (is_null($promotions)) {
            throw new \InvalidArgumentException('non-nullable promotions cannot be null');
        }
        $this->container['promotions'] = $promotions;

        return $this;
    }

    /**
     * Gets quotes
     *
     * @return bool|null
     */
    public function getQuotes()
    {
        return $this->container['quotes'];
    }

    /**
     * Sets quotes
     *
     * @param bool|null $quotes Quote module activated
     *
     * @return self
     */
    public function setQuotes($quotes)
    {
        if (is_null($quotes)) {
            throw new \InvalidArgumentException('non-nullable quotes cannot be null');
        }
        $this->container['quotes'] = $quotes;

        return $this;
    }

    /**
     * Gets tax_manager
     *
     * @return \cbdesk\Mirakl\Model\PC01Response200ModulesTaxManager|null
     * @deprecated
     */
    public function getTaxManager()
    {
        return $this->container['tax_manager'];
    }

    /**
     * Sets tax_manager
     *
     * @param \cbdesk\Mirakl\Model\PC01Response200ModulesTaxManager|null $tax_manager tax_manager
     *
     * @return self
     * @deprecated
     */
    public function setTaxManager($tax_manager)
    {
        if (is_null($tax_manager)) {
            throw new \InvalidArgumentException('non-nullable tax_manager cannot be null');
        }
        $this->container['tax_manager'] = $tax_manager;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


