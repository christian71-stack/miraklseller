<?php
/**
 * OR11Response200OrdersOrderLinesCancelations
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  cbdesk\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mirakl Marketplace APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest-release
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace cbdesk\Mirakl\Model;

use \ArrayAccess;
use \cbdesk\Mirakl\ObjectSerializer;

/**
 * OR11Response200OrdersOrderLinesCancelations Class Doc Comment
 *
 * @category Class
 * @package  cbdesk\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OR11Response200OrdersOrderLinesCancelations implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OR11_Response_200_Orders_OrderLines_Cancelations';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'amount' => 'float',
        'amount_breakdown' => '\cbdesk\Mirakl\Model\OR11Response200OrdersOrderLinesCancelationsAmountBreakdown',
        'commission_amount' => 'float',
        'commission_taxes' => '\cbdesk\Mirakl\Model\OR11Response200OrdersOrderLinesCancelationsCommissionTaxes[]',
        'commission_total_amount' => 'float',
        'created_date' => '\DateTime',
        'eco_contributions' => '\cbdesk\Mirakl\Model\OR11Response200OrdersOrderLinesCancelationsEcoContributions[]',
        'fees' => '\cbdesk\Mirakl\Model\OR11Response200OrdersOrderLinesCancelationsFees[]',
        'id' => 'string',
        'purchase_information' => '\cbdesk\Mirakl\Model\OR11Response200OrdersOrderLinesCancelationsPurchaseInformation',
        'quantity' => 'int',
        'reason_code' => 'string',
        'shipping_amount' => 'float',
        'shipping_amount_breakdown' => '\cbdesk\Mirakl\Model\OR11Response200OrdersOrderLinesCancelationsShippingAmountBreakdown',
        'shipping_taxes' => '\cbdesk\Mirakl\Model\OR11Response200OrdersOrderLinesCancelationsShippingTaxes[]',
        'taxes' => '\cbdesk\Mirakl\Model\OR11Response200OrdersOrderLinesCancelationsTaxes[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'amount' => null,
        'amount_breakdown' => null,
        'commission_amount' => null,
        'commission_taxes' => null,
        'commission_total_amount' => null,
        'created_date' => 'date-time',
        'eco_contributions' => null,
        'fees' => null,
        'id' => null,
        'purchase_information' => null,
        'quantity' => 'int32',
        'reason_code' => null,
        'shipping_amount' => null,
        'shipping_amount_breakdown' => null,
        'shipping_taxes' => null,
        'taxes' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'amount' => false,
        'amount_breakdown' => false,
        'commission_amount' => false,
        'commission_taxes' => false,
        'commission_total_amount' => false,
        'created_date' => false,
        'eco_contributions' => false,
        'fees' => false,
        'id' => false,
        'purchase_information' => false,
        'quantity' => false,
        'reason_code' => false,
        'shipping_amount' => false,
        'shipping_amount_breakdown' => false,
        'shipping_taxes' => false,
        'taxes' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'amount' => 'amount',
        'amount_breakdown' => 'amount_breakdown',
        'commission_amount' => 'commission_amount',
        'commission_taxes' => 'commission_taxes',
        'commission_total_amount' => 'commission_total_amount',
        'created_date' => 'created_date',
        'eco_contributions' => 'eco_contributions',
        'fees' => 'fees',
        'id' => 'id',
        'purchase_information' => 'purchase_information',
        'quantity' => 'quantity',
        'reason_code' => 'reason_code',
        'shipping_amount' => 'shipping_amount',
        'shipping_amount_breakdown' => 'shipping_amount_breakdown',
        'shipping_taxes' => 'shipping_taxes',
        'taxes' => 'taxes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'amount' => 'setAmount',
        'amount_breakdown' => 'setAmountBreakdown',
        'commission_amount' => 'setCommissionAmount',
        'commission_taxes' => 'setCommissionTaxes',
        'commission_total_amount' => 'setCommissionTotalAmount',
        'created_date' => 'setCreatedDate',
        'eco_contributions' => 'setEcoContributions',
        'fees' => 'setFees',
        'id' => 'setId',
        'purchase_information' => 'setPurchaseInformation',
        'quantity' => 'setQuantity',
        'reason_code' => 'setReasonCode',
        'shipping_amount' => 'setShippingAmount',
        'shipping_amount_breakdown' => 'setShippingAmountBreakdown',
        'shipping_taxes' => 'setShippingTaxes',
        'taxes' => 'setTaxes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'amount' => 'getAmount',
        'amount_breakdown' => 'getAmountBreakdown',
        'commission_amount' => 'getCommissionAmount',
        'commission_taxes' => 'getCommissionTaxes',
        'commission_total_amount' => 'getCommissionTotalAmount',
        'created_date' => 'getCreatedDate',
        'eco_contributions' => 'getEcoContributions',
        'fees' => 'getFees',
        'id' => 'getId',
        'purchase_information' => 'getPurchaseInformation',
        'quantity' => 'getQuantity',
        'reason_code' => 'getReasonCode',
        'shipping_amount' => 'getShippingAmount',
        'shipping_amount_breakdown' => 'getShippingAmountBreakdown',
        'shipping_taxes' => 'getShippingTaxes',
        'taxes' => 'getTaxes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('amount_breakdown', $data ?? [], null);
        $this->setIfExists('commission_amount', $data ?? [], null);
        $this->setIfExists('commission_taxes', $data ?? [], null);
        $this->setIfExists('commission_total_amount', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('eco_contributions', $data ?? [], null);
        $this->setIfExists('fees', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('purchase_information', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('reason_code', $data ?? [], null);
        $this->setIfExists('shipping_amount', $data ?? [], null);
        $this->setIfExists('shipping_amount_breakdown', $data ?? [], null);
        $this->setIfExists('shipping_taxes', $data ?? [], null);
        $this->setIfExists('taxes', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets amount
     *
     * @return float|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float|null $amount Cancellation's amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets amount_breakdown
     *
     * @return \cbdesk\Mirakl\Model\OR11Response200OrdersOrderLinesCancelationsAmountBreakdown|null
     */
    public function getAmountBreakdown()
    {
        return $this->container['amount_breakdown'];
    }

    /**
     * Sets amount_breakdown
     *
     * @param \cbdesk\Mirakl\Model\OR11Response200OrdersOrderLinesCancelationsAmountBreakdown|null $amount_breakdown amount_breakdown
     *
     * @return self
     */
    public function setAmountBreakdown($amount_breakdown)
    {
        if (is_null($amount_breakdown)) {
            throw new \InvalidArgumentException('non-nullable amount_breakdown cannot be null');
        }
        $this->container['amount_breakdown'] = $amount_breakdown;

        return $this;
    }

    /**
     * Gets commission_amount
     *
     * @return float|null
     */
    public function getCommissionAmount()
    {
        return $this->container['commission_amount'];
    }

    /**
     * Sets commission_amount
     *
     * @param float|null $commission_amount Cancellation's commission amount
     *
     * @return self
     */
    public function setCommissionAmount($commission_amount)
    {
        if (is_null($commission_amount)) {
            throw new \InvalidArgumentException('non-nullable commission_amount cannot be null');
        }
        $this->container['commission_amount'] = $commission_amount;

        return $this;
    }

    /**
     * Gets commission_taxes
     *
     * @return \cbdesk\Mirakl\Model\OR11Response200OrdersOrderLinesCancelationsCommissionTaxes[]|null
     */
    public function getCommissionTaxes()
    {
        return $this->container['commission_taxes'];
    }

    /**
     * Sets commission_taxes
     *
     * @param \cbdesk\Mirakl\Model\OR11Response200OrdersOrderLinesCancelationsCommissionTaxes[]|null $commission_taxes Cancellation's commission taxes
     *
     * @return self
     */
    public function setCommissionTaxes($commission_taxes)
    {
        if (is_null($commission_taxes)) {
            throw new \InvalidArgumentException('non-nullable commission_taxes cannot be null');
        }
        $this->container['commission_taxes'] = $commission_taxes;

        return $this;
    }

    /**
     * Gets commission_total_amount
     *
     * @return float|null
     */
    public function getCommissionTotalAmount()
    {
        return $this->container['commission_total_amount'];
    }

    /**
     * Sets commission_total_amount
     *
     * @param float|null $commission_total_amount The total commission amount of the cancellation (commission amount + commission taxes)
     *
     * @return self
     */
    public function setCommissionTotalAmount($commission_total_amount)
    {
        if (is_null($commission_total_amount)) {
            throw new \InvalidArgumentException('non-nullable commission_total_amount cannot be null');
        }
        $this->container['commission_total_amount'] = $commission_total_amount;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return \DateTime|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param \DateTime|null $created_date Cancellation's creation date
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets eco_contributions
     *
     * @return \cbdesk\Mirakl\Model\OR11Response200OrdersOrderLinesCancelationsEcoContributions[]|null
     */
    public function getEcoContributions()
    {
        return $this->container['eco_contributions'];
    }

    /**
     * Sets eco_contributions
     *
     * @param \cbdesk\Mirakl\Model\OR11Response200OrdersOrderLinesCancelationsEcoContributions[]|null $eco_contributions List of eco-contribution amounts and corresponding producer identifiers, if applicable<br/> Only available if the operator activates the circular economy information collection.
     *
     * @return self
     */
    public function setEcoContributions($eco_contributions)
    {
        if (is_null($eco_contributions)) {
            throw new \InvalidArgumentException('non-nullable eco_contributions cannot be null');
        }
        $this->container['eco_contributions'] = $eco_contributions;

        return $this;
    }

    /**
     * Gets fees
     *
     * @return \cbdesk\Mirakl\Model\OR11Response200OrdersOrderLinesCancelationsFees[]|null
     */
    public function getFees()
    {
        return $this->container['fees'];
    }

    /**
     * Sets fees
     *
     * @param \cbdesk\Mirakl\Model\OR11Response200OrdersOrderLinesCancelationsFees[]|null $fees List of fees canceled on the order line
     *
     * @return self
     */
    public function setFees($fees)
    {
        if (is_null($fees)) {
            throw new \InvalidArgumentException('non-nullable fees cannot be null');
        }
        $this->container['fees'] = $fees;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Cancellation's id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets purchase_information
     *
     * @return \cbdesk\Mirakl\Model\OR11Response200OrdersOrderLinesCancelationsPurchaseInformation|null
     */
    public function getPurchaseInformation()
    {
        return $this->container['purchase_information'];
    }

    /**
     * Sets purchase_information
     *
     * @param \cbdesk\Mirakl\Model\OR11Response200OrdersOrderLinesCancelationsPurchaseInformation|null $purchase_information purchase_information
     *
     * @return self
     */
    public function setPurchaseInformation($purchase_information)
    {
        if (is_null($purchase_information)) {
            throw new \InvalidArgumentException('non-nullable purchase_information cannot be null');
        }
        $this->container['purchase_information'] = $purchase_information;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int|null $quantity The quantity of products canceled (This quantity is informative only)
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets reason_code
     *
     * @return string|null
     */
    public function getReasonCode()
    {
        return $this->container['reason_code'];
    }

    /**
     * Sets reason_code
     *
     * @param string|null $reason_code Cancellation reason's code
     *
     * @return self
     */
    public function setReasonCode($reason_code)
    {
        if (is_null($reason_code)) {
            throw new \InvalidArgumentException('non-nullable reason_code cannot be null');
        }
        $this->container['reason_code'] = $reason_code;

        return $this;
    }

    /**
     * Gets shipping_amount
     *
     * @return float|null
     */
    public function getShippingAmount()
    {
        return $this->container['shipping_amount'];
    }

    /**
     * Sets shipping_amount
     *
     * @param float|null $shipping_amount Cancellation's shipping amount
     *
     * @return self
     */
    public function setShippingAmount($shipping_amount)
    {
        if (is_null($shipping_amount)) {
            throw new \InvalidArgumentException('non-nullable shipping_amount cannot be null');
        }
        $this->container['shipping_amount'] = $shipping_amount;

        return $this;
    }

    /**
     * Gets shipping_amount_breakdown
     *
     * @return \cbdesk\Mirakl\Model\OR11Response200OrdersOrderLinesCancelationsShippingAmountBreakdown|null
     */
    public function getShippingAmountBreakdown()
    {
        return $this->container['shipping_amount_breakdown'];
    }

    /**
     * Sets shipping_amount_breakdown
     *
     * @param \cbdesk\Mirakl\Model\OR11Response200OrdersOrderLinesCancelationsShippingAmountBreakdown|null $shipping_amount_breakdown shipping_amount_breakdown
     *
     * @return self
     */
    public function setShippingAmountBreakdown($shipping_amount_breakdown)
    {
        if (is_null($shipping_amount_breakdown)) {
            throw new \InvalidArgumentException('non-nullable shipping_amount_breakdown cannot be null');
        }
        $this->container['shipping_amount_breakdown'] = $shipping_amount_breakdown;

        return $this;
    }

    /**
     * Gets shipping_taxes
     *
     * @return \cbdesk\Mirakl\Model\OR11Response200OrdersOrderLinesCancelationsShippingTaxes[]|null
     */
    public function getShippingTaxes()
    {
        return $this->container['shipping_taxes'];
    }

    /**
     * Sets shipping_taxes
     *
     * @param \cbdesk\Mirakl\Model\OR11Response200OrdersOrderLinesCancelationsShippingTaxes[]|null $shipping_taxes The taxes on the shipping price
     *
     * @return self
     */
    public function setShippingTaxes($shipping_taxes)
    {
        if (is_null($shipping_taxes)) {
            throw new \InvalidArgumentException('non-nullable shipping_taxes cannot be null');
        }
        $this->container['shipping_taxes'] = $shipping_taxes;

        return $this;
    }

    /**
     * Gets taxes
     *
     * @return \cbdesk\Mirakl\Model\OR11Response200OrdersOrderLinesCancelationsTaxes[]|null
     */
    public function getTaxes()
    {
        return $this->container['taxes'];
    }

    /**
     * Sets taxes
     *
     * @param \cbdesk\Mirakl\Model\OR11Response200OrdersOrderLinesCancelationsTaxes[]|null $taxes The taxes on the price
     *
     * @return self
     */
    public function setTaxes($taxes)
    {
        if (is_null($taxes)) {
            throw new \InvalidArgumentException('non-nullable taxes cannot be null');
        }
        $this->container['taxes'] = $taxes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


