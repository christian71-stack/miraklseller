<?php
/**
 * OF21Response200Offers
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  cbdesk\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mirakl Marketplace APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest-release
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace cbdesk\Mirakl\Model;

use \ArrayAccess;
use \cbdesk\Mirakl\ObjectSerializer;

/**
 * OF21Response200Offers Class Doc Comment
 *
 * @category Class
 * @package  cbdesk\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OF21Response200Offers implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OF21_Response_200_Offers';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'active' => 'bool',
        'all_prices' => '\cbdesk\Mirakl\Model\OF21Response200OffersAllPrices[]',
        'allow_quote_requests' => 'bool',
        'applicable_pricing' => '\cbdesk\Mirakl\Model\OF21Response200OffersApplicablePricing',
        'available_end_date' => '\DateTime',
        'available_start_date' => '\DateTime',
        'category_code' => 'string',
        'category_label' => 'string',
        'channels' => 'string[]',
        'currency_iso_code' => 'string',
        'description' => 'string',
        'eco_contributions' => '\cbdesk\Mirakl\Model\OF21Response200OffersEcoContributions[]',
        'favorite_rank' => 'int',
        'fulfillment' => '\cbdesk\Mirakl\Model\OF21Response200OffersFulfillment',
        'inactivity_reasons' => 'string[]',
        'internal_description' => 'string',
        'leadtime_to_ship' => 'int',
        'logistic_class' => '\cbdesk\Mirakl\Model\OF21Response200OffersLogisticClass',
        'max_order_quantity' => 'int',
        'min_order_quantity' => 'int',
        'min_quantity_alert' => 'int',
        'min_shipping_price' => 'float',
        'min_shipping_price_additional' => 'float',
        'min_shipping_type' => 'string',
        'min_shipping_zone' => 'string',
        'msrp' => 'float',
        'offer_additional_fields' => '\cbdesk\Mirakl\Model\OF21Response200OffersOfferAdditionalFields[]',
        'offer_id' => 'int',
        'package_quantity' => 'int',
        'price' => 'float',
        'price_additional_info' => 'string',
        'product_brand' => 'string',
        'product_description' => 'string',
        'product_references' => '\cbdesk\Mirakl\Model\OF21Response200OffersProductReferences[]',
        'product_sku' => 'string',
        'product_tax_code' => 'string',
        'product_title' => 'string',
        'quantity' => 'int',
        'retail_prices' => '\cbdesk\Mirakl\Model\OF21Response200OffersRetailPrices[]',
        'shipping_deadline' => '\DateTime',
        'shop_sku' => 'string',
        'state_code' => 'string',
        'total_price' => 'float',
        'warehouses' => '\cbdesk\Mirakl\Model\OF21Response200OffersWarehouses[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'active' => null,
        'all_prices' => null,
        'allow_quote_requests' => null,
        'applicable_pricing' => null,
        'available_end_date' => 'date-time',
        'available_start_date' => 'date-time',
        'category_code' => null,
        'category_label' => null,
        'channels' => null,
        'currency_iso_code' => null,
        'description' => null,
        'eco_contributions' => null,
        'favorite_rank' => 'int32',
        'fulfillment' => null,
        'inactivity_reasons' => null,
        'internal_description' => null,
        'leadtime_to_ship' => 'int32',
        'logistic_class' => null,
        'max_order_quantity' => 'int32',
        'min_order_quantity' => 'int32',
        'min_quantity_alert' => 'int32',
        'min_shipping_price' => null,
        'min_shipping_price_additional' => null,
        'min_shipping_type' => null,
        'min_shipping_zone' => null,
        'msrp' => null,
        'offer_additional_fields' => null,
        'offer_id' => 'int64',
        'package_quantity' => 'int32',
        'price' => null,
        'price_additional_info' => null,
        'product_brand' => null,
        'product_description' => null,
        'product_references' => null,
        'product_sku' => null,
        'product_tax_code' => null,
        'product_title' => null,
        'quantity' => 'int32',
        'retail_prices' => null,
        'shipping_deadline' => 'date-time',
        'shop_sku' => null,
        'state_code' => null,
        'total_price' => null,
        'warehouses' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'active' => false,
        'all_prices' => false,
        'allow_quote_requests' => false,
        'applicable_pricing' => false,
        'available_end_date' => false,
        'available_start_date' => false,
        'category_code' => false,
        'category_label' => false,
        'channels' => false,
        'currency_iso_code' => false,
        'description' => false,
        'eco_contributions' => false,
        'favorite_rank' => false,
        'fulfillment' => false,
        'inactivity_reasons' => false,
        'internal_description' => false,
        'leadtime_to_ship' => false,
        'logistic_class' => false,
        'max_order_quantity' => false,
        'min_order_quantity' => false,
        'min_quantity_alert' => false,
        'min_shipping_price' => false,
        'min_shipping_price_additional' => false,
        'min_shipping_type' => false,
        'min_shipping_zone' => false,
        'msrp' => false,
        'offer_additional_fields' => false,
        'offer_id' => false,
        'package_quantity' => false,
        'price' => false,
        'price_additional_info' => false,
        'product_brand' => false,
        'product_description' => false,
        'product_references' => false,
        'product_sku' => false,
        'product_tax_code' => false,
        'product_title' => false,
        'quantity' => false,
        'retail_prices' => false,
        'shipping_deadline' => false,
        'shop_sku' => false,
        'state_code' => false,
        'total_price' => false,
        'warehouses' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'active' => 'active',
        'all_prices' => 'all_prices',
        'allow_quote_requests' => 'allow_quote_requests',
        'applicable_pricing' => 'applicable_pricing',
        'available_end_date' => 'available_end_date',
        'available_start_date' => 'available_start_date',
        'category_code' => 'category_code',
        'category_label' => 'category_label',
        'channels' => 'channels',
        'currency_iso_code' => 'currency_iso_code',
        'description' => 'description',
        'eco_contributions' => 'eco_contributions',
        'favorite_rank' => 'favorite_rank',
        'fulfillment' => 'fulfillment',
        'inactivity_reasons' => 'inactivity_reasons',
        'internal_description' => 'internal_description',
        'leadtime_to_ship' => 'leadtime_to_ship',
        'logistic_class' => 'logistic_class',
        'max_order_quantity' => 'max_order_quantity',
        'min_order_quantity' => 'min_order_quantity',
        'min_quantity_alert' => 'min_quantity_alert',
        'min_shipping_price' => 'min_shipping_price',
        'min_shipping_price_additional' => 'min_shipping_price_additional',
        'min_shipping_type' => 'min_shipping_type',
        'min_shipping_zone' => 'min_shipping_zone',
        'msrp' => 'msrp',
        'offer_additional_fields' => 'offer_additional_fields',
        'offer_id' => 'offer_id',
        'package_quantity' => 'package_quantity',
        'price' => 'price',
        'price_additional_info' => 'price_additional_info',
        'product_brand' => 'product_brand',
        'product_description' => 'product_description',
        'product_references' => 'product_references',
        'product_sku' => 'product_sku',
        'product_tax_code' => 'product_tax_code',
        'product_title' => 'product_title',
        'quantity' => 'quantity',
        'retail_prices' => 'retail_prices',
        'shipping_deadline' => 'shipping_deadline',
        'shop_sku' => 'shop_sku',
        'state_code' => 'state_code',
        'total_price' => 'total_price',
        'warehouses' => 'warehouses'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'active' => 'setActive',
        'all_prices' => 'setAllPrices',
        'allow_quote_requests' => 'setAllowQuoteRequests',
        'applicable_pricing' => 'setApplicablePricing',
        'available_end_date' => 'setAvailableEndDate',
        'available_start_date' => 'setAvailableStartDate',
        'category_code' => 'setCategoryCode',
        'category_label' => 'setCategoryLabel',
        'channels' => 'setChannels',
        'currency_iso_code' => 'setCurrencyIsoCode',
        'description' => 'setDescription',
        'eco_contributions' => 'setEcoContributions',
        'favorite_rank' => 'setFavoriteRank',
        'fulfillment' => 'setFulfillment',
        'inactivity_reasons' => 'setInactivityReasons',
        'internal_description' => 'setInternalDescription',
        'leadtime_to_ship' => 'setLeadtimeToShip',
        'logistic_class' => 'setLogisticClass',
        'max_order_quantity' => 'setMaxOrderQuantity',
        'min_order_quantity' => 'setMinOrderQuantity',
        'min_quantity_alert' => 'setMinQuantityAlert',
        'min_shipping_price' => 'setMinShippingPrice',
        'min_shipping_price_additional' => 'setMinShippingPriceAdditional',
        'min_shipping_type' => 'setMinShippingType',
        'min_shipping_zone' => 'setMinShippingZone',
        'msrp' => 'setMsrp',
        'offer_additional_fields' => 'setOfferAdditionalFields',
        'offer_id' => 'setOfferId',
        'package_quantity' => 'setPackageQuantity',
        'price' => 'setPrice',
        'price_additional_info' => 'setPriceAdditionalInfo',
        'product_brand' => 'setProductBrand',
        'product_description' => 'setProductDescription',
        'product_references' => 'setProductReferences',
        'product_sku' => 'setProductSku',
        'product_tax_code' => 'setProductTaxCode',
        'product_title' => 'setProductTitle',
        'quantity' => 'setQuantity',
        'retail_prices' => 'setRetailPrices',
        'shipping_deadline' => 'setShippingDeadline',
        'shop_sku' => 'setShopSku',
        'state_code' => 'setStateCode',
        'total_price' => 'setTotalPrice',
        'warehouses' => 'setWarehouses'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'active' => 'getActive',
        'all_prices' => 'getAllPrices',
        'allow_quote_requests' => 'getAllowQuoteRequests',
        'applicable_pricing' => 'getApplicablePricing',
        'available_end_date' => 'getAvailableEndDate',
        'available_start_date' => 'getAvailableStartDate',
        'category_code' => 'getCategoryCode',
        'category_label' => 'getCategoryLabel',
        'channels' => 'getChannels',
        'currency_iso_code' => 'getCurrencyIsoCode',
        'description' => 'getDescription',
        'eco_contributions' => 'getEcoContributions',
        'favorite_rank' => 'getFavoriteRank',
        'fulfillment' => 'getFulfillment',
        'inactivity_reasons' => 'getInactivityReasons',
        'internal_description' => 'getInternalDescription',
        'leadtime_to_ship' => 'getLeadtimeToShip',
        'logistic_class' => 'getLogisticClass',
        'max_order_quantity' => 'getMaxOrderQuantity',
        'min_order_quantity' => 'getMinOrderQuantity',
        'min_quantity_alert' => 'getMinQuantityAlert',
        'min_shipping_price' => 'getMinShippingPrice',
        'min_shipping_price_additional' => 'getMinShippingPriceAdditional',
        'min_shipping_type' => 'getMinShippingType',
        'min_shipping_zone' => 'getMinShippingZone',
        'msrp' => 'getMsrp',
        'offer_additional_fields' => 'getOfferAdditionalFields',
        'offer_id' => 'getOfferId',
        'package_quantity' => 'getPackageQuantity',
        'price' => 'getPrice',
        'price_additional_info' => 'getPriceAdditionalInfo',
        'product_brand' => 'getProductBrand',
        'product_description' => 'getProductDescription',
        'product_references' => 'getProductReferences',
        'product_sku' => 'getProductSku',
        'product_tax_code' => 'getProductTaxCode',
        'product_title' => 'getProductTitle',
        'quantity' => 'getQuantity',
        'retail_prices' => 'getRetailPrices',
        'shipping_deadline' => 'getShippingDeadline',
        'shop_sku' => 'getShopSku',
        'state_code' => 'getStateCode',
        'total_price' => 'getTotalPrice',
        'warehouses' => 'getWarehouses'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('active', $data ?? [], null);
        $this->setIfExists('all_prices', $data ?? [], null);
        $this->setIfExists('allow_quote_requests', $data ?? [], null);
        $this->setIfExists('applicable_pricing', $data ?? [], null);
        $this->setIfExists('available_end_date', $data ?? [], null);
        $this->setIfExists('available_start_date', $data ?? [], null);
        $this->setIfExists('category_code', $data ?? [], null);
        $this->setIfExists('category_label', $data ?? [], null);
        $this->setIfExists('channels', $data ?? [], null);
        $this->setIfExists('currency_iso_code', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('eco_contributions', $data ?? [], null);
        $this->setIfExists('favorite_rank', $data ?? [], null);
        $this->setIfExists('fulfillment', $data ?? [], null);
        $this->setIfExists('inactivity_reasons', $data ?? [], null);
        $this->setIfExists('internal_description', $data ?? [], null);
        $this->setIfExists('leadtime_to_ship', $data ?? [], null);
        $this->setIfExists('logistic_class', $data ?? [], null);
        $this->setIfExists('max_order_quantity', $data ?? [], null);
        $this->setIfExists('min_order_quantity', $data ?? [], null);
        $this->setIfExists('min_quantity_alert', $data ?? [], null);
        $this->setIfExists('min_shipping_price', $data ?? [], null);
        $this->setIfExists('min_shipping_price_additional', $data ?? [], null);
        $this->setIfExists('min_shipping_type', $data ?? [], null);
        $this->setIfExists('min_shipping_zone', $data ?? [], null);
        $this->setIfExists('msrp', $data ?? [], null);
        $this->setIfExists('offer_additional_fields', $data ?? [], null);
        $this->setIfExists('offer_id', $data ?? [], null);
        $this->setIfExists('package_quantity', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('price_additional_info', $data ?? [], null);
        $this->setIfExists('product_brand', $data ?? [], null);
        $this->setIfExists('product_description', $data ?? [], null);
        $this->setIfExists('product_references', $data ?? [], null);
        $this->setIfExists('product_sku', $data ?? [], null);
        $this->setIfExists('product_tax_code', $data ?? [], null);
        $this->setIfExists('product_title', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('retail_prices', $data ?? [], null);
        $this->setIfExists('shipping_deadline', $data ?? [], null);
        $this->setIfExists('shop_sku', $data ?? [], null);
        $this->setIfExists('state_code', $data ?? [], null);
        $this->setIfExists('total_price', $data ?? [], null);
        $this->setIfExists('warehouses', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['eco_contributions']) && (count($this->container['eco_contributions']) > 20)) {
            $invalidProperties[] = "invalid value for 'eco_contributions', number of items must be less than or equal to 20.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active Is the offer active
     *
     * @return self
     */
    public function setActive($active)
    {
        if (is_null($active)) {
            throw new \InvalidArgumentException('non-nullable active cannot be null');
        }
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets all_prices
     *
     * @return \cbdesk\Mirakl\Model\OF21Response200OffersAllPrices[]|null
     */
    public function getAllPrices()
    {
        return $this->container['all_prices'];
    }

    /**
     * Sets all_prices
     *
     * @param \cbdesk\Mirakl\Model\OF21Response200OffersAllPrices[]|null $all_prices All prices for the offer <br/> For Dropship specifically: the list of purchasing prices of the offer, also referred to as costs or wholesale prices
     *
     * @return self
     */
    public function setAllPrices($all_prices)
    {
        if (is_null($all_prices)) {
            throw new \InvalidArgumentException('non-nullable all_prices cannot be null');
        }
        $this->container['all_prices'] = $all_prices;

        return $this;
    }

    /**
     * Gets allow_quote_requests
     *
     * @return bool|null
     */
    public function getAllowQuoteRequests()
    {
        return $this->container['allow_quote_requests'];
    }

    /**
     * Sets allow_quote_requests
     *
     * @param bool|null $allow_quote_requests Whether the offer is eligible for quotation
     *
     * @return self
     */
    public function setAllowQuoteRequests($allow_quote_requests)
    {
        if (is_null($allow_quote_requests)) {
            throw new \InvalidArgumentException('non-nullable allow_quote_requests cannot be null');
        }
        $this->container['allow_quote_requests'] = $allow_quote_requests;

        return $this;
    }

    /**
     * Gets applicable_pricing
     *
     * @return \cbdesk\Mirakl\Model\OF21Response200OffersApplicablePricing|null
     */
    public function getApplicablePricing()
    {
        return $this->container['applicable_pricing'];
    }

    /**
     * Sets applicable_pricing
     *
     * @param \cbdesk\Mirakl\Model\OF21Response200OffersApplicablePricing|null $applicable_pricing applicable_pricing
     *
     * @return self
     */
    public function setApplicablePricing($applicable_pricing)
    {
        if (is_null($applicable_pricing)) {
            throw new \InvalidArgumentException('non-nullable applicable_pricing cannot be null');
        }
        $this->container['applicable_pricing'] = $applicable_pricing;

        return $this;
    }

    /**
     * Gets available_end_date
     *
     * @return \DateTime|null
     */
    public function getAvailableEndDate()
    {
        return $this->container['available_end_date'];
    }

    /**
     * Sets available_end_date
     *
     * @param \DateTime|null $available_end_date Available end date
     *
     * @return self
     */
    public function setAvailableEndDate($available_end_date)
    {
        if (is_null($available_end_date)) {
            throw new \InvalidArgumentException('non-nullable available_end_date cannot be null');
        }
        $this->container['available_end_date'] = $available_end_date;

        return $this;
    }

    /**
     * Gets available_start_date
     *
     * @return \DateTime|null
     */
    public function getAvailableStartDate()
    {
        return $this->container['available_start_date'];
    }

    /**
     * Sets available_start_date
     *
     * @param \DateTime|null $available_start_date Available start date
     *
     * @return self
     */
    public function setAvailableStartDate($available_start_date)
    {
        if (is_null($available_start_date)) {
            throw new \InvalidArgumentException('non-nullable available_start_date cannot be null');
        }
        $this->container['available_start_date'] = $available_start_date;

        return $this;
    }

    /**
     * Gets category_code
     *
     * @return string|null
     */
    public function getCategoryCode()
    {
        return $this->container['category_code'];
    }

    /**
     * Sets category_code
     *
     * @param string|null $category_code Product category code
     *
     * @return self
     */
    public function setCategoryCode($category_code)
    {
        if (is_null($category_code)) {
            throw new \InvalidArgumentException('non-nullable category_code cannot be null');
        }
        $this->container['category_code'] = $category_code;

        return $this;
    }

    /**
     * Gets category_label
     *
     * @return string|null
     */
    public function getCategoryLabel()
    {
        return $this->container['category_label'];
    }

    /**
     * Sets category_label
     *
     * @param string|null $category_label Product category label
     *
     * @return self
     */
    public function setCategoryLabel($category_label)
    {
        if (is_null($category_label)) {
            throw new \InvalidArgumentException('non-nullable category_label cannot be null');
        }
        $this->container['category_label'] = $category_label;

        return $this;
    }

    /**
     * Gets channels
     *
     * @return string[]|null
     */
    public function getChannels()
    {
        return $this->container['channels'];
    }

    /**
     * Sets channels
     *
     * @param string[]|null $channels List of channel codes on which the offer can be sold
     *
     * @return self
     */
    public function setChannels($channels)
    {
        if (is_null($channels)) {
            throw new \InvalidArgumentException('non-nullable channels cannot be null');
        }
        $this->container['channels'] = $channels;

        return $this;
    }

    /**
     * Gets currency_iso_code
     *
     * @return string|null
     */
    public function getCurrencyIsoCode()
    {
        return $this->container['currency_iso_code'];
    }

    /**
     * Sets currency_iso_code
     *
     * @param string|null $currency_iso_code The currency of the shop (iso format)
     *
     * @return self
     */
    public function setCurrencyIsoCode($currency_iso_code)
    {
        if (is_null($currency_iso_code)) {
            throw new \InvalidArgumentException('non-nullable currency_iso_code cannot be null');
        }
        $this->container['currency_iso_code'] = $currency_iso_code;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Offer description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets eco_contributions
     *
     * @return \cbdesk\Mirakl\Model\OF21Response200OffersEcoContributions[]|null
     */
    public function getEcoContributions()
    {
        return $this->container['eco_contributions'];
    }

    /**
     * Sets eco_contributions
     *
     * @param \cbdesk\Mirakl\Model\OF21Response200OffersEcoContributions[]|null $eco_contributions Eco-contributions of the offer - only available if the operator setting <em>Activate data collection related to circular economy regulations</em> has been enabled.
     *
     * @return self
     */
    public function setEcoContributions($eco_contributions)
    {
        if (is_null($eco_contributions)) {
            throw new \InvalidArgumentException('non-nullable eco_contributions cannot be null');
        }

        if ((count($eco_contributions) > 20)) {
            throw new \InvalidArgumentException('invalid value for $eco_contributions when calling OF21Response200Offers., number of items must be less than or equal to 20.');
        }
        $this->container['eco_contributions'] = $eco_contributions;

        return $this;
    }

    /**
     * Gets favorite_rank
     *
     * @return int|null
     */
    public function getFavoriteRank()
    {
        return $this->container['favorite_rank'];
    }

    /**
     * Sets favorite_rank
     *
     * @param int|null $favorite_rank Favorite rank for the offer, when the favorite feature is enabled and the offer is a favorite
     *
     * @return self
     */
    public function setFavoriteRank($favorite_rank)
    {
        if (is_null($favorite_rank)) {
            throw new \InvalidArgumentException('non-nullable favorite_rank cannot be null');
        }
        $this->container['favorite_rank'] = $favorite_rank;

        return $this;
    }

    /**
     * Gets fulfillment
     *
     * @return \cbdesk\Mirakl\Model\OF21Response200OffersFulfillment|null
     */
    public function getFulfillment()
    {
        return $this->container['fulfillment'];
    }

    /**
     * Sets fulfillment
     *
     * @param \cbdesk\Mirakl\Model\OF21Response200OffersFulfillment|null $fulfillment fulfillment
     *
     * @return self
     */
    public function setFulfillment($fulfillment)
    {
        if (is_null($fulfillment)) {
            throw new \InvalidArgumentException('non-nullable fulfillment cannot be null');
        }
        $this->container['fulfillment'] = $fulfillment;

        return $this;
    }

    /**
     * Gets inactivity_reasons
     *
     * @return string[]|null
     */
    public function getInactivityReasons()
    {
        return $this->container['inactivity_reasons'];
    }

    /**
     * Sets inactivity_reasons
     *
     * @param string[]|null $inactivity_reasons Reasons for offers inactivity, mandatory if an offer is inactive
     *
     * @return self
     */
    public function setInactivityReasons($inactivity_reasons)
    {
        if (is_null($inactivity_reasons)) {
            throw new \InvalidArgumentException('non-nullable inactivity_reasons cannot be null');
        }
        $this->container['inactivity_reasons'] = $inactivity_reasons;

        return $this;
    }

    /**
     * Gets internal_description
     *
     * @return string|null
     */
    public function getInternalDescription()
    {
        return $this->container['internal_description'];
    }

    /**
     * Sets internal_description
     *
     * @param string|null $internal_description The offer's description as shown in the back office
     *
     * @return self
     */
    public function setInternalDescription($internal_description)
    {
        if (is_null($internal_description)) {
            throw new \InvalidArgumentException('non-nullable internal_description cannot be null');
        }
        $this->container['internal_description'] = $internal_description;

        return $this;
    }

    /**
     * Gets leadtime_to_ship
     *
     * @return int|null
     */
    public function getLeadtimeToShip()
    {
        return $this->container['leadtime_to_ship'];
    }

    /**
     * Sets leadtime_to_ship
     *
     * @param int|null $leadtime_to_ship Offer's lead time to ship value. If this value has been set to 0, value is returned as 1 (unless platform's default lead time to ship value is also 0). If no lead time to ship was specified for the offer, platform's default value is returned.
     *
     * @return self
     */
    public function setLeadtimeToShip($leadtime_to_ship)
    {
        if (is_null($leadtime_to_ship)) {
            throw new \InvalidArgumentException('non-nullable leadtime_to_ship cannot be null');
        }
        $this->container['leadtime_to_ship'] = $leadtime_to_ship;

        return $this;
    }

    /**
     * Gets logistic_class
     *
     * @return \cbdesk\Mirakl\Model\OF21Response200OffersLogisticClass|null
     */
    public function getLogisticClass()
    {
        return $this->container['logistic_class'];
    }

    /**
     * Sets logistic_class
     *
     * @param \cbdesk\Mirakl\Model\OF21Response200OffersLogisticClass|null $logistic_class logistic_class
     *
     * @return self
     */
    public function setLogisticClass($logistic_class)
    {
        if (is_null($logistic_class)) {
            throw new \InvalidArgumentException('non-nullable logistic_class cannot be null');
        }
        $this->container['logistic_class'] = $logistic_class;

        return $this;
    }

    /**
     * Gets max_order_quantity
     *
     * @return int|null
     */
    public function getMaxOrderQuantity()
    {
        return $this->container['max_order_quantity'];
    }

    /**
     * Sets max_order_quantity
     *
     * @param int|null $max_order_quantity Highest quantity of product items per order
     *
     * @return self
     */
    public function setMaxOrderQuantity($max_order_quantity)
    {
        if (is_null($max_order_quantity)) {
            throw new \InvalidArgumentException('non-nullable max_order_quantity cannot be null');
        }
        $this->container['max_order_quantity'] = $max_order_quantity;

        return $this;
    }

    /**
     * Gets min_order_quantity
     *
     * @return int|null
     */
    public function getMinOrderQuantity()
    {
        return $this->container['min_order_quantity'];
    }

    /**
     * Sets min_order_quantity
     *
     * @param int|null $min_order_quantity Lowest quantity of product items per order
     *
     * @return self
     */
    public function setMinOrderQuantity($min_order_quantity)
    {
        if (is_null($min_order_quantity)) {
            throw new \InvalidArgumentException('non-nullable min_order_quantity cannot be null');
        }
        $this->container['min_order_quantity'] = $min_order_quantity;

        return $this;
    }

    /**
     * Gets min_quantity_alert
     *
     * @return int|null
     */
    public function getMinQuantityAlert()
    {
        return $this->container['min_quantity_alert'];
    }

    /**
     * Sets min_quantity_alert
     *
     * @param int|null $min_quantity_alert Mininum quantity of the offer
     *
     * @return self
     */
    public function setMinQuantityAlert($min_quantity_alert)
    {
        if (is_null($min_quantity_alert)) {
            throw new \InvalidArgumentException('non-nullable min_quantity_alert cannot be null');
        }
        $this->container['min_quantity_alert'] = $min_quantity_alert;

        return $this;
    }

    /**
     * Gets min_shipping_price
     *
     * @return float|null
     */
    public function getMinShippingPrice()
    {
        return $this->container['min_shipping_price'];
    }

    /**
     * Sets min_shipping_price
     *
     * @param float|null $min_shipping_price Unit price of the minimum shipping rate
     *
     * @return self
     */
    public function setMinShippingPrice($min_shipping_price)
    {
        if (is_null($min_shipping_price)) {
            throw new \InvalidArgumentException('non-nullable min_shipping_price cannot be null');
        }
        $this->container['min_shipping_price'] = $min_shipping_price;

        return $this;
    }

    /**
     * Gets min_shipping_price_additional
     *
     * @return float|null
     */
    public function getMinShippingPriceAdditional()
    {
        return $this->container['min_shipping_price_additional'];
    }

    /**
     * Sets min_shipping_price_additional
     *
     * @param float|null $min_shipping_price_additional Additional unit price associated to the minimum shipping rate
     *
     * @return self
     */
    public function setMinShippingPriceAdditional($min_shipping_price_additional)
    {
        if (is_null($min_shipping_price_additional)) {
            throw new \InvalidArgumentException('non-nullable min_shipping_price_additional cannot be null');
        }
        $this->container['min_shipping_price_additional'] = $min_shipping_price_additional;

        return $this;
    }

    /**
     * Gets min_shipping_type
     *
     * @return string|null
     */
    public function getMinShippingType()
    {
        return $this->container['min_shipping_type'];
    }

    /**
     * Sets min_shipping_type
     *
     * @param string|null $min_shipping_type Code of the shipping type associated to the minimum shipping rate
     *
     * @return self
     */
    public function setMinShippingType($min_shipping_type)
    {
        if (is_null($min_shipping_type)) {
            throw new \InvalidArgumentException('non-nullable min_shipping_type cannot be null');
        }
        $this->container['min_shipping_type'] = $min_shipping_type;

        return $this;
    }

    /**
     * Gets min_shipping_zone
     *
     * @return string|null
     */
    public function getMinShippingZone()
    {
        return $this->container['min_shipping_zone'];
    }

    /**
     * Sets min_shipping_zone
     *
     * @param string|null $min_shipping_zone Code of the shipping zone associated to the minimum shipping rate
     *
     * @return self
     */
    public function setMinShippingZone($min_shipping_zone)
    {
        if (is_null($min_shipping_zone)) {
            throw new \InvalidArgumentException('non-nullable min_shipping_zone cannot be null');
        }
        $this->container['min_shipping_zone'] = $min_shipping_zone;

        return $this;
    }

    /**
     * Gets msrp
     *
     * @return float|null
     */
    public function getMsrp()
    {
        return $this->container['msrp'];
    }

    /**
     * Sets msrp
     *
     * @param float|null $msrp The retail price recommendation, also referred to as manufacturer's suggested retail price (MSRP) or recommended retail price (RRP). <br/> Applicable only for Dropship offers.
     *
     * @return self
     */
    public function setMsrp($msrp)
    {
        if (is_null($msrp)) {
            throw new \InvalidArgumentException('non-nullable msrp cannot be null');
        }
        $this->container['msrp'] = $msrp;

        return $this;
    }

    /**
     * Gets offer_additional_fields
     *
     * @return \cbdesk\Mirakl\Model\OF21Response200OffersOfferAdditionalFields[]|null
     */
    public function getOfferAdditionalFields()
    {
        return $this->container['offer_additional_fields'];
    }

    /**
     * Sets offer_additional_fields
     *
     * @param \cbdesk\Mirakl\Model\OF21Response200OffersOfferAdditionalFields[]|null $offer_additional_fields Custom fields of the offer
     *
     * @return self
     */
    public function setOfferAdditionalFields($offer_additional_fields)
    {
        if (is_null($offer_additional_fields)) {
            throw new \InvalidArgumentException('non-nullable offer_additional_fields cannot be null');
        }
        $this->container['offer_additional_fields'] = $offer_additional_fields;

        return $this;
    }

    /**
     * Gets offer_id
     *
     * @return int|null
     */
    public function getOfferId()
    {
        return $this->container['offer_id'];
    }

    /**
     * Sets offer_id
     *
     * @param int|null $offer_id Identifier of the offer
     *
     * @return self
     */
    public function setOfferId($offer_id)
    {
        if (is_null($offer_id)) {
            throw new \InvalidArgumentException('non-nullable offer_id cannot be null');
        }
        $this->container['offer_id'] = $offer_id;

        return $this;
    }

    /**
     * Gets package_quantity
     *
     * @return int|null
     */
    public function getPackageQuantity()
    {
        return $this->container['package_quantity'];
    }

    /**
     * Sets package_quantity
     *
     * @param int|null $package_quantity Indivisible quantity of the same product
     *
     * @return self
     */
    public function setPackageQuantity($package_quantity)
    {
        if (is_null($package_quantity)) {
            throw new \InvalidArgumentException('non-nullable package_quantity cannot be null');
        }
        $this->container['package_quantity'] = $package_quantity;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float|null $price Price of the offer <br/> For Dropship specifically: the purchasing price of the offer, also referred to as cost or wholesale price
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            throw new \InvalidArgumentException('non-nullable price cannot be null');
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets price_additional_info
     *
     * @return string|null
     */
    public function getPriceAdditionalInfo()
    {
        return $this->container['price_additional_info'];
    }

    /**
     * Sets price_additional_info
     *
     * @param string|null $price_additional_info Additional price information for the offer
     *
     * @return self
     */
    public function setPriceAdditionalInfo($price_additional_info)
    {
        if (is_null($price_additional_info)) {
            throw new \InvalidArgumentException('non-nullable price_additional_info cannot be null');
        }
        $this->container['price_additional_info'] = $price_additional_info;

        return $this;
    }

    /**
     * Gets product_brand
     *
     * @return string|null
     */
    public function getProductBrand()
    {
        return $this->container['product_brand'];
    }

    /**
     * Sets product_brand
     *
     * @param string|null $product_brand Brand of the product
     *
     * @return self
     */
    public function setProductBrand($product_brand)
    {
        if (is_null($product_brand)) {
            throw new \InvalidArgumentException('non-nullable product_brand cannot be null');
        }
        $this->container['product_brand'] = $product_brand;

        return $this;
    }

    /**
     * Gets product_description
     *
     * @return string|null
     */
    public function getProductDescription()
    {
        return $this->container['product_description'];
    }

    /**
     * Sets product_description
     *
     * @param string|null $product_description Description of the product
     *
     * @return self
     */
    public function setProductDescription($product_description)
    {
        if (is_null($product_description)) {
            throw new \InvalidArgumentException('non-nullable product_description cannot be null');
        }
        $this->container['product_description'] = $product_description;

        return $this;
    }

    /**
     * Gets product_references
     *
     * @return \cbdesk\Mirakl\Model\OF21Response200OffersProductReferences[]|null
     */
    public function getProductReferences()
    {
        return $this->container['product_references'];
    }

    /**
     * Sets product_references
     *
     * @param \cbdesk\Mirakl\Model\OF21Response200OffersProductReferences[]|null $product_references Product references
     *
     * @return self
     */
    public function setProductReferences($product_references)
    {
        if (is_null($product_references)) {
            throw new \InvalidArgumentException('non-nullable product_references cannot be null');
        }
        $this->container['product_references'] = $product_references;

        return $this;
    }

    /**
     * Gets product_sku
     *
     * @return string|null
     */
    public function getProductSku()
    {
        return $this->container['product_sku'];
    }

    /**
     * Sets product_sku
     *
     * @param string|null $product_sku Product SKU
     *
     * @return self
     */
    public function setProductSku($product_sku)
    {
        if (is_null($product_sku)) {
            throw new \InvalidArgumentException('non-nullable product_sku cannot be null');
        }
        $this->container['product_sku'] = $product_sku;

        return $this;
    }

    /**
     * Gets product_tax_code
     *
     * @return string|null
     */
    public function getProductTaxCode()
    {
        return $this->container['product_tax_code'];
    }

    /**
     * Sets product_tax_code
     *
     * @param string|null $product_tax_code Offer product tax code
     *
     * @return self
     */
    public function setProductTaxCode($product_tax_code)
    {
        if (is_null($product_tax_code)) {
            throw new \InvalidArgumentException('non-nullable product_tax_code cannot be null');
        }
        $this->container['product_tax_code'] = $product_tax_code;

        return $this;
    }

    /**
     * Gets product_title
     *
     * @return string|null
     */
    public function getProductTitle()
    {
        return $this->container['product_title'];
    }

    /**
     * Sets product_title
     *
     * @param string|null $product_title Product title
     *
     * @return self
     */
    public function setProductTitle($product_title)
    {
        if (is_null($product_title)) {
            throw new \InvalidArgumentException('non-nullable product_title cannot be null');
        }
        $this->container['product_title'] = $product_title;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int|null $quantity Available quantity of the offer
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets retail_prices
     *
     * @return \cbdesk\Mirakl\Model\OF21Response200OffersRetailPrices[]|null
     */
    public function getRetailPrices()
    {
        return $this->container['retail_prices'];
    }

    /**
     * Sets retail_prices
     *
     * @param \cbdesk\Mirakl\Model\OF21Response200OffersRetailPrices[]|null $retail_prices List retail prices for the offer, also referred to as selling prices. <br/> Applicable only for Dropship offers.
     *
     * @return self
     */
    public function setRetailPrices($retail_prices)
    {
        if (is_null($retail_prices)) {
            throw new \InvalidArgumentException('non-nullable retail_prices cannot be null');
        }
        $this->container['retail_prices'] = $retail_prices;

        return $this;
    }

    /**
     * Gets shipping_deadline
     *
     * @return \DateTime|null
     */
    public function getShippingDeadline()
    {
        return $this->container['shipping_deadline'];
    }

    /**
     * Sets shipping_deadline
     *
     * @param \DateTime|null $shipping_deadline Estimated shipping date, that includes business closing days and cut-off configured on the platform. Add the earliest and latest delivery times to calculate the estimated delivery date to customers
     *
     * @return self
     */
    public function setShippingDeadline($shipping_deadline)
    {
        if (is_null($shipping_deadline)) {
            throw new \InvalidArgumentException('non-nullable shipping_deadline cannot be null');
        }
        $this->container['shipping_deadline'] = $shipping_deadline;

        return $this;
    }

    /**
     * Gets shop_sku
     *
     * @return string|null
     */
    public function getShopSku()
    {
        return $this->container['shop_sku'];
    }

    /**
     * Sets shop_sku
     *
     * @param string|null $shop_sku Shop's sku of the offer
     *
     * @return self
     */
    public function setShopSku($shop_sku)
    {
        if (is_null($shop_sku)) {
            throw new \InvalidArgumentException('non-nullable shop_sku cannot be null');
        }
        $this->container['shop_sku'] = $shop_sku;

        return $this;
    }

    /**
     * Gets state_code
     *
     * @return string|null
     */
    public function getStateCode()
    {
        return $this->container['state_code'];
    }

    /**
     * Sets state_code
     *
     * @param string|null $state_code Offer condition
     *
     * @return self
     */
    public function setStateCode($state_code)
    {
        if (is_null($state_code)) {
            throw new \InvalidArgumentException('non-nullable state_code cannot be null');
        }
        $this->container['state_code'] = $state_code;

        return $this;
    }

    /**
     * Gets total_price
     *
     * @return float|null
     */
    public function getTotalPrice()
    {
        return $this->container['total_price'];
    }

    /**
     * Sets total_price
     *
     * @param float|null $total_price Total price of the offer (price + minimum shipping rate) <br/> For Dropship specifically: the purchasing price of the offer + minimum shipping rate
     *
     * @return self
     */
    public function setTotalPrice($total_price)
    {
        if (is_null($total_price)) {
            throw new \InvalidArgumentException('non-nullable total_price cannot be null');
        }
        $this->container['total_price'] = $total_price;

        return $this;
    }

    /**
     * Gets warehouses
     *
     * @return \cbdesk\Mirakl\Model\OF21Response200OffersWarehouses[]|null
     */
    public function getWarehouses()
    {
        return $this->container['warehouses'];
    }

    /**
     * Sets warehouses
     *
     * @param \cbdesk\Mirakl\Model\OF21Response200OffersWarehouses[]|null $warehouses The breakdown of the available quantities of the offer in each warehouse.
     *
     * @return self
     */
    public function setWarehouses($warehouses)
    {
        if (is_null($warehouses)) {
            throw new \InvalidArgumentException('non-nullable warehouses cannot be null');
        }
        $this->container['warehouses'] = $warehouses;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


