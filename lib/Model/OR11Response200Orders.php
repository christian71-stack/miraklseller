<?php
/**
 * OR11Response200Orders
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  cbdesk\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mirakl Marketplace APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest-release
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace cbdesk\Mirakl\Model;

use \ArrayAccess;
use \cbdesk\Mirakl\ObjectSerializer;

/**
 * OR11Response200Orders Class Doc Comment
 *
 * @category Class
 * @package  cbdesk\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OR11Response200Orders implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OR11_Response_200_Orders';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'acceptance_decision_date' => '\DateTime',
        'can_cancel' => 'bool',
        'can_shop_ship' => 'bool',
        'channel' => '\cbdesk\Mirakl\Model\OR11Response200OrdersChannel',
        'commercial_id' => 'string',
        'created_date' => '\DateTime',
        'currency_iso_code' => 'string',
        'customer' => '\cbdesk\Mirakl\Model\OR11Response200OrdersCustomer',
        'customer_debited_date' => '\DateTime',
        'customer_directly_pays_seller' => 'bool',
        'customer_notification_email' => 'string',
        'delivery_date' => '\cbdesk\Mirakl\Model\OR11Response200OrdersDeliveryDate',
        'fulfillment' => '\cbdesk\Mirakl\Model\OR11Response200OrdersFulfillment',
        'fully_refunded' => 'bool',
        'has_customer_message' => 'bool',
        'has_incident' => 'bool',
        'has_invoice' => 'bool',
        'invoice_details' => '\cbdesk\Mirakl\Model\OR11Response200OrdersInvoiceDetails',
        'last_updated_date' => '\DateTime',
        'order_additional_fields' => '\cbdesk\Mirakl\Model\OR11Response200OrdersOrderAdditionalFields[]',
        'order_id' => 'string',
        'order_lines' => '\cbdesk\Mirakl\Model\OR11Response200OrdersOrderLines[]',
        'order_refunds' => '\cbdesk\Mirakl\Model\OR11Response200OrdersOrderRefunds[]',
        'order_state' => 'string',
        'order_state_reason_code' => 'string',
        'order_state_reason_label' => 'string',
        'order_tax_mode' => 'string',
        'order_taxes' => '\cbdesk\Mirakl\Model\OR11Response200OrdersOrderTaxes[]',
        'payment_duration' => 'int',
        'payment_type' => 'string',
        'payment_workflow' => 'string',
        'price' => 'float',
        'promotions' => '\cbdesk\Mirakl\Model\OR11Response200OrdersPromotions',
        'quote_id' => 'string',
        'references' => '\cbdesk\Mirakl\Model\OR11Response200OrdersReferences',
        'shipping_carrier_code' => 'string',
        'shipping_carrier_standard_code' => 'string',
        'shipping_company' => 'string',
        'shipping_deadline' => '\DateTime',
        'shipping_price' => 'float',
        'shipping_pudo_id' => 'string',
        'shipping_tracking' => 'string',
        'shipping_tracking_url' => 'string',
        'shipping_type_code' => 'string',
        'shipping_type_label' => 'string',
        'shipping_type_standard_code' => 'string',
        'shipping_zone_code' => 'string',
        'shipping_zone_label' => 'string',
        'total_commission' => 'float',
        'total_price' => 'float',
        'transaction_date' => '\DateTime',
        'transaction_number' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'acceptance_decision_date' => 'date-time',
        'can_cancel' => null,
        'can_shop_ship' => null,
        'channel' => null,
        'commercial_id' => null,
        'created_date' => 'date-time',
        'currency_iso_code' => null,
        'customer' => null,
        'customer_debited_date' => 'date-time',
        'customer_directly_pays_seller' => null,
        'customer_notification_email' => null,
        'delivery_date' => null,
        'fulfillment' => null,
        'fully_refunded' => null,
        'has_customer_message' => null,
        'has_incident' => null,
        'has_invoice' => null,
        'invoice_details' => null,
        'last_updated_date' => 'date-time',
        'order_additional_fields' => null,
        'order_id' => null,
        'order_lines' => null,
        'order_refunds' => null,
        'order_state' => null,
        'order_state_reason_code' => null,
        'order_state_reason_label' => null,
        'order_tax_mode' => null,
        'order_taxes' => null,
        'payment_duration' => 'int32',
        'payment_type' => null,
        'payment_workflow' => null,
        'price' => null,
        'promotions' => null,
        'quote_id' => null,
        'references' => null,
        'shipping_carrier_code' => null,
        'shipping_carrier_standard_code' => null,
        'shipping_company' => null,
        'shipping_deadline' => 'date-time',
        'shipping_price' => null,
        'shipping_pudo_id' => null,
        'shipping_tracking' => null,
        'shipping_tracking_url' => null,
        'shipping_type_code' => null,
        'shipping_type_label' => null,
        'shipping_type_standard_code' => null,
        'shipping_zone_code' => null,
        'shipping_zone_label' => null,
        'total_commission' => null,
        'total_price' => null,
        'transaction_date' => 'date-time',
        'transaction_number' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'acceptance_decision_date' => false,
        'can_cancel' => false,
        'can_shop_ship' => false,
        'channel' => false,
        'commercial_id' => false,
        'created_date' => false,
        'currency_iso_code' => false,
        'customer' => false,
        'customer_debited_date' => false,
        'customer_directly_pays_seller' => false,
        'customer_notification_email' => false,
        'delivery_date' => false,
        'fulfillment' => false,
        'fully_refunded' => false,
        'has_customer_message' => false,
        'has_incident' => false,
        'has_invoice' => false,
        'invoice_details' => false,
        'last_updated_date' => false,
        'order_additional_fields' => false,
        'order_id' => false,
        'order_lines' => false,
        'order_refunds' => false,
        'order_state' => false,
        'order_state_reason_code' => false,
        'order_state_reason_label' => false,
        'order_tax_mode' => false,
        'order_taxes' => false,
        'payment_duration' => false,
        'payment_type' => false,
        'payment_workflow' => false,
        'price' => false,
        'promotions' => false,
        'quote_id' => false,
        'references' => false,
        'shipping_carrier_code' => false,
        'shipping_carrier_standard_code' => false,
        'shipping_company' => false,
        'shipping_deadline' => false,
        'shipping_price' => false,
        'shipping_pudo_id' => false,
        'shipping_tracking' => false,
        'shipping_tracking_url' => false,
        'shipping_type_code' => false,
        'shipping_type_label' => false,
        'shipping_type_standard_code' => false,
        'shipping_zone_code' => false,
        'shipping_zone_label' => false,
        'total_commission' => false,
        'total_price' => false,
        'transaction_date' => false,
        'transaction_number' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'acceptance_decision_date' => 'acceptance_decision_date',
        'can_cancel' => 'can_cancel',
        'can_shop_ship' => 'can_shop_ship',
        'channel' => 'channel',
        'commercial_id' => 'commercial_id',
        'created_date' => 'created_date',
        'currency_iso_code' => 'currency_iso_code',
        'customer' => 'customer',
        'customer_debited_date' => 'customer_debited_date',
        'customer_directly_pays_seller' => 'customer_directly_pays_seller',
        'customer_notification_email' => 'customer_notification_email',
        'delivery_date' => 'delivery_date',
        'fulfillment' => 'fulfillment',
        'fully_refunded' => 'fully_refunded',
        'has_customer_message' => 'has_customer_message',
        'has_incident' => 'has_incident',
        'has_invoice' => 'has_invoice',
        'invoice_details' => 'invoice_details',
        'last_updated_date' => 'last_updated_date',
        'order_additional_fields' => 'order_additional_fields',
        'order_id' => 'order_id',
        'order_lines' => 'order_lines',
        'order_refunds' => 'order_refunds',
        'order_state' => 'order_state',
        'order_state_reason_code' => 'order_state_reason_code',
        'order_state_reason_label' => 'order_state_reason_label',
        'order_tax_mode' => 'order_tax_mode',
        'order_taxes' => 'order_taxes',
        'payment_duration' => 'payment_duration',
        'payment_type' => 'payment_type',
        'payment_workflow' => 'payment_workflow',
        'price' => 'price',
        'promotions' => 'promotions',
        'quote_id' => 'quote_id',
        'references' => 'references',
        'shipping_carrier_code' => 'shipping_carrier_code',
        'shipping_carrier_standard_code' => 'shipping_carrier_standard_code',
        'shipping_company' => 'shipping_company',
        'shipping_deadline' => 'shipping_deadline',
        'shipping_price' => 'shipping_price',
        'shipping_pudo_id' => 'shipping_pudo_id',
        'shipping_tracking' => 'shipping_tracking',
        'shipping_tracking_url' => 'shipping_tracking_url',
        'shipping_type_code' => 'shipping_type_code',
        'shipping_type_label' => 'shipping_type_label',
        'shipping_type_standard_code' => 'shipping_type_standard_code',
        'shipping_zone_code' => 'shipping_zone_code',
        'shipping_zone_label' => 'shipping_zone_label',
        'total_commission' => 'total_commission',
        'total_price' => 'total_price',
        'transaction_date' => 'transaction_date',
        'transaction_number' => 'transaction_number'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'acceptance_decision_date' => 'setAcceptanceDecisionDate',
        'can_cancel' => 'setCanCancel',
        'can_shop_ship' => 'setCanShopShip',
        'channel' => 'setChannel',
        'commercial_id' => 'setCommercialId',
        'created_date' => 'setCreatedDate',
        'currency_iso_code' => 'setCurrencyIsoCode',
        'customer' => 'setCustomer',
        'customer_debited_date' => 'setCustomerDebitedDate',
        'customer_directly_pays_seller' => 'setCustomerDirectlyPaysSeller',
        'customer_notification_email' => 'setCustomerNotificationEmail',
        'delivery_date' => 'setDeliveryDate',
        'fulfillment' => 'setFulfillment',
        'fully_refunded' => 'setFullyRefunded',
        'has_customer_message' => 'setHasCustomerMessage',
        'has_incident' => 'setHasIncident',
        'has_invoice' => 'setHasInvoice',
        'invoice_details' => 'setInvoiceDetails',
        'last_updated_date' => 'setLastUpdatedDate',
        'order_additional_fields' => 'setOrderAdditionalFields',
        'order_id' => 'setOrderId',
        'order_lines' => 'setOrderLines',
        'order_refunds' => 'setOrderRefunds',
        'order_state' => 'setOrderState',
        'order_state_reason_code' => 'setOrderStateReasonCode',
        'order_state_reason_label' => 'setOrderStateReasonLabel',
        'order_tax_mode' => 'setOrderTaxMode',
        'order_taxes' => 'setOrderTaxes',
        'payment_duration' => 'setPaymentDuration',
        'payment_type' => 'setPaymentType',
        'payment_workflow' => 'setPaymentWorkflow',
        'price' => 'setPrice',
        'promotions' => 'setPromotions',
        'quote_id' => 'setQuoteId',
        'references' => 'setReferences',
        'shipping_carrier_code' => 'setShippingCarrierCode',
        'shipping_carrier_standard_code' => 'setShippingCarrierStandardCode',
        'shipping_company' => 'setShippingCompany',
        'shipping_deadline' => 'setShippingDeadline',
        'shipping_price' => 'setShippingPrice',
        'shipping_pudo_id' => 'setShippingPudoId',
        'shipping_tracking' => 'setShippingTracking',
        'shipping_tracking_url' => 'setShippingTrackingUrl',
        'shipping_type_code' => 'setShippingTypeCode',
        'shipping_type_label' => 'setShippingTypeLabel',
        'shipping_type_standard_code' => 'setShippingTypeStandardCode',
        'shipping_zone_code' => 'setShippingZoneCode',
        'shipping_zone_label' => 'setShippingZoneLabel',
        'total_commission' => 'setTotalCommission',
        'total_price' => 'setTotalPrice',
        'transaction_date' => 'setTransactionDate',
        'transaction_number' => 'setTransactionNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'acceptance_decision_date' => 'getAcceptanceDecisionDate',
        'can_cancel' => 'getCanCancel',
        'can_shop_ship' => 'getCanShopShip',
        'channel' => 'getChannel',
        'commercial_id' => 'getCommercialId',
        'created_date' => 'getCreatedDate',
        'currency_iso_code' => 'getCurrencyIsoCode',
        'customer' => 'getCustomer',
        'customer_debited_date' => 'getCustomerDebitedDate',
        'customer_directly_pays_seller' => 'getCustomerDirectlyPaysSeller',
        'customer_notification_email' => 'getCustomerNotificationEmail',
        'delivery_date' => 'getDeliveryDate',
        'fulfillment' => 'getFulfillment',
        'fully_refunded' => 'getFullyRefunded',
        'has_customer_message' => 'getHasCustomerMessage',
        'has_incident' => 'getHasIncident',
        'has_invoice' => 'getHasInvoice',
        'invoice_details' => 'getInvoiceDetails',
        'last_updated_date' => 'getLastUpdatedDate',
        'order_additional_fields' => 'getOrderAdditionalFields',
        'order_id' => 'getOrderId',
        'order_lines' => 'getOrderLines',
        'order_refunds' => 'getOrderRefunds',
        'order_state' => 'getOrderState',
        'order_state_reason_code' => 'getOrderStateReasonCode',
        'order_state_reason_label' => 'getOrderStateReasonLabel',
        'order_tax_mode' => 'getOrderTaxMode',
        'order_taxes' => 'getOrderTaxes',
        'payment_duration' => 'getPaymentDuration',
        'payment_type' => 'getPaymentType',
        'payment_workflow' => 'getPaymentWorkflow',
        'price' => 'getPrice',
        'promotions' => 'getPromotions',
        'quote_id' => 'getQuoteId',
        'references' => 'getReferences',
        'shipping_carrier_code' => 'getShippingCarrierCode',
        'shipping_carrier_standard_code' => 'getShippingCarrierStandardCode',
        'shipping_company' => 'getShippingCompany',
        'shipping_deadline' => 'getShippingDeadline',
        'shipping_price' => 'getShippingPrice',
        'shipping_pudo_id' => 'getShippingPudoId',
        'shipping_tracking' => 'getShippingTracking',
        'shipping_tracking_url' => 'getShippingTrackingUrl',
        'shipping_type_code' => 'getShippingTypeCode',
        'shipping_type_label' => 'getShippingTypeLabel',
        'shipping_type_standard_code' => 'getShippingTypeStandardCode',
        'shipping_zone_code' => 'getShippingZoneCode',
        'shipping_zone_label' => 'getShippingZoneLabel',
        'total_commission' => 'getTotalCommission',
        'total_price' => 'getTotalPrice',
        'transaction_date' => 'getTransactionDate',
        'transaction_number' => 'getTransactionNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('acceptance_decision_date', $data ?? [], null);
        $this->setIfExists('can_cancel', $data ?? [], null);
        $this->setIfExists('can_shop_ship', $data ?? [], null);
        $this->setIfExists('channel', $data ?? [], null);
        $this->setIfExists('commercial_id', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('currency_iso_code', $data ?? [], null);
        $this->setIfExists('customer', $data ?? [], null);
        $this->setIfExists('customer_debited_date', $data ?? [], null);
        $this->setIfExists('customer_directly_pays_seller', $data ?? [], null);
        $this->setIfExists('customer_notification_email', $data ?? [], null);
        $this->setIfExists('delivery_date', $data ?? [], null);
        $this->setIfExists('fulfillment', $data ?? [], null);
        $this->setIfExists('fully_refunded', $data ?? [], null);
        $this->setIfExists('has_customer_message', $data ?? [], null);
        $this->setIfExists('has_incident', $data ?? [], null);
        $this->setIfExists('has_invoice', $data ?? [], null);
        $this->setIfExists('invoice_details', $data ?? [], null);
        $this->setIfExists('last_updated_date', $data ?? [], null);
        $this->setIfExists('order_additional_fields', $data ?? [], null);
        $this->setIfExists('order_id', $data ?? [], null);
        $this->setIfExists('order_lines', $data ?? [], null);
        $this->setIfExists('order_refunds', $data ?? [], null);
        $this->setIfExists('order_state', $data ?? [], null);
        $this->setIfExists('order_state_reason_code', $data ?? [], null);
        $this->setIfExists('order_state_reason_label', $data ?? [], null);
        $this->setIfExists('order_tax_mode', $data ?? [], null);
        $this->setIfExists('order_taxes', $data ?? [], null);
        $this->setIfExists('payment_duration', $data ?? [], null);
        $this->setIfExists('payment_type', $data ?? [], null);
        $this->setIfExists('payment_workflow', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('promotions', $data ?? [], null);
        $this->setIfExists('quote_id', $data ?? [], null);
        $this->setIfExists('references', $data ?? [], null);
        $this->setIfExists('shipping_carrier_code', $data ?? [], null);
        $this->setIfExists('shipping_carrier_standard_code', $data ?? [], null);
        $this->setIfExists('shipping_company', $data ?? [], null);
        $this->setIfExists('shipping_deadline', $data ?? [], null);
        $this->setIfExists('shipping_price', $data ?? [], null);
        $this->setIfExists('shipping_pudo_id', $data ?? [], null);
        $this->setIfExists('shipping_tracking', $data ?? [], null);
        $this->setIfExists('shipping_tracking_url', $data ?? [], null);
        $this->setIfExists('shipping_type_code', $data ?? [], null);
        $this->setIfExists('shipping_type_label', $data ?? [], null);
        $this->setIfExists('shipping_type_standard_code', $data ?? [], null);
        $this->setIfExists('shipping_zone_code', $data ?? [], null);
        $this->setIfExists('shipping_zone_label', $data ?? [], null);
        $this->setIfExists('total_commission', $data ?? [], null);
        $this->setIfExists('total_price', $data ?? [], null);
        $this->setIfExists('transaction_date', $data ?? [], null);
        $this->setIfExists('transaction_number', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets acceptance_decision_date
     *
     * @return \DateTime|null
     */
    public function getAcceptanceDecisionDate()
    {
        return $this->container['acceptance_decision_date'];
    }

    /**
     * Sets acceptance_decision_date
     *
     * @param \DateTime|null $acceptance_decision_date The date where the shop decided to accept or refuse the order. Null when the order was automatically refused or accepted.
     *
     * @return self
     */
    public function setAcceptanceDecisionDate($acceptance_decision_date)
    {
        if (is_null($acceptance_decision_date)) {
            throw new \InvalidArgumentException('non-nullable acceptance_decision_date cannot be null');
        }
        $this->container['acceptance_decision_date'] = $acceptance_decision_date;

        return $this;
    }

    /**
     * Gets can_cancel
     *
     * @return bool|null
     */
    public function getCanCancel()
    {
        return $this->container['can_cancel'];
    }

    /**
     * Sets can_cancel
     *
     * @param bool|null $can_cancel Indicate if the order can be cancelled
     *
     * @return self
     */
    public function setCanCancel($can_cancel)
    {
        if (is_null($can_cancel)) {
            throw new \InvalidArgumentException('non-nullable can_cancel cannot be null');
        }
        $this->container['can_cancel'] = $can_cancel;

        return $this;
    }

    /**
     * Gets can_shop_ship
     *
     * @return bool|null
     */
    public function getCanShopShip()
    {
        return $this->container['can_shop_ship'];
    }

    /**
     * Sets can_shop_ship
     *
     * @param bool|null $can_shop_ship Indicates if shops can or cannot ship orders
     *
     * @return self
     */
    public function setCanShopShip($can_shop_ship)
    {
        if (is_null($can_shop_ship)) {
            throw new \InvalidArgumentException('non-nullable can_shop_ship cannot be null');
        }
        $this->container['can_shop_ship'] = $can_shop_ship;

        return $this;
    }

    /**
     * Gets channel
     *
     * @return \cbdesk\Mirakl\Model\OR11Response200OrdersChannel|null
     */
    public function getChannel()
    {
        return $this->container['channel'];
    }

    /**
     * Sets channel
     *
     * @param \cbdesk\Mirakl\Model\OR11Response200OrdersChannel|null $channel channel
     *
     * @return self
     */
    public function setChannel($channel)
    {
        if (is_null($channel)) {
            throw new \InvalidArgumentException('non-nullable channel cannot be null');
        }
        $this->container['channel'] = $channel;

        return $this;
    }

    /**
     * Gets commercial_id
     *
     * @return string|null
     */
    public function getCommercialId()
    {
        return $this->container['commercial_id'];
    }

    /**
     * Sets commercial_id
     *
     * @param string|null $commercial_id Commercial order's identifier
     *
     * @return self
     */
    public function setCommercialId($commercial_id)
    {
        if (is_null($commercial_id)) {
            throw new \InvalidArgumentException('non-nullable commercial_id cannot be null');
        }
        $this->container['commercial_id'] = $commercial_id;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return \DateTime|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param \DateTime|null $created_date Order's creation date
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets currency_iso_code
     *
     * @return string|null
     */
    public function getCurrencyIsoCode()
    {
        return $this->container['currency_iso_code'];
    }

    /**
     * Sets currency_iso_code
     *
     * @param string|null $currency_iso_code Shop's currency (iso format)
     *
     * @return self
     */
    public function setCurrencyIsoCode($currency_iso_code)
    {
        if (is_null($currency_iso_code)) {
            throw new \InvalidArgumentException('non-nullable currency_iso_code cannot be null');
        }
        $this->container['currency_iso_code'] = $currency_iso_code;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return \cbdesk\Mirakl\Model\OR11Response200OrdersCustomer|null
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param \cbdesk\Mirakl\Model\OR11Response200OrdersCustomer|null $customer customer
     *
     * @return self
     */
    public function setCustomer($customer)
    {
        if (is_null($customer)) {
            throw new \InvalidArgumentException('non-nullable customer cannot be null');
        }
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets customer_debited_date
     *
     * @return \DateTime|null
     */
    public function getCustomerDebitedDate()
    {
        return $this->container['customer_debited_date'];
    }

    /**
     * Sets customer_debited_date
     *
     * @param \DateTime|null $customer_debited_date The payment's date of the order by the customer
     *
     * @return self
     */
    public function setCustomerDebitedDate($customer_debited_date)
    {
        if (is_null($customer_debited_date)) {
            throw new \InvalidArgumentException('non-nullable customer_debited_date cannot be null');
        }
        $this->container['customer_debited_date'] = $customer_debited_date;

        return $this;
    }

    /**
     * Gets customer_directly_pays_seller
     *
     * @return bool|null
     */
    public function getCustomerDirectlyPaysSeller()
    {
        return $this->container['customer_directly_pays_seller'];
    }

    /**
     * Sets customer_directly_pays_seller
     *
     * @param bool|null $customer_directly_pays_seller True if order is paid directly to seller. False otherwise.
     *
     * @return self
     */
    public function setCustomerDirectlyPaysSeller($customer_directly_pays_seller)
    {
        if (is_null($customer_directly_pays_seller)) {
            throw new \InvalidArgumentException('non-nullable customer_directly_pays_seller cannot be null');
        }
        $this->container['customer_directly_pays_seller'] = $customer_directly_pays_seller;

        return $this;
    }

    /**
     * Gets customer_notification_email
     *
     * @return string|null
     */
    public function getCustomerNotificationEmail()
    {
        return $this->container['customer_notification_email'];
    }

    /**
     * Sets customer_notification_email
     *
     * @param string|null $customer_notification_email Anonymized customer email usable for notifications that do not expect an answer
     *
     * @return self
     */
    public function setCustomerNotificationEmail($customer_notification_email)
    {
        if (is_null($customer_notification_email)) {
            throw new \InvalidArgumentException('non-nullable customer_notification_email cannot be null');
        }
        $this->container['customer_notification_email'] = $customer_notification_email;

        return $this;
    }

    /**
     * Gets delivery_date
     *
     * @return \cbdesk\Mirakl\Model\OR11Response200OrdersDeliveryDate|null
     */
    public function getDeliveryDate()
    {
        return $this->container['delivery_date'];
    }

    /**
     * Sets delivery_date
     *
     * @param \cbdesk\Mirakl\Model\OR11Response200OrdersDeliveryDate|null $delivery_date delivery_date
     *
     * @return self
     */
    public function setDeliveryDate($delivery_date)
    {
        if (is_null($delivery_date)) {
            throw new \InvalidArgumentException('non-nullable delivery_date cannot be null');
        }
        $this->container['delivery_date'] = $delivery_date;

        return $this;
    }

    /**
     * Gets fulfillment
     *
     * @return \cbdesk\Mirakl\Model\OR11Response200OrdersFulfillment|null
     */
    public function getFulfillment()
    {
        return $this->container['fulfillment'];
    }

    /**
     * Sets fulfillment
     *
     * @param \cbdesk\Mirakl\Model\OR11Response200OrdersFulfillment|null $fulfillment fulfillment
     *
     * @return self
     */
    public function setFulfillment($fulfillment)
    {
        if (is_null($fulfillment)) {
            throw new \InvalidArgumentException('non-nullable fulfillment cannot be null');
        }
        $this->container['fulfillment'] = $fulfillment;

        return $this;
    }

    /**
     * Gets fully_refunded
     *
     * @return bool|null
     */
    public function getFullyRefunded()
    {
        return $this->container['fully_refunded'];
    }

    /**
     * Sets fully_refunded
     *
     * @param bool|null $fully_refunded Refunds have been requested and their cumulated amounts correspond to the sum of all remaining active order lines.
     *
     * @return self
     */
    public function setFullyRefunded($fully_refunded)
    {
        if (is_null($fully_refunded)) {
            throw new \InvalidArgumentException('non-nullable fully_refunded cannot be null');
        }
        $this->container['fully_refunded'] = $fully_refunded;

        return $this;
    }

    /**
     * Gets has_customer_message
     *
     * @return bool|null
     */
    public function getHasCustomerMessage()
    {
        return $this->container['has_customer_message'];
    }

    /**
     * Sets has_customer_message
     *
     * @param bool|null $has_customer_message Indicate if the customer has sent a message related to this order
     *
     * @return self
     */
    public function setHasCustomerMessage($has_customer_message)
    {
        if (is_null($has_customer_message)) {
            throw new \InvalidArgumentException('non-nullable has_customer_message cannot be null');
        }
        $this->container['has_customer_message'] = $has_customer_message;

        return $this;
    }

    /**
     * Gets has_incident
     *
     * @return bool|null
     */
    public function getHasIncident()
    {
        return $this->container['has_incident'];
    }

    /**
     * Sets has_incident
     *
     * @param bool|null $has_incident Indicate if order has incident on at least one order line
     *
     * @return self
     */
    public function setHasIncident($has_incident)
    {
        if (is_null($has_incident)) {
            throw new \InvalidArgumentException('non-nullable has_incident cannot be null');
        }
        $this->container['has_incident'] = $has_incident;

        return $this;
    }

    /**
     * Gets has_invoice
     *
     * @return bool|null
     */
    public function getHasInvoice()
    {
        return $this->container['has_invoice'];
    }

    /**
     * Sets has_invoice
     *
     * @param bool|null $has_invoice Is an invoice available for this order.
     *
     * @return self
     */
    public function setHasInvoice($has_invoice)
    {
        if (is_null($has_invoice)) {
            throw new \InvalidArgumentException('non-nullable has_invoice cannot be null');
        }
        $this->container['has_invoice'] = $has_invoice;

        return $this;
    }

    /**
     * Gets invoice_details
     *
     * @return \cbdesk\Mirakl\Model\OR11Response200OrdersInvoiceDetails|null
     */
    public function getInvoiceDetails()
    {
        return $this->container['invoice_details'];
    }

    /**
     * Sets invoice_details
     *
     * @param \cbdesk\Mirakl\Model\OR11Response200OrdersInvoiceDetails|null $invoice_details invoice_details
     *
     * @return self
     */
    public function setInvoiceDetails($invoice_details)
    {
        if (is_null($invoice_details)) {
            throw new \InvalidArgumentException('non-nullable invoice_details cannot be null');
        }
        $this->container['invoice_details'] = $invoice_details;

        return $this;
    }

    /**
     * Gets last_updated_date
     *
     * @return \DateTime|null
     */
    public function getLastUpdatedDate()
    {
        return $this->container['last_updated_date'];
    }

    /**
     * Sets last_updated_date
     *
     * @param \DateTime|null $last_updated_date Order's last updated date
     *
     * @return self
     */
    public function setLastUpdatedDate($last_updated_date)
    {
        if (is_null($last_updated_date)) {
            throw new \InvalidArgumentException('non-nullable last_updated_date cannot be null');
        }
        $this->container['last_updated_date'] = $last_updated_date;

        return $this;
    }

    /**
     * Gets order_additional_fields
     *
     * @return \cbdesk\Mirakl\Model\OR11Response200OrdersOrderAdditionalFields[]|null
     */
    public function getOrderAdditionalFields()
    {
        return $this->container['order_additional_fields'];
    }

    /**
     * Sets order_additional_fields
     *
     * @param \cbdesk\Mirakl\Model\OR11Response200OrdersOrderAdditionalFields[]|null $order_additional_fields Order's custom fields
     *
     * @return self
     */
    public function setOrderAdditionalFields($order_additional_fields)
    {
        if (is_null($order_additional_fields)) {
            throw new \InvalidArgumentException('non-nullable order_additional_fields cannot be null');
        }
        $this->container['order_additional_fields'] = $order_additional_fields;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return string|null
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param string|null $order_id Order's identifier
     *
     * @return self
     */
    public function setOrderId($order_id)
    {
        if (is_null($order_id)) {
            throw new \InvalidArgumentException('non-nullable order_id cannot be null');
        }
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets order_lines
     *
     * @return \cbdesk\Mirakl\Model\OR11Response200OrdersOrderLines[]|null
     */
    public function getOrderLines()
    {
        return $this->container['order_lines'];
    }

    /**
     * Sets order_lines
     *
     * @param \cbdesk\Mirakl\Model\OR11Response200OrdersOrderLines[]|null $order_lines Order lines
     *
     * @return self
     */
    public function setOrderLines($order_lines)
    {
        if (is_null($order_lines)) {
            throw new \InvalidArgumentException('non-nullable order_lines cannot be null');
        }
        $this->container['order_lines'] = $order_lines;

        return $this;
    }

    /**
     * Gets order_refunds
     *
     * @return \cbdesk\Mirakl\Model\OR11Response200OrdersOrderRefunds[]|null
     */
    public function getOrderRefunds()
    {
        return $this->container['order_refunds'];
    }

    /**
     * Sets order_refunds
     *
     * @param \cbdesk\Mirakl\Model\OR11Response200OrdersOrderRefunds[]|null $order_refunds The list of refunds aggregated by group identifier<br/>Available when feature ‘order level tax calculation’ is enabled
     *
     * @return self
     */
    public function setOrderRefunds($order_refunds)
    {
        if (is_null($order_refunds)) {
            throw new \InvalidArgumentException('non-nullable order_refunds cannot be null');
        }
        $this->container['order_refunds'] = $order_refunds;

        return $this;
    }

    /**
     * Gets order_state
     *
     * @return string|null
     */
    public function getOrderState()
    {
        return $this->container['order_state'];
    }

    /**
     * Sets order_state
     *
     * @param string|null $order_state Order's state
     *
     * @return self
     */
    public function setOrderState($order_state)
    {
        if (is_null($order_state)) {
            throw new \InvalidArgumentException('non-nullable order_state cannot be null');
        }
        $this->container['order_state'] = $order_state;

        return $this;
    }

    /**
     * Gets order_state_reason_code
     *
     * @return string|null
     */
    public function getOrderStateReasonCode()
    {
        return $this->container['order_state_reason_code'];
    }

    /**
     * Sets order_state_reason_code
     *
     * @param string|null $order_state_reason_code Reason's code of the order state
     *
     * @return self
     */
    public function setOrderStateReasonCode($order_state_reason_code)
    {
        if (is_null($order_state_reason_code)) {
            throw new \InvalidArgumentException('non-nullable order_state_reason_code cannot be null');
        }
        $this->container['order_state_reason_code'] = $order_state_reason_code;

        return $this;
    }

    /**
     * Gets order_state_reason_label
     *
     * @return string|null
     */
    public function getOrderStateReasonLabel()
    {
        return $this->container['order_state_reason_label'];
    }

    /**
     * Sets order_state_reason_label
     *
     * @param string|null $order_state_reason_label Reason's label of the order state
     *
     * @return self
     */
    public function setOrderStateReasonLabel($order_state_reason_label)
    {
        if (is_null($order_state_reason_label)) {
            throw new \InvalidArgumentException('non-nullable order_state_reason_label cannot be null');
        }
        $this->container['order_state_reason_label'] = $order_state_reason_label;

        return $this;
    }

    /**
     * Gets order_tax_mode
     *
     * @return string|null
     */
    public function getOrderTaxMode()
    {
        return $this->container['order_tax_mode'];
    }

    /**
     * Sets order_tax_mode
     *
     * @param string|null $order_tax_mode Please note: In case there is no tax, the prices will show the same amount in TAX_EXCLUDED and TAX_INCLUDED mode. The tax mode is only useful if taxes are specified in the order.<br>Possible values: <ul><li><code>TAX_EXCLUDED</code>: the price fields (price, unit price, shipping price, cancellation amount, refund amount and order total prices) are expressed without tax (taxes should be added to these prices in order to get the full amount including taxes).</li><li><code>TAX_INCLUDED</code>: the price fields include the tax amount. </li></ul>
     *
     * @return self
     */
    public function setOrderTaxMode($order_tax_mode)
    {
        if (is_null($order_tax_mode)) {
            throw new \InvalidArgumentException('non-nullable order_tax_mode cannot be null');
        }
        $this->container['order_tax_mode'] = $order_tax_mode;

        return $this;
    }

    /**
     * Gets order_taxes
     *
     * @return \cbdesk\Mirakl\Model\OR11Response200OrdersOrderTaxes[]|null
     */
    public function getOrderTaxes()
    {
        return $this->container['order_taxes'];
    }

    /**
     * Sets order_taxes
     *
     * @param \cbdesk\Mirakl\Model\OR11Response200OrdersOrderTaxes[]|null $order_taxes Total amount of taxes aggregated per tax code and rate<br/>Available when feature ‘order level tax calculation’ is enabled
     *
     * @return self
     */
    public function setOrderTaxes($order_taxes)
    {
        if (is_null($order_taxes)) {
            throw new \InvalidArgumentException('non-nullable order_taxes cannot be null');
        }
        $this->container['order_taxes'] = $order_taxes;

        return $this;
    }

    /**
     * Gets payment_duration
     *
     * @return int|null
     */
    public function getPaymentDuration()
    {
        return $this->container['payment_duration'];
    }

    /**
     * Sets payment_duration
     *
     * @param int|null $payment_duration The payment's duration (i.e. the delay after which the order is supposed to be paid), in days.<br/>Only applicable for <code>PAY_ON_DUE_DATE</code> orders, null otherwise.<br/>Note that this field has currently no impact on the order workflow, it is provided for information purposes.
     *
     * @return self
     */
    public function setPaymentDuration($payment_duration)
    {
        if (is_null($payment_duration)) {
            throw new \InvalidArgumentException('non-nullable payment_duration cannot be null');
        }
        $this->container['payment_duration'] = $payment_duration;

        return $this;
    }

    /**
     * Gets payment_type
     *
     * @return string|null
     */
    public function getPaymentType()
    {
        return $this->container['payment_type'];
    }

    /**
     * Sets payment_type
     *
     * @param string|null $payment_type The payment's type used by the customer to pay this order
     *
     * @return self
     */
    public function setPaymentType($payment_type)
    {
        if (is_null($payment_type)) {
            throw new \InvalidArgumentException('non-nullable payment_type cannot be null');
        }
        $this->container['payment_type'] = $payment_type;

        return $this;
    }

    /**
     * Gets payment_workflow
     *
     * @return string|null
     */
    public function getPaymentWorkflow()
    {
        return $this->container['payment_workflow'];
    }

    /**
     * Sets payment_workflow
     *
     * @param string|null $payment_workflow The payment workflow followed by the order
     *
     * @return self
     */
    public function setPaymentWorkflow($payment_workflow)
    {
        if (is_null($payment_workflow)) {
            throw new \InvalidArgumentException('non-nullable payment_workflow cannot be null');
        }
        $this->container['payment_workflow'] = $payment_workflow;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float|null $price Order's price (sum of order line's price)
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            throw new \InvalidArgumentException('non-nullable price cannot be null');
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets promotions
     *
     * @return \cbdesk\Mirakl\Model\OR11Response200OrdersPromotions|null
     */
    public function getPromotions()
    {
        return $this->container['promotions'];
    }

    /**
     * Sets promotions
     *
     * @param \cbdesk\Mirakl\Model\OR11Response200OrdersPromotions|null $promotions promotions
     *
     * @return self
     */
    public function setPromotions($promotions)
    {
        if (is_null($promotions)) {
            throw new \InvalidArgumentException('non-nullable promotions cannot be null');
        }
        $this->container['promotions'] = $promotions;

        return $this;
    }

    /**
     * Gets quote_id
     *
     * @return string|null
     */
    public function getQuoteId()
    {
        return $this->container['quote_id'];
    }

    /**
     * Sets quote_id
     *
     * @param string|null $quote_id Quote's id from which the order has been placed, or null if it was not from a quote
     *
     * @return self
     */
    public function setQuoteId($quote_id)
    {
        if (is_null($quote_id)) {
            throw new \InvalidArgumentException('non-nullable quote_id cannot be null');
        }
        $this->container['quote_id'] = $quote_id;

        return $this;
    }

    /**
     * Gets references
     *
     * @return \cbdesk\Mirakl\Model\OR11Response200OrdersReferences|null
     */
    public function getReferences()
    {
        return $this->container['references'];
    }

    /**
     * Sets references
     *
     * @param \cbdesk\Mirakl\Model\OR11Response200OrdersReferences|null $references references
     *
     * @return self
     */
    public function setReferences($references)
    {
        if (is_null($references)) {
            throw new \InvalidArgumentException('non-nullable references cannot be null');
        }
        $this->container['references'] = $references;

        return $this;
    }

    /**
     * Gets shipping_carrier_code
     *
     * @return string|null
     */
    public function getShippingCarrierCode()
    {
        return $this->container['shipping_carrier_code'];
    }

    /**
     * Sets shipping_carrier_code
     *
     * @param string|null $shipping_carrier_code Shipping carrier code (associated with the Shipping company label)
     *
     * @return self
     */
    public function setShippingCarrierCode($shipping_carrier_code)
    {
        if (is_null($shipping_carrier_code)) {
            throw new \InvalidArgumentException('non-nullable shipping_carrier_code cannot be null');
        }
        $this->container['shipping_carrier_code'] = $shipping_carrier_code;

        return $this;
    }

    /**
     * Gets shipping_carrier_standard_code
     *
     * @return string|null
     */
    public function getShippingCarrierStandardCode()
    {
        return $this->container['shipping_carrier_standard_code'];
    }

    /**
     * Sets shipping_carrier_standard_code
     *
     * @param string|null $shipping_carrier_standard_code Shipping carrier standard code (associated with the shipping carrier code)
     *
     * @return self
     */
    public function setShippingCarrierStandardCode($shipping_carrier_standard_code)
    {
        if (is_null($shipping_carrier_standard_code)) {
            throw new \InvalidArgumentException('non-nullable shipping_carrier_standard_code cannot be null');
        }
        $this->container['shipping_carrier_standard_code'] = $shipping_carrier_standard_code;

        return $this;
    }

    /**
     * Gets shipping_company
     *
     * @return string|null
     */
    public function getShippingCompany()
    {
        return $this->container['shipping_company'];
    }

    /**
     * Sets shipping_company
     *
     * @param string|null $shipping_company Shipping company
     *
     * @return self
     */
    public function setShippingCompany($shipping_company)
    {
        if (is_null($shipping_company)) {
            throw new \InvalidArgumentException('non-nullable shipping_company cannot be null');
        }
        $this->container['shipping_company'] = $shipping_company;

        return $this;
    }

    /**
     * Gets shipping_deadline
     *
     * @return \DateTime|null
     */
    public function getShippingDeadline()
    {
        return $this->container['shipping_deadline'];
    }

    /**
     * Sets shipping_deadline
     *
     * @param \DateTime|null $shipping_deadline Order's shipping deadline
     *
     * @return self
     */
    public function setShippingDeadline($shipping_deadline)
    {
        if (is_null($shipping_deadline)) {
            throw new \InvalidArgumentException('non-nullable shipping_deadline cannot be null');
        }
        $this->container['shipping_deadline'] = $shipping_deadline;

        return $this;
    }

    /**
     * Gets shipping_price
     *
     * @return float|null
     */
    public function getShippingPrice()
    {
        return $this->container['shipping_price'];
    }

    /**
     * Sets shipping_price
     *
     * @param float|null $shipping_price Order's shipping price (sum of order line's shipping price)
     *
     * @return self
     */
    public function setShippingPrice($shipping_price)
    {
        if (is_null($shipping_price)) {
            throw new \InvalidArgumentException('non-nullable shipping_price cannot be null');
        }
        $this->container['shipping_price'] = $shipping_price;

        return $this;
    }

    /**
     * Gets shipping_pudo_id
     *
     * @return string|null
     */
    public function getShippingPudoId()
    {
        return $this->container['shipping_pudo_id'];
    }

    /**
     * Sets shipping_pudo_id
     *
     * @param string|null $shipping_pudo_id PickUp DropOff (PUDO) point identifier
     *
     * @return self
     */
    public function setShippingPudoId($shipping_pudo_id)
    {
        if (is_null($shipping_pudo_id)) {
            throw new \InvalidArgumentException('non-nullable shipping_pudo_id cannot be null');
        }
        $this->container['shipping_pudo_id'] = $shipping_pudo_id;

        return $this;
    }

    /**
     * Gets shipping_tracking
     *
     * @return string|null
     */
    public function getShippingTracking()
    {
        return $this->container['shipping_tracking'];
    }

    /**
     * Sets shipping_tracking
     *
     * @param string|null $shipping_tracking Shipping tracking
     *
     * @return self
     */
    public function setShippingTracking($shipping_tracking)
    {
        if (is_null($shipping_tracking)) {
            throw new \InvalidArgumentException('non-nullable shipping_tracking cannot be null');
        }
        $this->container['shipping_tracking'] = $shipping_tracking;

        return $this;
    }

    /**
     * Gets shipping_tracking_url
     *
     * @return string|null
     */
    public function getShippingTrackingUrl()
    {
        return $this->container['shipping_tracking_url'];
    }

    /**
     * Sets shipping_tracking_url
     *
     * @param string|null $shipping_tracking_url Shipping tracking url
     *
     * @return self
     */
    public function setShippingTrackingUrl($shipping_tracking_url)
    {
        if (is_null($shipping_tracking_url)) {
            throw new \InvalidArgumentException('non-nullable shipping_tracking_url cannot be null');
        }
        $this->container['shipping_tracking_url'] = $shipping_tracking_url;

        return $this;
    }

    /**
     * Gets shipping_type_code
     *
     * @return string|null
     */
    public function getShippingTypeCode()
    {
        return $this->container['shipping_type_code'];
    }

    /**
     * Sets shipping_type_code
     *
     * @param string|null $shipping_type_code Code of shipping's type
     *
     * @return self
     */
    public function setShippingTypeCode($shipping_type_code)
    {
        if (is_null($shipping_type_code)) {
            throw new \InvalidArgumentException('non-nullable shipping_type_code cannot be null');
        }
        $this->container['shipping_type_code'] = $shipping_type_code;

        return $this;
    }

    /**
     * Gets shipping_type_label
     *
     * @return string|null
     */
    public function getShippingTypeLabel()
    {
        return $this->container['shipping_type_label'];
    }

    /**
     * Sets shipping_type_label
     *
     * @param string|null $shipping_type_label Label of shipping's type
     *
     * @return self
     */
    public function setShippingTypeLabel($shipping_type_label)
    {
        if (is_null($shipping_type_label)) {
            throw new \InvalidArgumentException('non-nullable shipping_type_label cannot be null');
        }
        $this->container['shipping_type_label'] = $shipping_type_label;

        return $this;
    }

    /**
     * Gets shipping_type_standard_code
     *
     * @return string|null
     */
    public function getShippingTypeStandardCode()
    {
        return $this->container['shipping_type_standard_code'];
    }

    /**
     * Sets shipping_type_standard_code
     *
     * @param string|null $shipping_type_standard_code Shipping type's standard code
     *
     * @return self
     */
    public function setShippingTypeStandardCode($shipping_type_standard_code)
    {
        if (is_null($shipping_type_standard_code)) {
            throw new \InvalidArgumentException('non-nullable shipping_type_standard_code cannot be null');
        }
        $this->container['shipping_type_standard_code'] = $shipping_type_standard_code;

        return $this;
    }

    /**
     * Gets shipping_zone_code
     *
     * @return string|null
     */
    public function getShippingZoneCode()
    {
        return $this->container['shipping_zone_code'];
    }

    /**
     * Sets shipping_zone_code
     *
     * @param string|null $shipping_zone_code Code of shipping's zone
     *
     * @return self
     */
    public function setShippingZoneCode($shipping_zone_code)
    {
        if (is_null($shipping_zone_code)) {
            throw new \InvalidArgumentException('non-nullable shipping_zone_code cannot be null');
        }
        $this->container['shipping_zone_code'] = $shipping_zone_code;

        return $this;
    }

    /**
     * Gets shipping_zone_label
     *
     * @return string|null
     */
    public function getShippingZoneLabel()
    {
        return $this->container['shipping_zone_label'];
    }

    /**
     * Sets shipping_zone_label
     *
     * @param string|null $shipping_zone_label Label of shipping's zone
     *
     * @return self
     */
    public function setShippingZoneLabel($shipping_zone_label)
    {
        if (is_null($shipping_zone_label)) {
            throw new \InvalidArgumentException('non-nullable shipping_zone_label cannot be null');
        }
        $this->container['shipping_zone_label'] = $shipping_zone_label;

        return $this;
    }

    /**
     * Gets total_commission
     *
     * @return float|null
     */
    public function getTotalCommission()
    {
        return $this->container['total_commission'];
    }

    /**
     * Sets total_commission
     *
     * @param float|null $total_commission Order's total commission (sum of the order line's total commission)
     *
     * @return self
     */
    public function setTotalCommission($total_commission)
    {
        if (is_null($total_commission)) {
            throw new \InvalidArgumentException('non-nullable total_commission cannot be null');
        }
        $this->container['total_commission'] = $total_commission;

        return $this;
    }

    /**
     * Gets total_price
     *
     * @return float|null
     */
    public function getTotalPrice()
    {
        return $this->container['total_price'];
    }

    /**
     * Sets total_price
     *
     * @param float|null $total_price Total order's price (sum of the order's price with shipping price and fees).
     *
     * @return self
     */
    public function setTotalPrice($total_price)
    {
        if (is_null($total_price)) {
            throw new \InvalidArgumentException('non-nullable total_price cannot be null');
        }
        $this->container['total_price'] = $total_price;

        return $this;
    }

    /**
     * Gets transaction_date
     *
     * @return \DateTime|null
     */
    public function getTransactionDate()
    {
        return $this->container['transaction_date'];
    }

    /**
     * Sets transaction_date
     *
     * @param \DateTime|null $transaction_date Payment's transaction date
     *
     * @return self
     */
    public function setTransactionDate($transaction_date)
    {
        if (is_null($transaction_date)) {
            throw new \InvalidArgumentException('non-nullable transaction_date cannot be null');
        }
        $this->container['transaction_date'] = $transaction_date;

        return $this;
    }

    /**
     * Gets transaction_number
     *
     * @return string|null
     */
    public function getTransactionNumber()
    {
        return $this->container['transaction_number'];
    }

    /**
     * Sets transaction_number
     *
     * @param string|null $transaction_number Payment's transaction number
     *
     * @return self
     */
    public function setTransactionNumber($transaction_number)
    {
        if (is_null($transaction_number)) {
            throw new \InvalidArgumentException('non-nullable transaction_number cannot be null');
        }
        $this->container['transaction_number'] = $transaction_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


