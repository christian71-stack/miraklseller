<?php
/**
 * PR01Response200Promotions
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  cbdesk\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mirakl Marketplace APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest-release
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace cbdesk\Mirakl\Model;

use \ArrayAccess;
use \cbdesk\Mirakl\ObjectSerializer;

/**
 * PR01Response200Promotions Class Doc Comment
 *
 * @category Class
 * @package  cbdesk\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PR01Response200Promotions implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PR01_Response_200_Promotions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'amount_off' => 'float',
        'application_to_cart' => '\cbdesk\Mirakl\Model\PR01Response200PromotionsApplicationToCart[]',
        'campaign' => '\cbdesk\Mirakl\Model\PR01Response200PromotionsCampaign',
        'channels' => '\cbdesk\Mirakl\Model\PR01Response200PromotionsChannels[]',
        'customer_group_ids' => 'string[]',
        'customer_organization_ids' => 'string[]',
        'date_created' => '\DateTime',
        'end_date' => '\DateTime',
        'free_items_quantity' => 'int',
        'internal_description' => 'string',
        'internal_id' => 'string',
        'last_updated' => '\DateTime',
        'max_quantity_to_discount' => 'int',
        'medias' => '\cbdesk\Mirakl\Model\PR01Response200PromotionsMedias[]',
        'percentage_off' => 'float',
        'public_descriptions' => '\cbdesk\Mirakl\Model\PR01Response200PromotionsPublicDescriptions[]',
        'reduced_unit_price' => 'float',
        'reward_offer_ids' => 'int[]',
        'reward_on_purchased_items' => 'bool',
        'start_date' => '\DateTime',
        'state' => 'string',
        'trigger_offer_ids' => 'int[]',
        'triggers' => '\cbdesk\Mirakl\Model\PR01Response200PromotionsTriggers[]',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'amount_off' => null,
        'application_to_cart' => null,
        'campaign' => null,
        'channels' => null,
        'customer_group_ids' => null,
        'customer_organization_ids' => null,
        'date_created' => 'date-time',
        'end_date' => 'date-time',
        'free_items_quantity' => 'int32',
        'internal_description' => null,
        'internal_id' => null,
        'last_updated' => 'date-time',
        'max_quantity_to_discount' => 'int32',
        'medias' => null,
        'percentage_off' => null,
        'public_descriptions' => null,
        'reduced_unit_price' => null,
        'reward_offer_ids' => 'int64',
        'reward_on_purchased_items' => null,
        'start_date' => 'date-time',
        'state' => null,
        'trigger_offer_ids' => 'int64',
        'triggers' => null,
        'type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'amount_off' => false,
        'application_to_cart' => false,
        'campaign' => false,
        'channels' => false,
        'customer_group_ids' => false,
        'customer_organization_ids' => false,
        'date_created' => false,
        'end_date' => false,
        'free_items_quantity' => false,
        'internal_description' => false,
        'internal_id' => false,
        'last_updated' => false,
        'max_quantity_to_discount' => false,
        'medias' => false,
        'percentage_off' => false,
        'public_descriptions' => false,
        'reduced_unit_price' => false,
        'reward_offer_ids' => false,
        'reward_on_purchased_items' => false,
        'start_date' => false,
        'state' => false,
        'trigger_offer_ids' => false,
        'triggers' => false,
        'type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'amount_off' => 'amount_off',
        'application_to_cart' => 'application_to_cart',
        'campaign' => 'campaign',
        'channels' => 'channels',
        'customer_group_ids' => 'customer_group_ids',
        'customer_organization_ids' => 'customer_organization_ids',
        'date_created' => 'date_created',
        'end_date' => 'end_date',
        'free_items_quantity' => 'free_items_quantity',
        'internal_description' => 'internal_description',
        'internal_id' => 'internal_id',
        'last_updated' => 'last_updated',
        'max_quantity_to_discount' => 'max_quantity_to_discount',
        'medias' => 'medias',
        'percentage_off' => 'percentage_off',
        'public_descriptions' => 'public_descriptions',
        'reduced_unit_price' => 'reduced_unit_price',
        'reward_offer_ids' => 'reward_offer_ids',
        'reward_on_purchased_items' => 'reward_on_purchased_items',
        'start_date' => 'start_date',
        'state' => 'state',
        'trigger_offer_ids' => 'trigger_offer_ids',
        'triggers' => 'triggers',
        'type' => 'type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'amount_off' => 'setAmountOff',
        'application_to_cart' => 'setApplicationToCart',
        'campaign' => 'setCampaign',
        'channels' => 'setChannels',
        'customer_group_ids' => 'setCustomerGroupIds',
        'customer_organization_ids' => 'setCustomerOrganizationIds',
        'date_created' => 'setDateCreated',
        'end_date' => 'setEndDate',
        'free_items_quantity' => 'setFreeItemsQuantity',
        'internal_description' => 'setInternalDescription',
        'internal_id' => 'setInternalId',
        'last_updated' => 'setLastUpdated',
        'max_quantity_to_discount' => 'setMaxQuantityToDiscount',
        'medias' => 'setMedias',
        'percentage_off' => 'setPercentageOff',
        'public_descriptions' => 'setPublicDescriptions',
        'reduced_unit_price' => 'setReducedUnitPrice',
        'reward_offer_ids' => 'setRewardOfferIds',
        'reward_on_purchased_items' => 'setRewardOnPurchasedItems',
        'start_date' => 'setStartDate',
        'state' => 'setState',
        'trigger_offer_ids' => 'setTriggerOfferIds',
        'triggers' => 'setTriggers',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'amount_off' => 'getAmountOff',
        'application_to_cart' => 'getApplicationToCart',
        'campaign' => 'getCampaign',
        'channels' => 'getChannels',
        'customer_group_ids' => 'getCustomerGroupIds',
        'customer_organization_ids' => 'getCustomerOrganizationIds',
        'date_created' => 'getDateCreated',
        'end_date' => 'getEndDate',
        'free_items_quantity' => 'getFreeItemsQuantity',
        'internal_description' => 'getInternalDescription',
        'internal_id' => 'getInternalId',
        'last_updated' => 'getLastUpdated',
        'max_quantity_to_discount' => 'getMaxQuantityToDiscount',
        'medias' => 'getMedias',
        'percentage_off' => 'getPercentageOff',
        'public_descriptions' => 'getPublicDescriptions',
        'reduced_unit_price' => 'getReducedUnitPrice',
        'reward_offer_ids' => 'getRewardOfferIds',
        'reward_on_purchased_items' => 'getRewardOnPurchasedItems',
        'start_date' => 'getStartDate',
        'state' => 'getState',
        'trigger_offer_ids' => 'getTriggerOfferIds',
        'triggers' => 'getTriggers',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('amount_off', $data ?? [], null);
        $this->setIfExists('application_to_cart', $data ?? [], null);
        $this->setIfExists('campaign', $data ?? [], null);
        $this->setIfExists('channels', $data ?? [], null);
        $this->setIfExists('customer_group_ids', $data ?? [], null);
        $this->setIfExists('customer_organization_ids', $data ?? [], null);
        $this->setIfExists('date_created', $data ?? [], null);
        $this->setIfExists('end_date', $data ?? [], null);
        $this->setIfExists('free_items_quantity', $data ?? [], null);
        $this->setIfExists('internal_description', $data ?? [], null);
        $this->setIfExists('internal_id', $data ?? [], null);
        $this->setIfExists('last_updated', $data ?? [], null);
        $this->setIfExists('max_quantity_to_discount', $data ?? [], null);
        $this->setIfExists('medias', $data ?? [], null);
        $this->setIfExists('percentage_off', $data ?? [], null);
        $this->setIfExists('public_descriptions', $data ?? [], null);
        $this->setIfExists('reduced_unit_price', $data ?? [], null);
        $this->setIfExists('reward_offer_ids', $data ?? [], null);
        $this->setIfExists('reward_on_purchased_items', $data ?? [], null);
        $this->setIfExists('start_date', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('trigger_offer_ids', $data ?? [], null);
        $this->setIfExists('triggers', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets amount_off
     *
     * @return float|null
     */
    public function getAmountOff()
    {
        return $this->container['amount_off'];
    }

    /**
     * Sets amount_off
     *
     * @param float|null $amount_off The amount off of the promotion. <br/>Only applicable when promotion is of type <code>AMOUNT_OFF</code>, null otherwise
     *
     * @return self
     */
    public function setAmountOff($amount_off)
    {
        if (is_null($amount_off)) {
            throw new \InvalidArgumentException('non-nullable amount_off cannot be null');
        }
        $this->container['amount_off'] = $amount_off;

        return $this;
    }

    /**
     * Gets application_to_cart
     *
     * @return \cbdesk\Mirakl\Model\PR01Response200PromotionsApplicationToCart[]|null
     */
    public function getApplicationToCart()
    {
        return $this->container['application_to_cart'];
    }

    /**
     * Sets application_to_cart
     *
     * @param \cbdesk\Mirakl\Model\PR01Response200PromotionsApplicationToCart[]|null $application_to_cart If applicable, returns promo code associated to the promotion
     *
     * @return self
     */
    public function setApplicationToCart($application_to_cart)
    {
        if (is_null($application_to_cart)) {
            throw new \InvalidArgumentException('non-nullable application_to_cart cannot be null');
        }
        $this->container['application_to_cart'] = $application_to_cart;

        return $this;
    }

    /**
     * Gets campaign
     *
     * @return \cbdesk\Mirakl\Model\PR01Response200PromotionsCampaign|null
     */
    public function getCampaign()
    {
        return $this->container['campaign'];
    }

    /**
     * Sets campaign
     *
     * @param \cbdesk\Mirakl\Model\PR01Response200PromotionsCampaign|null $campaign campaign
     *
     * @return self
     */
    public function setCampaign($campaign)
    {
        if (is_null($campaign)) {
            throw new \InvalidArgumentException('non-nullable campaign cannot be null');
        }
        $this->container['campaign'] = $campaign;

        return $this;
    }

    /**
     * Gets channels
     *
     * @return \cbdesk\Mirakl\Model\PR01Response200PromotionsChannels[]|null
     */
    public function getChannels()
    {
        return $this->container['channels'];
    }

    /**
     * Sets channels
     *
     * @param \cbdesk\Mirakl\Model\PR01Response200PromotionsChannels[]|null $channels Channels on which the promotion is applied. If none, promotion applied on all channels
     *
     * @return self
     */
    public function setChannels($channels)
    {
        if (is_null($channels)) {
            throw new \InvalidArgumentException('non-nullable channels cannot be null');
        }
        $this->container['channels'] = $channels;

        return $this;
    }

    /**
     * Gets customer_group_ids
     *
     * @return string[]|null
     */
    public function getCustomerGroupIds()
    {
        return $this->container['customer_group_ids'];
    }

    /**
     * Sets customer_group_ids
     *
     * @param string[]|null $customer_group_ids The customer groups on which the promotion is applied. If none, promotion applies to all customer groups.
     *
     * @return self
     */
    public function setCustomerGroupIds($customer_group_ids)
    {
        if (is_null($customer_group_ids)) {
            throw new \InvalidArgumentException('non-nullable customer_group_ids cannot be null');
        }
        $this->container['customer_group_ids'] = $customer_group_ids;

        return $this;
    }

    /**
     * Gets customer_organization_ids
     *
     * @return string[]|null
     */
    public function getCustomerOrganizationIds()
    {
        return $this->container['customer_organization_ids'];
    }

    /**
     * Sets customer_organization_ids
     *
     * @param string[]|null $customer_organization_ids The customer organizations on which the promotion is applied. If none, promotion applies to all customer organizations.
     *
     * @return self
     */
    public function setCustomerOrganizationIds($customer_organization_ids)
    {
        if (is_null($customer_organization_ids)) {
            throw new \InvalidArgumentException('non-nullable customer_organization_ids cannot be null');
        }
        $this->container['customer_organization_ids'] = $customer_organization_ids;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return \DateTime|null
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param \DateTime|null $date_created Creation date of the promotion
     *
     * @return self
     */
    public function setDateCreated($date_created)
    {
        if (is_null($date_created)) {
            throw new \InvalidArgumentException('non-nullable date_created cannot be null');
        }
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime|null
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime|null $end_date End date of the promotion period of activity
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        if (is_null($end_date)) {
            throw new \InvalidArgumentException('non-nullable end_date cannot be null');
        }
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets free_items_quantity
     *
     * @return int|null
     */
    public function getFreeItemsQuantity()
    {
        return $this->container['free_items_quantity'];
    }

    /**
     * Sets free_items_quantity
     *
     * @param int|null $free_items_quantity The free item target quantity of the promotion. <br/>Only applicable when promotion is of type <code>FREE_ITEMS</code>, null otherwise
     *
     * @return self
     */
    public function setFreeItemsQuantity($free_items_quantity)
    {
        if (is_null($free_items_quantity)) {
            throw new \InvalidArgumentException('non-nullable free_items_quantity cannot be null');
        }
        $this->container['free_items_quantity'] = $free_items_quantity;

        return $this;
    }

    /**
     * Gets internal_description
     *
     * @return string|null
     */
    public function getInternalDescription()
    {
        return $this->container['internal_description'];
    }

    /**
     * Sets internal_description
     *
     * @param string|null $internal_description Internal description of the promotion, set by the shop
     *
     * @return self
     */
    public function setInternalDescription($internal_description)
    {
        if (is_null($internal_description)) {
            throw new \InvalidArgumentException('non-nullable internal_description cannot be null');
        }
        $this->container['internal_description'] = $internal_description;

        return $this;
    }

    /**
     * Gets internal_id
     *
     * @return string|null
     */
    public function getInternalId()
    {
        return $this->container['internal_id'];
    }

    /**
     * Sets internal_id
     *
     * @param string|null $internal_id Promotion identifier
     *
     * @return self
     */
    public function setInternalId($internal_id)
    {
        if (is_null($internal_id)) {
            throw new \InvalidArgumentException('non-nullable internal_id cannot be null');
        }
        $this->container['internal_id'] = $internal_id;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return \DateTime|null
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param \DateTime|null $last_updated Last update date of the promotion
     *
     * @return self
     */
    public function setLastUpdated($last_updated)
    {
        if (is_null($last_updated)) {
            throw new \InvalidArgumentException('non-nullable last_updated cannot be null');
        }
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets max_quantity_to_discount
     *
     * @return int|null
     */
    public function getMaxQuantityToDiscount()
    {
        return $this->container['max_quantity_to_discount'];
    }

    /**
     * Sets max_quantity_to_discount
     *
     * @param int|null $max_quantity_to_discount Maximum quantity of items on which a percentage off discount applies. Only applicable when promotion is of type PERCENTAGE_OFF, null otherwise
     *
     * @return self
     */
    public function setMaxQuantityToDiscount($max_quantity_to_discount)
    {
        if (is_null($max_quantity_to_discount)) {
            throw new \InvalidArgumentException('non-nullable max_quantity_to_discount cannot be null');
        }
        $this->container['max_quantity_to_discount'] = $max_quantity_to_discount;

        return $this;
    }

    /**
     * Gets medias
     *
     * @return \cbdesk\Mirakl\Model\PR01Response200PromotionsMedias[]|null
     */
    public function getMedias()
    {
        return $this->container['medias'];
    }

    /**
     * Sets medias
     *
     * @param \cbdesk\Mirakl\Model\PR01Response200PromotionsMedias[]|null $medias The medias associated with this promotion, with the locales they apply to
     *
     * @return self
     */
    public function setMedias($medias)
    {
        if (is_null($medias)) {
            throw new \InvalidArgumentException('non-nullable medias cannot be null');
        }
        $this->container['medias'] = $medias;

        return $this;
    }

    /**
     * Gets percentage_off
     *
     * @return float|null
     */
    public function getPercentageOff()
    {
        return $this->container['percentage_off'];
    }

    /**
     * Sets percentage_off
     *
     * @param float|null $percentage_off The percentage off of the promotion. <br/>Only applicable when promotion is of type <code>PERCENTAGE_OFF</code>, null otherwise
     *
     * @return self
     */
    public function setPercentageOff($percentage_off)
    {
        if (is_null($percentage_off)) {
            throw new \InvalidArgumentException('non-nullable percentage_off cannot be null');
        }
        $this->container['percentage_off'] = $percentage_off;

        return $this;
    }

    /**
     * Gets public_descriptions
     *
     * @return \cbdesk\Mirakl\Model\PR01Response200PromotionsPublicDescriptions[]|null
     */
    public function getPublicDescriptions()
    {
        return $this->container['public_descriptions'];
    }

    /**
     * Sets public_descriptions
     *
     * @param \cbdesk\Mirakl\Model\PR01Response200PromotionsPublicDescriptions[]|null $public_descriptions The public descriptions of the promotion, with the locales they apply to
     *
     * @return self
     */
    public function setPublicDescriptions($public_descriptions)
    {
        if (is_null($public_descriptions)) {
            throw new \InvalidArgumentException('non-nullable public_descriptions cannot be null');
        }
        $this->container['public_descriptions'] = $public_descriptions;

        return $this;
    }

    /**
     * Gets reduced_unit_price
     *
     * @return float|null
     */
    public function getReducedUnitPrice()
    {
        return $this->container['reduced_unit_price'];
    }

    /**
     * Sets reduced_unit_price
     *
     * @param float|null $reduced_unit_price The new offer’s unit price triggered by the promotion. <br/>Only applicable when promotion is of type <code>REDUCED_UNIT_PRICE</code>, null otherwise.
     *
     * @return self
     */
    public function setReducedUnitPrice($reduced_unit_price)
    {
        if (is_null($reduced_unit_price)) {
            throw new \InvalidArgumentException('non-nullable reduced_unit_price cannot be null');
        }
        $this->container['reduced_unit_price'] = $reduced_unit_price;

        return $this;
    }

    /**
     * Gets reward_offer_ids
     *
     * @return int[]|null
     */
    public function getRewardOfferIds()
    {
        return $this->container['reward_offer_ids'];
    }

    /**
     * Sets reward_offer_ids
     *
     * @param int[]|null $reward_offer_ids Offers used as reward in the promotion, according to the requested reward_offer_ids
     *
     * @return self
     */
    public function setRewardOfferIds($reward_offer_ids)
    {
        if (is_null($reward_offer_ids)) {
            throw new \InvalidArgumentException('non-nullable reward_offer_ids cannot be null');
        }
        $this->container['reward_offer_ids'] = $reward_offer_ids;

        return $this;
    }

    /**
     * Gets reward_on_purchased_items
     *
     * @return bool|null
     */
    public function getRewardOnPurchasedItems()
    {
        return $this->container['reward_on_purchased_items'];
    }

    /**
     * Sets reward_on_purchased_items
     *
     * @param bool|null $reward_on_purchased_items Specifies if the promotion's reward applies to purchased items or to a specific selection
     *
     * @return self
     */
    public function setRewardOnPurchasedItems($reward_on_purchased_items)
    {
        if (is_null($reward_on_purchased_items)) {
            throw new \InvalidArgumentException('non-nullable reward_on_purchased_items cannot be null');
        }
        $this->container['reward_on_purchased_items'] = $reward_on_purchased_items;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime|null $start_date Start date of the promotion period of activity
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        if (is_null($start_date)) {
            throw new \InvalidArgumentException('non-nullable start_date cannot be null');
        }
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state Promotion state
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets trigger_offer_ids
     *
     * @return int[]|null
     */
    public function getTriggerOfferIds()
    {
        return $this->container['trigger_offer_ids'];
    }

    /**
     * Sets trigger_offer_ids
     *
     * @param int[]|null $trigger_offer_ids Offers which trigger the promotion, according to the requested trigger_offer_ids
     *
     * @return self
     */
    public function setTriggerOfferIds($trigger_offer_ids)
    {
        if (is_null($trigger_offer_ids)) {
            throw new \InvalidArgumentException('non-nullable trigger_offer_ids cannot be null');
        }
        $this->container['trigger_offer_ids'] = $trigger_offer_ids;

        return $this;
    }

    /**
     * Gets triggers
     *
     * @return \cbdesk\Mirakl\Model\PR01Response200PromotionsTriggers[]|null
     */
    public function getTriggers()
    {
        return $this->container['triggers'];
    }

    /**
     * Sets triggers
     *
     * @param \cbdesk\Mirakl\Model\PR01Response200PromotionsTriggers[]|null $triggers Triggers of the promotion
     *
     * @return self
     */
    public function setTriggers($triggers)
    {
        if (is_null($triggers)) {
            throw new \InvalidArgumentException('non-nullable triggers cannot be null');
        }
        $this->container['triggers'] = $triggers;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Promotion type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


