<?php
/**
 * OF04Response200Data
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  cbdesk\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mirakl Marketplace APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest-release
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace cbdesk\Mirakl\Model;

use \ArrayAccess;
use \cbdesk\Mirakl\ObjectSerializer;

/**
 * OF04Response200Data Class Doc Comment
 *
 * @category Class
 * @package  cbdesk\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OF04Response200Data implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OF04_Response_200_Data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'date_created' => '\DateTime',
        'has_error_report' => 'bool',
        'import_id' => 'int',
        'lines_in_error' => 'int',
        'lines_in_pending' => 'int',
        'lines_in_success' => 'int',
        'lines_read' => 'int',
        'mode' => 'string',
        'offer_deleted' => 'int',
        'offer_inserted' => 'int',
        'offer_updated' => 'int',
        'origin' => 'string',
        'reason_status' => 'string',
        'shop_id' => 'int',
        'status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'date_created' => 'date-time',
        'has_error_report' => null,
        'import_id' => 'int64',
        'lines_in_error' => 'int32',
        'lines_in_pending' => 'int32',
        'lines_in_success' => 'int32',
        'lines_read' => 'int32',
        'mode' => null,
        'offer_deleted' => 'int32',
        'offer_inserted' => 'int32',
        'offer_updated' => 'int32',
        'origin' => null,
        'reason_status' => null,
        'shop_id' => 'int64',
        'status' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'date_created' => false,
        'has_error_report' => false,
        'import_id' => false,
        'lines_in_error' => false,
        'lines_in_pending' => false,
        'lines_in_success' => false,
        'lines_read' => false,
        'mode' => false,
        'offer_deleted' => false,
        'offer_inserted' => false,
        'offer_updated' => false,
        'origin' => false,
        'reason_status' => false,
        'shop_id' => false,
        'status' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'date_created' => 'date_created',
        'has_error_report' => 'has_error_report',
        'import_id' => 'import_id',
        'lines_in_error' => 'lines_in_error',
        'lines_in_pending' => 'lines_in_pending',
        'lines_in_success' => 'lines_in_success',
        'lines_read' => 'lines_read',
        'mode' => 'mode',
        'offer_deleted' => 'offer_deleted',
        'offer_inserted' => 'offer_inserted',
        'offer_updated' => 'offer_updated',
        'origin' => 'origin',
        'reason_status' => 'reason_status',
        'shop_id' => 'shop_id',
        'status' => 'status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'date_created' => 'setDateCreated',
        'has_error_report' => 'setHasErrorReport',
        'import_id' => 'setImportId',
        'lines_in_error' => 'setLinesInError',
        'lines_in_pending' => 'setLinesInPending',
        'lines_in_success' => 'setLinesInSuccess',
        'lines_read' => 'setLinesRead',
        'mode' => 'setMode',
        'offer_deleted' => 'setOfferDeleted',
        'offer_inserted' => 'setOfferInserted',
        'offer_updated' => 'setOfferUpdated',
        'origin' => 'setOrigin',
        'reason_status' => 'setReasonStatus',
        'shop_id' => 'setShopId',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'date_created' => 'getDateCreated',
        'has_error_report' => 'getHasErrorReport',
        'import_id' => 'getImportId',
        'lines_in_error' => 'getLinesInError',
        'lines_in_pending' => 'getLinesInPending',
        'lines_in_success' => 'getLinesInSuccess',
        'lines_read' => 'getLinesRead',
        'mode' => 'getMode',
        'offer_deleted' => 'getOfferDeleted',
        'offer_inserted' => 'getOfferInserted',
        'offer_updated' => 'getOfferUpdated',
        'origin' => 'getOrigin',
        'reason_status' => 'getReasonStatus',
        'shop_id' => 'getShopId',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('date_created', $data ?? [], null);
        $this->setIfExists('has_error_report', $data ?? [], null);
        $this->setIfExists('import_id', $data ?? [], null);
        $this->setIfExists('lines_in_error', $data ?? [], null);
        $this->setIfExists('lines_in_pending', $data ?? [], null);
        $this->setIfExists('lines_in_success', $data ?? [], null);
        $this->setIfExists('lines_read', $data ?? [], null);
        $this->setIfExists('mode', $data ?? [], null);
        $this->setIfExists('offer_deleted', $data ?? [], null);
        $this->setIfExists('offer_inserted', $data ?? [], null);
        $this->setIfExists('offer_updated', $data ?? [], null);
        $this->setIfExists('origin', $data ?? [], null);
        $this->setIfExists('reason_status', $data ?? [], null);
        $this->setIfExists('shop_id', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets date_created
     *
     * @return \DateTime|null
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param \DateTime|null $date_created Import creation date
     *
     * @return self
     */
    public function setDateCreated($date_created)
    {
        if (is_null($date_created)) {
            throw new \InvalidArgumentException('non-nullable date_created cannot be null');
        }
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets has_error_report
     *
     * @return bool|null
     */
    public function getHasErrorReport()
    {
        return $this->container['has_error_report'];
    }

    /**
     * Sets has_error_report
     *
     * @param bool|null $has_error_report Indicate if an error report exists
     *
     * @return self
     */
    public function setHasErrorReport($has_error_report)
    {
        if (is_null($has_error_report)) {
            throw new \InvalidArgumentException('non-nullable has_error_report cannot be null');
        }
        $this->container['has_error_report'] = $has_error_report;

        return $this;
    }

    /**
     * Gets import_id
     *
     * @return int|null
     */
    public function getImportId()
    {
        return $this->container['import_id'];
    }

    /**
     * Sets import_id
     *
     * @param int|null $import_id Import ID
     *
     * @return self
     */
    public function setImportId($import_id)
    {
        if (is_null($import_id)) {
            throw new \InvalidArgumentException('non-nullable import_id cannot be null');
        }
        $this->container['import_id'] = $import_id;

        return $this;
    }

    /**
     * Gets lines_in_error
     *
     * @return int|null
     */
    public function getLinesInError()
    {
        return $this->container['lines_in_error'];
    }

    /**
     * Sets lines_in_error
     *
     * @param int|null $lines_in_error Total count of lines in error
     *
     * @return self
     */
    public function setLinesInError($lines_in_error)
    {
        if (is_null($lines_in_error)) {
            throw new \InvalidArgumentException('non-nullable lines_in_error cannot be null');
        }
        $this->container['lines_in_error'] = $lines_in_error;

        return $this;
    }

    /**
     * Gets lines_in_pending
     *
     * @return int|null
     */
    public function getLinesInPending()
    {
        return $this->container['lines_in_pending'];
    }

    /**
     * Sets lines_in_pending
     *
     * @param int|null $lines_in_pending Total count of lines in pending
     *
     * @return self
     */
    public function setLinesInPending($lines_in_pending)
    {
        if (is_null($lines_in_pending)) {
            throw new \InvalidArgumentException('non-nullable lines_in_pending cannot be null');
        }
        $this->container['lines_in_pending'] = $lines_in_pending;

        return $this;
    }

    /**
     * Gets lines_in_success
     *
     * @return int|null
     */
    public function getLinesInSuccess()
    {
        return $this->container['lines_in_success'];
    }

    /**
     * Sets lines_in_success
     *
     * @param int|null $lines_in_success Total count of lines in success
     *
     * @return self
     */
    public function setLinesInSuccess($lines_in_success)
    {
        if (is_null($lines_in_success)) {
            throw new \InvalidArgumentException('non-nullable lines_in_success cannot be null');
        }
        $this->container['lines_in_success'] = $lines_in_success;

        return $this;
    }

    /**
     * Gets lines_read
     *
     * @return int|null
     */
    public function getLinesRead()
    {
        return $this->container['lines_read'];
    }

    /**
     * Sets lines_read
     *
     * @param int|null $lines_read Total count of lines read
     *
     * @return self
     */
    public function setLinesRead($lines_read)
    {
        if (is_null($lines_read)) {
            throw new \InvalidArgumentException('non-nullable lines_read cannot be null');
        }
        $this->container['lines_read'] = $lines_read;

        return $this;
    }

    /**
     * Gets mode
     *
     * @return string|null
     */
    public function getMode()
    {
        return $this->container['mode'];
    }

    /**
     * Sets mode
     *
     * @param string|null $mode Import mode
     *
     * @return self
     */
    public function setMode($mode)
    {
        if (is_null($mode)) {
            throw new \InvalidArgumentException('non-nullable mode cannot be null');
        }
        $this->container['mode'] = $mode;

        return $this;
    }

    /**
     * Gets offer_deleted
     *
     * @return int|null
     */
    public function getOfferDeleted()
    {
        return $this->container['offer_deleted'];
    }

    /**
     * Sets offer_deleted
     *
     * @param int|null $offer_deleted Total count of deleted offers
     *
     * @return self
     */
    public function setOfferDeleted($offer_deleted)
    {
        if (is_null($offer_deleted)) {
            throw new \InvalidArgumentException('non-nullable offer_deleted cannot be null');
        }
        $this->container['offer_deleted'] = $offer_deleted;

        return $this;
    }

    /**
     * Gets offer_inserted
     *
     * @return int|null
     */
    public function getOfferInserted()
    {
        return $this->container['offer_inserted'];
    }

    /**
     * Sets offer_inserted
     *
     * @param int|null $offer_inserted Total count of inserted offers
     *
     * @return self
     */
    public function setOfferInserted($offer_inserted)
    {
        if (is_null($offer_inserted)) {
            throw new \InvalidArgumentException('non-nullable offer_inserted cannot be null');
        }
        $this->container['offer_inserted'] = $offer_inserted;

        return $this;
    }

    /**
     * Gets offer_updated
     *
     * @return int|null
     */
    public function getOfferUpdated()
    {
        return $this->container['offer_updated'];
    }

    /**
     * Sets offer_updated
     *
     * @param int|null $offer_updated Total count of updated offers
     *
     * @return self
     */
    public function setOfferUpdated($offer_updated)
    {
        if (is_null($offer_updated)) {
            throw new \InvalidArgumentException('non-nullable offer_updated cannot be null');
        }
        $this->container['offer_updated'] = $offer_updated;

        return $this;
    }

    /**
     * Gets origin
     *
     * @return string|null
     */
    public function getOrigin()
    {
        return $this->container['origin'];
    }

    /**
     * Sets origin
     *
     * @param string|null $origin Import origin
     *
     * @return self
     */
    public function setOrigin($origin)
    {
        if (is_null($origin)) {
            throw new \InvalidArgumentException('non-nullable origin cannot be null');
        }
        $this->container['origin'] = $origin;

        return $this;
    }

    /**
     * Gets reason_status
     *
     * @return string|null
     */
    public function getReasonStatus()
    {
        return $this->container['reason_status'];
    }

    /**
     * Sets reason_status
     *
     * @param string|null $reason_status Import status reason
     *
     * @return self
     */
    public function setReasonStatus($reason_status)
    {
        if (is_null($reason_status)) {
            throw new \InvalidArgumentException('non-nullable reason_status cannot be null');
        }
        $this->container['reason_status'] = $reason_status;

        return $this;
    }

    /**
     * Gets shop_id
     *
     * @return int|null
     */
    public function getShopId()
    {
        return $this->container['shop_id'];
    }

    /**
     * Sets shop_id
     *
     * @param int|null $shop_id Shop identifier
     *
     * @return self
     */
    public function setShopId($shop_id)
    {
        if (is_null($shop_id)) {
            throw new \InvalidArgumentException('non-nullable shop_id cannot be null');
        }
        $this->container['shop_id'] = $shop_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Import status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


