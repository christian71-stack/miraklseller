<?php
/**
 * RT04Response200ReturnSuccess
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  cbdesk\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mirakl Marketplace APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest-release
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace cbdesk\Mirakl\Model;

use \ArrayAccess;
use \cbdesk\Mirakl\ObjectSerializer;

/**
 * RT04Response200ReturnSuccess Class Doc Comment
 *
 * @category Class
 * @package  cbdesk\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RT04Response200ReturnSuccess implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RT04_Response_200_ReturnSuccess';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'date_created' => '\DateTime',
        'description' => 'string',
        'documents' => '\cbdesk\Mirakl\Model\RT04Response200ReturnSuccessDocuments[]',
        'id' => 'string',
        'label_url' => 'string',
        'last_updated' => '\DateTime',
        'method_code' => 'string',
        'order_commercial_id' => 'string',
        'order_id' => 'string',
        'reason_code' => 'string',
        'rejection_reason_code' => 'string',
        'return_address' => '\cbdesk\Mirakl\Model\RT04Response200ReturnSuccessReturnAddress',
        'return_lines' => '\cbdesk\Mirakl\Model\RT04Response200ReturnSuccessReturnLines[]',
        'rma' => 'string',
        'state' => 'string',
        'tracking' => '\cbdesk\Mirakl\Model\RT04Response200ReturnSuccessTracking'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'date_created' => 'date-time',
        'description' => null,
        'documents' => null,
        'id' => null,
        'label_url' => null,
        'last_updated' => 'date-time',
        'method_code' => null,
        'order_commercial_id' => null,
        'order_id' => null,
        'reason_code' => null,
        'rejection_reason_code' => null,
        'return_address' => null,
        'return_lines' => null,
        'rma' => null,
        'state' => null,
        'tracking' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'date_created' => false,
        'description' => false,
        'documents' => false,
        'id' => false,
        'label_url' => false,
        'last_updated' => false,
        'method_code' => false,
        'order_commercial_id' => false,
        'order_id' => false,
        'reason_code' => false,
        'rejection_reason_code' => false,
        'return_address' => false,
        'return_lines' => false,
        'rma' => false,
        'state' => false,
        'tracking' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'date_created' => 'date_created',
        'description' => 'description',
        'documents' => 'documents',
        'id' => 'id',
        'label_url' => 'label_url',
        'last_updated' => 'last_updated',
        'method_code' => 'method_code',
        'order_commercial_id' => 'order_commercial_id',
        'order_id' => 'order_id',
        'reason_code' => 'reason_code',
        'rejection_reason_code' => 'rejection_reason_code',
        'return_address' => 'return_address',
        'return_lines' => 'return_lines',
        'rma' => 'rma',
        'state' => 'state',
        'tracking' => 'tracking'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'date_created' => 'setDateCreated',
        'description' => 'setDescription',
        'documents' => 'setDocuments',
        'id' => 'setId',
        'label_url' => 'setLabelUrl',
        'last_updated' => 'setLastUpdated',
        'method_code' => 'setMethodCode',
        'order_commercial_id' => 'setOrderCommercialId',
        'order_id' => 'setOrderId',
        'reason_code' => 'setReasonCode',
        'rejection_reason_code' => 'setRejectionReasonCode',
        'return_address' => 'setReturnAddress',
        'return_lines' => 'setReturnLines',
        'rma' => 'setRma',
        'state' => 'setState',
        'tracking' => 'setTracking'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'date_created' => 'getDateCreated',
        'description' => 'getDescription',
        'documents' => 'getDocuments',
        'id' => 'getId',
        'label_url' => 'getLabelUrl',
        'last_updated' => 'getLastUpdated',
        'method_code' => 'getMethodCode',
        'order_commercial_id' => 'getOrderCommercialId',
        'order_id' => 'getOrderId',
        'reason_code' => 'getReasonCode',
        'rejection_reason_code' => 'getRejectionReasonCode',
        'return_address' => 'getReturnAddress',
        'return_lines' => 'getReturnLines',
        'rma' => 'getRma',
        'state' => 'getState',
        'tracking' => 'getTracking'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('date_created', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('documents', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('label_url', $data ?? [], null);
        $this->setIfExists('last_updated', $data ?? [], null);
        $this->setIfExists('method_code', $data ?? [], null);
        $this->setIfExists('order_commercial_id', $data ?? [], null);
        $this->setIfExists('order_id', $data ?? [], null);
        $this->setIfExists('reason_code', $data ?? [], null);
        $this->setIfExists('rejection_reason_code', $data ?? [], null);
        $this->setIfExists('return_address', $data ?? [], null);
        $this->setIfExists('return_lines', $data ?? [], null);
        $this->setIfExists('rma', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('tracking', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets date_created
     *
     * @return \DateTime|null
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param \DateTime|null $date_created Return creation date
     *
     * @return self
     */
    public function setDateCreated($date_created)
    {
        if (is_null($date_created)) {
            throw new \InvalidArgumentException('non-nullable date_created cannot be null');
        }
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets documents
     *
     * @return \cbdesk\Mirakl\Model\RT04Response200ReturnSuccessDocuments[]|null
     */
    public function getDocuments()
    {
        return $this->container['documents'];
    }

    /**
     * Sets documents
     *
     * @param \cbdesk\Mirakl\Model\RT04Response200ReturnSuccessDocuments[]|null $documents Return documents
     *
     * @return self
     */
    public function setDocuments($documents)
    {
        if (is_null($documents)) {
            throw new \InvalidArgumentException('non-nullable documents cannot be null');
        }
        $this->container['documents'] = $documents;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Return id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets label_url
     *
     * @return string|null
     */
    public function getLabelUrl()
    {
        return $this->container['label_url'];
    }

    /**
     * Sets label_url
     *
     * @param string|null $label_url Label URL
     *
     * @return self
     */
    public function setLabelUrl($label_url)
    {
        if (is_null($label_url)) {
            throw new \InvalidArgumentException('non-nullable label_url cannot be null');
        }
        $this->container['label_url'] = $label_url;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return \DateTime|null
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param \DateTime|null $last_updated Return last updated date
     *
     * @return self
     */
    public function setLastUpdated($last_updated)
    {
        if (is_null($last_updated)) {
            throw new \InvalidArgumentException('non-nullable last_updated cannot be null');
        }
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets method_code
     *
     * @return string|null
     */
    public function getMethodCode()
    {
        return $this->container['method_code'];
    }

    /**
     * Sets method_code
     *
     * @param string|null $method_code Return method code
     *
     * @return self
     */
    public function setMethodCode($method_code)
    {
        if (is_null($method_code)) {
            throw new \InvalidArgumentException('non-nullable method_code cannot be null');
        }
        $this->container['method_code'] = $method_code;

        return $this;
    }

    /**
     * Gets order_commercial_id
     *
     * @return string|null
     */
    public function getOrderCommercialId()
    {
        return $this->container['order_commercial_id'];
    }

    /**
     * Sets order_commercial_id
     *
     * @param string|null $order_commercial_id Order commercial id
     *
     * @return self
     */
    public function setOrderCommercialId($order_commercial_id)
    {
        if (is_null($order_commercial_id)) {
            throw new \InvalidArgumentException('non-nullable order_commercial_id cannot be null');
        }
        $this->container['order_commercial_id'] = $order_commercial_id;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return string|null
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param string|null $order_id Order id
     *
     * @return self
     */
    public function setOrderId($order_id)
    {
        if (is_null($order_id)) {
            throw new \InvalidArgumentException('non-nullable order_id cannot be null');
        }
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets reason_code
     *
     * @return string|null
     */
    public function getReasonCode()
    {
        return $this->container['reason_code'];
    }

    /**
     * Sets reason_code
     *
     * @param string|null $reason_code Return reason code
     *
     * @return self
     */
    public function setReasonCode($reason_code)
    {
        if (is_null($reason_code)) {
            throw new \InvalidArgumentException('non-nullable reason_code cannot be null');
        }
        $this->container['reason_code'] = $reason_code;

        return $this;
    }

    /**
     * Gets rejection_reason_code
     *
     * @return string|null
     */
    public function getRejectionReasonCode()
    {
        return $this->container['rejection_reason_code'];
    }

    /**
     * Sets rejection_reason_code
     *
     * @param string|null $rejection_reason_code Return rejection reason code
     *
     * @return self
     */
    public function setRejectionReasonCode($rejection_reason_code)
    {
        if (is_null($rejection_reason_code)) {
            throw new \InvalidArgumentException('non-nullable rejection_reason_code cannot be null');
        }
        $this->container['rejection_reason_code'] = $rejection_reason_code;

        return $this;
    }

    /**
     * Gets return_address
     *
     * @return \cbdesk\Mirakl\Model\RT04Response200ReturnSuccessReturnAddress|null
     */
    public function getReturnAddress()
    {
        return $this->container['return_address'];
    }

    /**
     * Sets return_address
     *
     * @param \cbdesk\Mirakl\Model\RT04Response200ReturnSuccessReturnAddress|null $return_address return_address
     *
     * @return self
     */
    public function setReturnAddress($return_address)
    {
        if (is_null($return_address)) {
            throw new \InvalidArgumentException('non-nullable return_address cannot be null');
        }
        $this->container['return_address'] = $return_address;

        return $this;
    }

    /**
     * Gets return_lines
     *
     * @return \cbdesk\Mirakl\Model\RT04Response200ReturnSuccessReturnLines[]|null
     */
    public function getReturnLines()
    {
        return $this->container['return_lines'];
    }

    /**
     * Sets return_lines
     *
     * @param \cbdesk\Mirakl\Model\RT04Response200ReturnSuccessReturnLines[]|null $return_lines Return lines
     *
     * @return self
     */
    public function setReturnLines($return_lines)
    {
        if (is_null($return_lines)) {
            throw new \InvalidArgumentException('non-nullable return_lines cannot be null');
        }
        $this->container['return_lines'] = $return_lines;

        return $this;
    }

    /**
     * Gets rma
     *
     * @return string|null
     */
    public function getRma()
    {
        return $this->container['rma'];
    }

    /**
     * Sets rma
     *
     * @param string|null $rma Return RMA
     *
     * @return self
     */
    public function setRma($rma)
    {
        if (is_null($rma)) {
            throw new \InvalidArgumentException('non-nullable rma cannot be null');
        }
        $this->container['rma'] = $rma;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state Return state
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets tracking
     *
     * @return \cbdesk\Mirakl\Model\RT04Response200ReturnSuccessTracking|null
     */
    public function getTracking()
    {
        return $this->container['tracking'];
    }

    /**
     * Sets tracking
     *
     * @param \cbdesk\Mirakl\Model\RT04Response200ReturnSuccessTracking|null $tracking tracking
     *
     * @return self
     */
    public function setTracking($tracking)
    {
        if (is_null($tracking)) {
            throw new \InvalidArgumentException('non-nullable tracking cannot be null');
        }
        $this->container['tracking'] = $tracking;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


