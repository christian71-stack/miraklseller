<?php
/**
 * IV01Response200Invoices
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  cbdesk\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mirakl Marketplace APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest-release
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace cbdesk\Mirakl\Model;

use \ArrayAccess;
use \cbdesk\Mirakl\ObjectSerializer;

/**
 * IV01Response200Invoices Class Doc Comment
 *
 * @category Class
 * @package  cbdesk\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class IV01Response200Invoices implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = 'type';

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'IV01_Response_200_Invoices';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'currency_iso_code' => 'string',
        'date_created' => '\DateTime',
        'details' => '\cbdesk\Mirakl\Model\IV01Response200InvoicesDetails[]',
        'due_date' => '\DateTime',
        'id' => 'string',
        'invoice_id' => 'int',
        'issue_date' => '\DateTime',
        'issuing_user' => '\cbdesk\Mirakl\Model\IV01Response200InvoicesIssuingUser',
        'pay_out_psp_code' => 'string',
        'payment' => '\cbdesk\Mirakl\Model\IV01Response200InvoicesPayment',
        'shop_address' => '\cbdesk\Mirakl\Model\IV01Response200InvoicesShopAddress',
        'shop_corporate_name' => 'string',
        'shop_id' => 'int',
        'shop_model' => 'string',
        'shop_name' => 'string',
        'shop_operator_internal_id' => 'string',
        'shop_tax_number' => 'string',
        'state' => 'string',
        'total_amount_excl_taxes' => 'float',
        'total_amount_incl_taxes' => 'float',
        'total_taxes' => '\cbdesk\Mirakl\Model\IV01Response200InvoicesTotalTaxes[]',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'currency_iso_code' => null,
        'date_created' => 'date-time',
        'details' => null,
        'due_date' => 'date-time',
        'id' => null,
        'invoice_id' => 'int64',
        'issue_date' => 'date-time',
        'issuing_user' => null,
        'pay_out_psp_code' => null,
        'payment' => null,
        'shop_address' => null,
        'shop_corporate_name' => null,
        'shop_id' => 'int64',
        'shop_model' => null,
        'shop_name' => null,
        'shop_operator_internal_id' => null,
        'shop_tax_number' => null,
        'state' => null,
        'total_amount_excl_taxes' => null,
        'total_amount_incl_taxes' => null,
        'total_taxes' => null,
        'type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'currency_iso_code' => false,
        'date_created' => false,
        'details' => false,
        'due_date' => false,
        'id' => false,
        'invoice_id' => false,
        'issue_date' => false,
        'issuing_user' => false,
        'pay_out_psp_code' => false,
        'payment' => false,
        'shop_address' => false,
        'shop_corporate_name' => false,
        'shop_id' => false,
        'shop_model' => false,
        'shop_name' => false,
        'shop_operator_internal_id' => false,
        'shop_tax_number' => false,
        'state' => false,
        'total_amount_excl_taxes' => false,
        'total_amount_incl_taxes' => false,
        'total_taxes' => false,
        'type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'currency_iso_code' => 'currency_iso_code',
        'date_created' => 'date_created',
        'details' => 'details',
        'due_date' => 'due_date',
        'id' => 'id',
        'invoice_id' => 'invoice_id',
        'issue_date' => 'issue_date',
        'issuing_user' => 'issuing_user',
        'pay_out_psp_code' => 'pay_out_psp_code',
        'payment' => 'payment',
        'shop_address' => 'shop_address',
        'shop_corporate_name' => 'shop_corporate_name',
        'shop_id' => 'shop_id',
        'shop_model' => 'shop_model',
        'shop_name' => 'shop_name',
        'shop_operator_internal_id' => 'shop_operator_internal_id',
        'shop_tax_number' => 'shop_tax_number',
        'state' => 'state',
        'total_amount_excl_taxes' => 'total_amount_excl_taxes',
        'total_amount_incl_taxes' => 'total_amount_incl_taxes',
        'total_taxes' => 'total_taxes',
        'type' => 'type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'currency_iso_code' => 'setCurrencyIsoCode',
        'date_created' => 'setDateCreated',
        'details' => 'setDetails',
        'due_date' => 'setDueDate',
        'id' => 'setId',
        'invoice_id' => 'setInvoiceId',
        'issue_date' => 'setIssueDate',
        'issuing_user' => 'setIssuingUser',
        'pay_out_psp_code' => 'setPayOutPspCode',
        'payment' => 'setPayment',
        'shop_address' => 'setShopAddress',
        'shop_corporate_name' => 'setShopCorporateName',
        'shop_id' => 'setShopId',
        'shop_model' => 'setShopModel',
        'shop_name' => 'setShopName',
        'shop_operator_internal_id' => 'setShopOperatorInternalId',
        'shop_tax_number' => 'setShopTaxNumber',
        'state' => 'setState',
        'total_amount_excl_taxes' => 'setTotalAmountExclTaxes',
        'total_amount_incl_taxes' => 'setTotalAmountInclTaxes',
        'total_taxes' => 'setTotalTaxes',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'currency_iso_code' => 'getCurrencyIsoCode',
        'date_created' => 'getDateCreated',
        'details' => 'getDetails',
        'due_date' => 'getDueDate',
        'id' => 'getId',
        'invoice_id' => 'getInvoiceId',
        'issue_date' => 'getIssueDate',
        'issuing_user' => 'getIssuingUser',
        'pay_out_psp_code' => 'getPayOutPspCode',
        'payment' => 'getPayment',
        'shop_address' => 'getShopAddress',
        'shop_corporate_name' => 'getShopCorporateName',
        'shop_id' => 'getShopId',
        'shop_model' => 'getShopModel',
        'shop_name' => 'getShopName',
        'shop_operator_internal_id' => 'getShopOperatorInternalId',
        'shop_tax_number' => 'getShopTaxNumber',
        'state' => 'getState',
        'total_amount_excl_taxes' => 'getTotalAmountExclTaxes',
        'total_amount_incl_taxes' => 'getTotalAmountInclTaxes',
        'total_taxes' => 'getTotalTaxes',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('currency_iso_code', $data ?? [], null);
        $this->setIfExists('date_created', $data ?? [], null);
        $this->setIfExists('details', $data ?? [], null);
        $this->setIfExists('due_date', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('invoice_id', $data ?? [], null);
        $this->setIfExists('issue_date', $data ?? [], null);
        $this->setIfExists('issuing_user', $data ?? [], null);
        $this->setIfExists('pay_out_psp_code', $data ?? [], null);
        $this->setIfExists('payment', $data ?? [], null);
        $this->setIfExists('shop_address', $data ?? [], null);
        $this->setIfExists('shop_corporate_name', $data ?? [], null);
        $this->setIfExists('shop_id', $data ?? [], null);
        $this->setIfExists('shop_model', $data ?? [], null);
        $this->setIfExists('shop_name', $data ?? [], null);
        $this->setIfExists('shop_operator_internal_id', $data ?? [], null);
        $this->setIfExists('shop_tax_number', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('total_amount_excl_taxes', $data ?? [], null);
        $this->setIfExists('total_amount_incl_taxes', $data ?? [], null);
        $this->setIfExists('total_taxes', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);

        // Initialize discriminator property with the model name.
        $this->container['type'] = static::$openAPIModelName;
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets currency_iso_code
     *
     * @return string|null
     */
    public function getCurrencyIsoCode()
    {
        return $this->container['currency_iso_code'];
    }

    /**
     * Sets currency_iso_code
     *
     * @param string|null $currency_iso_code The currency of the shop
     *
     * @return self
     */
    public function setCurrencyIsoCode($currency_iso_code)
    {
        if (is_null($currency_iso_code)) {
            throw new \InvalidArgumentException('non-nullable currency_iso_code cannot be null');
        }
        $this->container['currency_iso_code'] = $currency_iso_code;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return \DateTime|null
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param \DateTime|null $date_created Accounting document creation date
     *
     * @return self
     */
    public function setDateCreated($date_created)
    {
        if (is_null($date_created)) {
            throw new \InvalidArgumentException('non-nullable date_created cannot be null');
        }
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets details
     *
     * @return \cbdesk\Mirakl\Model\IV01Response200InvoicesDetails[]|null
     */
    public function getDetails()
    {
        return $this->container['details'];
    }

    /**
     * Sets details
     *
     * @param \cbdesk\Mirakl\Model\IV01Response200InvoicesDetails[]|null $details Accounting details
     *
     * @return self
     */
    public function setDetails($details)
    {
        if (is_null($details)) {
            throw new \InvalidArgumentException('non-nullable details cannot be null');
        }
        $this->container['details'] = $details;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return \DateTime|null
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param \DateTime|null $due_date Due date for the payment of the accounting document
     *
     * @return self
     */
    public function setDueDate($due_date)
    {
        if (is_null($due_date)) {
            throw new \InvalidArgumentException('non-nullable due_date cannot be null');
        }
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Accounting document identifier (use it for draft document)
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets invoice_id
     *
     * @return int|null
     */
    public function getInvoiceId()
    {
        return $this->container['invoice_id'];
    }

    /**
     * Sets invoice_id
     *
     * @param int|null $invoice_id Accounting document identifier (present if the accounting document is issued)
     *
     * @return self
     */
    public function setInvoiceId($invoice_id)
    {
        if (is_null($invoice_id)) {
            throw new \InvalidArgumentException('non-nullable invoice_id cannot be null');
        }
        $this->container['invoice_id'] = $invoice_id;

        return $this;
    }

    /**
     * Gets issue_date
     *
     * @return \DateTime|null
     */
    public function getIssueDate()
    {
        return $this->container['issue_date'];
    }

    /**
     * Sets issue_date
     *
     * @param \DateTime|null $issue_date Issue date of an accounting document
     *
     * @return self
     */
    public function setIssueDate($issue_date)
    {
        if (is_null($issue_date)) {
            throw new \InvalidArgumentException('non-nullable issue_date cannot be null');
        }
        $this->container['issue_date'] = $issue_date;

        return $this;
    }

    /**
     * Gets issuing_user
     *
     * @return \cbdesk\Mirakl\Model\IV01Response200InvoicesIssuingUser|null
     */
    public function getIssuingUser()
    {
        return $this->container['issuing_user'];
    }

    /**
     * Sets issuing_user
     *
     * @param \cbdesk\Mirakl\Model\IV01Response200InvoicesIssuingUser|null $issuing_user issuing_user
     *
     * @return self
     */
    public function setIssuingUser($issuing_user)
    {
        if (is_null($issuing_user)) {
            throw new \InvalidArgumentException('non-nullable issuing_user cannot be null');
        }
        $this->container['issuing_user'] = $issuing_user;

        return $this;
    }

    /**
     * Gets pay_out_psp_code
     *
     * @return string|null
     */
    public function getPayOutPspCode()
    {
        return $this->container['pay_out_psp_code'];
    }

    /**
     * Sets pay_out_psp_code
     *
     * @param string|null $pay_out_psp_code PSP code for Pay-out
     *
     * @return self
     */
    public function setPayOutPspCode($pay_out_psp_code)
    {
        if (is_null($pay_out_psp_code)) {
            throw new \InvalidArgumentException('non-nullable pay_out_psp_code cannot be null');
        }
        $this->container['pay_out_psp_code'] = $pay_out_psp_code;

        return $this;
    }

    /**
     * Gets payment
     *
     * @return \cbdesk\Mirakl\Model\IV01Response200InvoicesPayment|null
     */
    public function getPayment()
    {
        return $this->container['payment'];
    }

    /**
     * Sets payment
     *
     * @param \cbdesk\Mirakl\Model\IV01Response200InvoicesPayment|null $payment payment
     *
     * @return self
     */
    public function setPayment($payment)
    {
        if (is_null($payment)) {
            throw new \InvalidArgumentException('non-nullable payment cannot be null');
        }
        $this->container['payment'] = $payment;

        return $this;
    }

    /**
     * Gets shop_address
     *
     * @return \cbdesk\Mirakl\Model\IV01Response200InvoicesShopAddress|null
     */
    public function getShopAddress()
    {
        return $this->container['shop_address'];
    }

    /**
     * Sets shop_address
     *
     * @param \cbdesk\Mirakl\Model\IV01Response200InvoicesShopAddress|null $shop_address shop_address
     *
     * @return self
     */
    public function setShopAddress($shop_address)
    {
        if (is_null($shop_address)) {
            throw new \InvalidArgumentException('non-nullable shop_address cannot be null');
        }
        $this->container['shop_address'] = $shop_address;

        return $this;
    }

    /**
     * Gets shop_corporate_name
     *
     * @return string|null
     */
    public function getShopCorporateName()
    {
        return $this->container['shop_corporate_name'];
    }

    /**
     * Sets shop_corporate_name
     *
     * @param string|null $shop_corporate_name Shop corporate name if it is a professional shop
     *
     * @return self
     */
    public function setShopCorporateName($shop_corporate_name)
    {
        if (is_null($shop_corporate_name)) {
            throw new \InvalidArgumentException('non-nullable shop_corporate_name cannot be null');
        }
        $this->container['shop_corporate_name'] = $shop_corporate_name;

        return $this;
    }

    /**
     * Gets shop_id
     *
     * @return int|null
     */
    public function getShopId()
    {
        return $this->container['shop_id'];
    }

    /**
     * Sets shop_id
     *
     * @param int|null $shop_id Shop id
     *
     * @return self
     */
    public function setShopId($shop_id)
    {
        if (is_null($shop_id)) {
            throw new \InvalidArgumentException('non-nullable shop_id cannot be null');
        }
        $this->container['shop_id'] = $shop_id;

        return $this;
    }

    /**
     * Gets shop_model
     *
     * @return string|null
     */
    public function getShopModel()
    {
        return $this->container['shop_model'];
    }

    /**
     * Sets shop_model
     *
     * @param string|null $shop_model Shop model
     *
     * @return self
     */
    public function setShopModel($shop_model)
    {
        if (is_null($shop_model)) {
            throw new \InvalidArgumentException('non-nullable shop_model cannot be null');
        }
        $this->container['shop_model'] = $shop_model;

        return $this;
    }

    /**
     * Gets shop_name
     *
     * @return string|null
     */
    public function getShopName()
    {
        return $this->container['shop_name'];
    }

    /**
     * Sets shop_name
     *
     * @param string|null $shop_name Shop name
     *
     * @return self
     */
    public function setShopName($shop_name)
    {
        if (is_null($shop_name)) {
            throw new \InvalidArgumentException('non-nullable shop_name cannot be null');
        }
        $this->container['shop_name'] = $shop_name;

        return $this;
    }

    /**
     * Gets shop_operator_internal_id
     *
     * @return string|null
     */
    public function getShopOperatorInternalId()
    {
        return $this->container['shop_operator_internal_id'];
    }

    /**
     * Sets shop_operator_internal_id
     *
     * @param string|null $shop_operator_internal_id Operator internal id for the shop
     *
     * @return self
     */
    public function setShopOperatorInternalId($shop_operator_internal_id)
    {
        if (is_null($shop_operator_internal_id)) {
            throw new \InvalidArgumentException('non-nullable shop_operator_internal_id cannot be null');
        }
        $this->container['shop_operator_internal_id'] = $shop_operator_internal_id;

        return $this;
    }

    /**
     * Gets shop_tax_number
     *
     * @return string|null
     */
    public function getShopTaxNumber()
    {
        return $this->container['shop_tax_number'];
    }

    /**
     * Sets shop_tax_number
     *
     * @param string|null $shop_tax_number Shop tax number if it is a professional shop
     *
     * @return self
     */
    public function setShopTaxNumber($shop_tax_number)
    {
        if (is_null($shop_tax_number)) {
            throw new \InvalidArgumentException('non-nullable shop_tax_number cannot be null');
        }
        $this->container['shop_tax_number'] = $shop_tax_number;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state Accounting document state
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets total_amount_excl_taxes
     *
     * @return float|null
     */
    public function getTotalAmountExclTaxes()
    {
        return $this->container['total_amount_excl_taxes'];
    }

    /**
     * Sets total_amount_excl_taxes
     *
     * @param float|null $total_amount_excl_taxes Total amount charged to the shop (excluding taxes)
     *
     * @return self
     */
    public function setTotalAmountExclTaxes($total_amount_excl_taxes)
    {
        if (is_null($total_amount_excl_taxes)) {
            throw new \InvalidArgumentException('non-nullable total_amount_excl_taxes cannot be null');
        }
        $this->container['total_amount_excl_taxes'] = $total_amount_excl_taxes;

        return $this;
    }

    /**
     * Gets total_amount_incl_taxes
     *
     * @return float|null
     */
    public function getTotalAmountInclTaxes()
    {
        return $this->container['total_amount_incl_taxes'];
    }

    /**
     * Sets total_amount_incl_taxes
     *
     * @param float|null $total_amount_incl_taxes Total amount charged to the shop (including taxes)
     *
     * @return self
     */
    public function setTotalAmountInclTaxes($total_amount_incl_taxes)
    {
        if (is_null($total_amount_incl_taxes)) {
            throw new \InvalidArgumentException('non-nullable total_amount_incl_taxes cannot be null');
        }
        $this->container['total_amount_incl_taxes'] = $total_amount_incl_taxes;

        return $this;
    }

    /**
     * Gets total_taxes
     *
     * @return \cbdesk\Mirakl\Model\IV01Response200InvoicesTotalTaxes[]|null
     */
    public function getTotalTaxes()
    {
        return $this->container['total_taxes'];
    }

    /**
     * Sets total_taxes
     *
     * @param \cbdesk\Mirakl\Model\IV01Response200InvoicesTotalTaxes[]|null $total_taxes Total taxes
     *
     * @return self
     */
    public function setTotalTaxes($total_taxes)
    {
        if (is_null($total_taxes)) {
            throw new \InvalidArgumentException('non-nullable total_taxes cannot be null');
        }
        $this->container['total_taxes'] = $total_taxes;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Accounting document type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


