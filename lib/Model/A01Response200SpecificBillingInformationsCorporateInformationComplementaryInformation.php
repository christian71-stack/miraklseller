<?php
/**
 * A01Response200SpecificBillingInformationsCorporateInformationComplementaryInformation
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  cbdesk\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mirakl Marketplace APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest-release
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace cbdesk\Mirakl\Model;

use \ArrayAccess;
use \cbdesk\Mirakl\ObjectSerializer;

/**
 * A01Response200SpecificBillingInformationsCorporateInformationComplementaryInformation Class Doc Comment
 *
 * @category Class
 * @package  cbdesk\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class A01Response200SpecificBillingInformationsCorporateInformationComplementaryInformation implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'A01_Response_200_SpecificBillingInformations_CorporateInformation_ComplementaryInformation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'business_activity_code' => 'string',
        'company_registration_city' => 'string',
        'company_registration_province' => 'string',
        'company_shareholders' => 'string',
        'is_in_liquidation' => 'bool',
        'legal_form' => 'string',
        'share_capital' => 'float',
        'share_capital_currency' => 'string',
        'sole_trader' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'business_activity_code' => null,
        'company_registration_city' => null,
        'company_registration_province' => null,
        'company_shareholders' => null,
        'is_in_liquidation' => null,
        'legal_form' => null,
        'share_capital' => null,
        'share_capital_currency' => null,
        'sole_trader' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'business_activity_code' => false,
        'company_registration_city' => false,
        'company_registration_province' => false,
        'company_shareholders' => false,
        'is_in_liquidation' => false,
        'legal_form' => false,
        'share_capital' => false,
        'share_capital_currency' => false,
        'sole_trader' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'business_activity_code' => 'business_activity_code',
        'company_registration_city' => 'company_registration_city',
        'company_registration_province' => 'company_registration_province',
        'company_shareholders' => 'company_shareholders',
        'is_in_liquidation' => 'is_in_liquidation',
        'legal_form' => 'legal_form',
        'share_capital' => 'share_capital',
        'share_capital_currency' => 'share_capital_currency',
        'sole_trader' => 'sole_trader'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'business_activity_code' => 'setBusinessActivityCode',
        'company_registration_city' => 'setCompanyRegistrationCity',
        'company_registration_province' => 'setCompanyRegistrationProvince',
        'company_shareholders' => 'setCompanyShareholders',
        'is_in_liquidation' => 'setIsInLiquidation',
        'legal_form' => 'setLegalForm',
        'share_capital' => 'setShareCapital',
        'share_capital_currency' => 'setShareCapitalCurrency',
        'sole_trader' => 'setSoleTrader'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'business_activity_code' => 'getBusinessActivityCode',
        'company_registration_city' => 'getCompanyRegistrationCity',
        'company_registration_province' => 'getCompanyRegistrationProvince',
        'company_shareholders' => 'getCompanyShareholders',
        'is_in_liquidation' => 'getIsInLiquidation',
        'legal_form' => 'getLegalForm',
        'share_capital' => 'getShareCapital',
        'share_capital_currency' => 'getShareCapitalCurrency',
        'sole_trader' => 'getSoleTrader'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('business_activity_code', $data ?? [], null);
        $this->setIfExists('company_registration_city', $data ?? [], null);
        $this->setIfExists('company_registration_province', $data ?? [], null);
        $this->setIfExists('company_shareholders', $data ?? [], null);
        $this->setIfExists('is_in_liquidation', $data ?? [], null);
        $this->setIfExists('legal_form', $data ?? [], null);
        $this->setIfExists('share_capital', $data ?? [], null);
        $this->setIfExists('share_capital_currency', $data ?? [], null);
        $this->setIfExists('sole_trader', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets business_activity_code
     *
     * @return string|null
     */
    public function getBusinessActivityCode()
    {
        return $this->container['business_activity_code'];
    }

    /**
     * Sets business_activity_code
     *
     * @param string|null $business_activity_code The business activity code of the company, known as <code>APE code</code> in France. <br/><i>Applies only when the operator is registered in the <code>EU</code>, and the seller is registered in <code>France</code>.</i>
     *
     * @return self
     */
    public function setBusinessActivityCode($business_activity_code)
    {
        if (is_null($business_activity_code)) {
            throw new \InvalidArgumentException('non-nullable business_activity_code cannot be null');
        }
        $this->container['business_activity_code'] = $business_activity_code;

        return $this;
    }

    /**
     * Gets company_registration_city
     *
     * @return string|null
     */
    public function getCompanyRegistrationCity()
    {
        return $this->container['company_registration_city'];
    }

    /**
     * Sets company_registration_city
     *
     * @param string|null $company_registration_city The city of the company's registry office. <br/><i>Applies only when the operator is registered in the <code>EU</code> and the seller is registered in <code>France</code> or <code>Luxembourg</code>.</i>
     *
     * @return self
     */
    public function setCompanyRegistrationCity($company_registration_city)
    {
        if (is_null($company_registration_city)) {
            throw new \InvalidArgumentException('non-nullable company_registration_city cannot be null');
        }
        $this->container['company_registration_city'] = $company_registration_city;

        return $this;
    }

    /**
     * Gets company_registration_province
     *
     * @return string|null
     */
    public function getCompanyRegistrationProvince()
    {
        return $this->container['company_registration_province'];
    }

    /**
     * Sets company_registration_province
     *
     * @param string|null $company_registration_province The initials of the company’s registry office province. Known as <code>Ufficio</code> in Italy. <br/><i>Applies only when the operator is registered in the <code>EU</code> and the seller is registered in <code>Italy</code>.</i>
     *
     * @return self
     */
    public function setCompanyRegistrationProvince($company_registration_province)
    {
        if (is_null($company_registration_province)) {
            throw new \InvalidArgumentException('non-nullable company_registration_province cannot be null');
        }
        $this->container['company_registration_province'] = $company_registration_province;

        return $this;
    }

    /**
     * Gets company_shareholders
     *
     * @return string|null
     */
    public function getCompanyShareholders()
    {
        return $this->container['company_shareholders'];
    }

    /**
     * Sets company_shareholders
     *
     * @param string|null $company_shareholders Indicates if there is a single shareholder or several shareholders. Known as <code>Socio Unico</code> in Italy. <br/><i>Applies only when the operator is registered in the <code>EU</code> and the seller is registered in <code>Italy</code>.</i>
     *
     * @return self
     */
    public function setCompanyShareholders($company_shareholders)
    {
        if (is_null($company_shareholders)) {
            throw new \InvalidArgumentException('non-nullable company_shareholders cannot be null');
        }
        $this->container['company_shareholders'] = $company_shareholders;

        return $this;
    }

    /**
     * Gets is_in_liquidation
     *
     * @return bool|null
     */
    public function getIsInLiquidation()
    {
        return $this->container['is_in_liquidation'];
    }

    /**
     * Sets is_in_liquidation
     *
     * @param bool|null $is_in_liquidation Indicates whether the company is in liquidation or not. <br/><i>Applies only when the operator is registered in the <code>EU</code></i>
     *
     * @return self
     */
    public function setIsInLiquidation($is_in_liquidation)
    {
        if (is_null($is_in_liquidation)) {
            throw new \InvalidArgumentException('non-nullable is_in_liquidation cannot be null');
        }
        $this->container['is_in_liquidation'] = $is_in_liquidation;

        return $this;
    }

    /**
     * Gets legal_form
     *
     * @return string|null
     */
    public function getLegalForm()
    {
        return $this->container['legal_form'];
    }

    /**
     * Sets legal_form
     *
     * @param string|null $legal_form The legal form of the company. <br/><i>Applies only when the operator is registered in the <code>EU</code></i>
     *
     * @return self
     */
    public function setLegalForm($legal_form)
    {
        if (is_null($legal_form)) {
            throw new \InvalidArgumentException('non-nullable legal_form cannot be null');
        }
        $this->container['legal_form'] = $legal_form;

        return $this;
    }

    /**
     * Gets share_capital
     *
     * @return float|null
     */
    public function getShareCapital()
    {
        return $this->container['share_capital'];
    }

    /**
     * Sets share_capital
     *
     * @param float|null $share_capital The share capital of the company. <br/><i>Applies only when the operator is registered in the <code>EU</code></i>
     *
     * @return self
     */
    public function setShareCapital($share_capital)
    {
        if (is_null($share_capital)) {
            throw new \InvalidArgumentException('non-nullable share_capital cannot be null');
        }
        $this->container['share_capital'] = $share_capital;

        return $this;
    }

    /**
     * Gets share_capital_currency
     *
     * @return string|null
     */
    public function getShareCapitalCurrency()
    {
        return $this->container['share_capital_currency'];
    }

    /**
     * Sets share_capital_currency
     *
     * @param string|null $share_capital_currency The share capital currency of the company. <br/><i>Applies only when the operator is registered in the <code>EU</code></i>
     *
     * @return self
     */
    public function setShareCapitalCurrency($share_capital_currency)
    {
        if (is_null($share_capital_currency)) {
            throw new \InvalidArgumentException('non-nullable share_capital_currency cannot be null');
        }
        $this->container['share_capital_currency'] = $share_capital_currency;

        return $this;
    }

    /**
     * Gets sole_trader
     *
     * @return bool|null
     */
    public function getSoleTrader()
    {
        return $this->container['sole_trader'];
    }

    /**
     * Sets sole_trader
     *
     * @param bool|null $sole_trader Defines if the shop is a sole trader. When this option is set to true, additional information is asked to the shop. <i>Applies only when the operator is registered in the <code>EU</code></i>
     *
     * @return self
     */
    public function setSoleTrader($sole_trader)
    {
        if (is_null($sole_trader)) {
            throw new \InvalidArgumentException('non-nullable sole_trader cannot be null');
        }
        $this->container['sole_trader'] = $sole_trader;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


