<?php
/**
 * A02Request
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  cbdesk\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mirakl Marketplace APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest-release
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace cbdesk\Mirakl\Model;

use \ArrayAccess;
use \cbdesk\Mirakl\ObjectSerializer;

/**
 * A02Request Class Doc Comment
 *
 * @category Class
 * @package  cbdesk\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class A02Request implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'A02_Request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'address' => '\cbdesk\Mirakl\Model\A02RequestAddress',
        'channels' => 'string[]',
        'closed_from' => '\DateTime',
        'closed_to' => '\DateTime',
        'description' => 'string',
        'email' => 'string',
        'fax' => 'string',
        'is_professional' => 'bool',
        'payment_info' => '\cbdesk\Mirakl\Model\A02RequestPaymentInfo',
        'pro_details' => '\cbdesk\Mirakl\Model\A02RequestProDetails',
        'producer_identifiers' => '\cbdesk\Mirakl\Model\A02RequestProducerIdentifiers[]',
        'recycling_policy' => 'string',
        'return_policy' => 'string',
        'shipping_country' => 'string',
        'shop_additional_fields' => '\cbdesk\Mirakl\Model\A02RequestShopAdditionalFields[]',
        'shop_name' => 'string',
        'web_site' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'address' => null,
        'channels' => null,
        'closed_from' => 'date-time',
        'closed_to' => 'date-time',
        'description' => null,
        'email' => null,
        'fax' => null,
        'is_professional' => null,
        'payment_info' => null,
        'pro_details' => null,
        'producer_identifiers' => null,
        'recycling_policy' => null,
        'return_policy' => null,
        'shipping_country' => null,
        'shop_additional_fields' => null,
        'shop_name' => null,
        'web_site' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'address' => false,
        'channels' => false,
        'closed_from' => false,
        'closed_to' => false,
        'description' => false,
        'email' => false,
        'fax' => false,
        'is_professional' => false,
        'payment_info' => false,
        'pro_details' => false,
        'producer_identifiers' => false,
        'recycling_policy' => false,
        'return_policy' => false,
        'shipping_country' => false,
        'shop_additional_fields' => false,
        'shop_name' => false,
        'web_site' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'address' => 'address',
        'channels' => 'channels',
        'closed_from' => 'closed_from',
        'closed_to' => 'closed_to',
        'description' => 'description',
        'email' => 'email',
        'fax' => 'fax',
        'is_professional' => 'is_professional',
        'payment_info' => 'payment_info',
        'pro_details' => 'pro_details',
        'producer_identifiers' => 'producer_identifiers',
        'recycling_policy' => 'recycling_policy',
        'return_policy' => 'return_policy',
        'shipping_country' => 'shipping_country',
        'shop_additional_fields' => 'shop_additional_fields',
        'shop_name' => 'shop_name',
        'web_site' => 'web_site'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'address' => 'setAddress',
        'channels' => 'setChannels',
        'closed_from' => 'setClosedFrom',
        'closed_to' => 'setClosedTo',
        'description' => 'setDescription',
        'email' => 'setEmail',
        'fax' => 'setFax',
        'is_professional' => 'setIsProfessional',
        'payment_info' => 'setPaymentInfo',
        'pro_details' => 'setProDetails',
        'producer_identifiers' => 'setProducerIdentifiers',
        'recycling_policy' => 'setRecyclingPolicy',
        'return_policy' => 'setReturnPolicy',
        'shipping_country' => 'setShippingCountry',
        'shop_additional_fields' => 'setShopAdditionalFields',
        'shop_name' => 'setShopName',
        'web_site' => 'setWebSite'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'address' => 'getAddress',
        'channels' => 'getChannels',
        'closed_from' => 'getClosedFrom',
        'closed_to' => 'getClosedTo',
        'description' => 'getDescription',
        'email' => 'getEmail',
        'fax' => 'getFax',
        'is_professional' => 'getIsProfessional',
        'payment_info' => 'getPaymentInfo',
        'pro_details' => 'getProDetails',
        'producer_identifiers' => 'getProducerIdentifiers',
        'recycling_policy' => 'getRecyclingPolicy',
        'return_policy' => 'getReturnPolicy',
        'shipping_country' => 'getShippingCountry',
        'shop_additional_fields' => 'getShopAdditionalFields',
        'shop_name' => 'getShopName',
        'web_site' => 'getWebSite'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('channels', $data ?? [], null);
        $this->setIfExists('closed_from', $data ?? [], null);
        $this->setIfExists('closed_to', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('fax', $data ?? [], null);
        $this->setIfExists('is_professional', $data ?? [], null);
        $this->setIfExists('payment_info', $data ?? [], null);
        $this->setIfExists('pro_details', $data ?? [], null);
        $this->setIfExists('producer_identifiers', $data ?? [], null);
        $this->setIfExists('recycling_policy', $data ?? [], null);
        $this->setIfExists('return_policy', $data ?? [], null);
        $this->setIfExists('shipping_country', $data ?? [], null);
        $this->setIfExists('shop_additional_fields', $data ?? [], null);
        $this->setIfExists('shop_name', $data ?? [], null);
        $this->setIfExists('web_site', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['producer_identifiers']) && (count($this->container['producer_identifiers']) > 50)) {
            $invalidProperties[] = "invalid value for 'producer_identifiers', number of items must be less than or equal to 50.";
        }

        if (!is_null($this->container['producer_identifiers']) && (count($this->container['producer_identifiers']) < 0)) {
            $invalidProperties[] = "invalid value for 'producer_identifiers', number of items must be greater than or equal to 0.";
        }

        if (!is_null($this->container['recycling_policy']) && (mb_strlen($this->container['recycling_policy']) > 5000)) {
            $invalidProperties[] = "invalid value for 'recycling_policy', the character length must be smaller than or equal to 5000.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets address
     *
     * @return \cbdesk\Mirakl\Model\A02RequestAddress|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \cbdesk\Mirakl\Model\A02RequestAddress|null $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets channels
     *
     * @return string[]|null
     */
    public function getChannels()
    {
        return $this->container['channels'];
    }

    /**
     * Sets channels
     *
     * @param string[]|null $channels List of the channel codes associated to the shop. If new channel is associated without providing values for the required shop_additional_fields, default values will be set.
     *
     * @return self
     */
    public function setChannels($channels)
    {
        if (is_null($channels)) {
            throw new \InvalidArgumentException('non-nullable channels cannot be null');
        }
        $this->container['channels'] = $channels;

        return $this;
    }

    /**
     * Gets closed_from
     *
     * @return \DateTime|null
     */
    public function getClosedFrom()
    {
        return $this->container['closed_from'];
    }

    /**
     * Sets closed_from
     *
     * @param \DateTime|null $closed_from Date: if defined, this shop will be closed on this date. Nullable.
     *
     * @return self
     */
    public function setClosedFrom($closed_from)
    {
        if (is_null($closed_from)) {
            throw new \InvalidArgumentException('non-nullable closed_from cannot be null');
        }
        $this->container['closed_from'] = $closed_from;

        return $this;
    }

    /**
     * Gets closed_to
     *
     * @return \DateTime|null
     */
    public function getClosedTo()
    {
        return $this->container['closed_to'];
    }

    /**
     * Sets closed_to
     *
     * @param \DateTime|null $closed_to Date: if defined, this shop will be reopened on this date. Nullable.
     *
     * @return self
     */
    public function setClosedTo($closed_to)
    {
        if (is_null($closed_to)) {
            throw new \InvalidArgumentException('non-nullable closed_to cannot be null');
        }
        $this->container['closed_to'] = $closed_to;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Description of the shop. Nullable.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email Email of the shop. Cannot be null.
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets fax
     *
     * @return string|null
     */
    public function getFax()
    {
        return $this->container['fax'];
    }

    /**
     * Sets fax
     *
     * @param string|null $fax Fax of the shop. Nullable.
     *
     * @return self
     */
    public function setFax($fax)
    {
        if (is_null($fax)) {
            throw new \InvalidArgumentException('non-nullable fax cannot be null');
        }
        $this->container['fax'] = $fax;

        return $this;
    }

    /**
     * Gets is_professional
     *
     * @return bool|null
     */
    public function getIsProfessional()
    {
        return $this->container['is_professional'];
    }

    /**
     * Sets is_professional
     *
     * @param bool|null $is_professional Whether or not the shop is professional. Cannot be null.
     *
     * @return self
     */
    public function setIsProfessional($is_professional)
    {
        if (is_null($is_professional)) {
            throw new \InvalidArgumentException('non-nullable is_professional cannot be null');
        }
        $this->container['is_professional'] = $is_professional;

        return $this;
    }

    /**
     * Gets payment_info
     *
     * @return \cbdesk\Mirakl\Model\A02RequestPaymentInfo|null
     */
    public function getPaymentInfo()
    {
        return $this->container['payment_info'];
    }

    /**
     * Sets payment_info
     *
     * @param \cbdesk\Mirakl\Model\A02RequestPaymentInfo|null $payment_info payment_info
     *
     * @return self
     */
    public function setPaymentInfo($payment_info)
    {
        if (is_null($payment_info)) {
            throw new \InvalidArgumentException('non-nullable payment_info cannot be null');
        }
        $this->container['payment_info'] = $payment_info;

        return $this;
    }

    /**
     * Gets pro_details
     *
     * @return \cbdesk\Mirakl\Model\A02RequestProDetails|null
     */
    public function getProDetails()
    {
        return $this->container['pro_details'];
    }

    /**
     * Sets pro_details
     *
     * @param \cbdesk\Mirakl\Model\A02RequestProDetails|null $pro_details pro_details
     *
     * @return self
     */
    public function setProDetails($pro_details)
    {
        if (is_null($pro_details)) {
            throw new \InvalidArgumentException('non-nullable pro_details cannot be null');
        }
        $this->container['pro_details'] = $pro_details;

        return $this;
    }

    /**
     * Gets producer_identifiers
     *
     * @return \cbdesk\Mirakl\Model\A02RequestProducerIdentifiers[]|null
     */
    public function getProducerIdentifiers()
    {
        return $this->container['producer_identifiers'];
    }

    /**
     * Sets producer_identifiers
     *
     * @param \cbdesk\Mirakl\Model\A02RequestProducerIdentifiers[]|null $producer_identifiers List of shop’s producer identifiers per Extended Producer Responsibility (EPR) categories. Only available if the operator setting <em>Activate data collection related to circular economy regulations</em> is enabled.
     *
     * @return self
     */
    public function setProducerIdentifiers($producer_identifiers)
    {
        if (is_null($producer_identifiers)) {
            throw new \InvalidArgumentException('non-nullable producer_identifiers cannot be null');
        }

        if ((count($producer_identifiers) > 50)) {
            throw new \InvalidArgumentException('invalid value for $producer_identifiers when calling A02Request., number of items must be less than or equal to 50.');
        }
        if ((count($producer_identifiers) < 0)) {
            throw new \InvalidArgumentException('invalid length for $producer_identifiers when calling A02Request., number of items must be greater than or equal to 0.');
        }
        $this->container['producer_identifiers'] = $producer_identifiers;

        return $this;
    }

    /**
     * Gets recycling_policy
     *
     * @return string|null
     */
    public function getRecyclingPolicy()
    {
        return $this->container['recycling_policy'];
    }

    /**
     * Sets recycling_policy
     *
     * @param string|null $recycling_policy Recycling policy - only available if the operator setting <em>Activate data collection related to circular economy regulations</em> has been enabled.
     *
     * @return self
     */
    public function setRecyclingPolicy($recycling_policy)
    {
        if (is_null($recycling_policy)) {
            throw new \InvalidArgumentException('non-nullable recycling_policy cannot be null');
        }
        if ((mb_strlen($recycling_policy) > 5000)) {
            throw new \InvalidArgumentException('invalid length for $recycling_policy when calling A02Request., must be smaller than or equal to 5000.');
        }

        $this->container['recycling_policy'] = $recycling_policy;

        return $this;
    }

    /**
     * Gets return_policy
     *
     * @return string|null
     */
    public function getReturnPolicy()
    {
        return $this->container['return_policy'];
    }

    /**
     * Sets return_policy
     *
     * @param string|null $return_policy Return policy of the shop. Nullable.
     *
     * @return self
     */
    public function setReturnPolicy($return_policy)
    {
        if (is_null($return_policy)) {
            throw new \InvalidArgumentException('non-nullable return_policy cannot be null');
        }
        $this->container['return_policy'] = $return_policy;

        return $this;
    }

    /**
     * Gets shipping_country
     *
     * @return string|null
     */
    public function getShippingCountry()
    {
        return $this->container['shipping_country'];
    }

    /**
     * Sets shipping_country
     *
     * @param string|null $shipping_country Shipping country of the shop. Nullable.
     *
     * @return self
     */
    public function setShippingCountry($shipping_country)
    {
        if (is_null($shipping_country)) {
            throw new \InvalidArgumentException('non-nullable shipping_country cannot be null');
        }
        $this->container['shipping_country'] = $shipping_country;

        return $this;
    }

    /**
     * Gets shop_additional_fields
     *
     * @return \cbdesk\Mirakl\Model\A02RequestShopAdditionalFields[]|null
     */
    public function getShopAdditionalFields()
    {
        return $this->container['shop_additional_fields'];
    }

    /**
     * Sets shop_additional_fields
     *
     * @param \cbdesk\Mirakl\Model\A02RequestShopAdditionalFields[]|null $shop_additional_fields Additional fields of the shop. Note that if the 'value' field in the child structure is absent, the corresponding additional field value will be removed for this shop. Nullable.
     *
     * @return self
     */
    public function setShopAdditionalFields($shop_additional_fields)
    {
        if (is_null($shop_additional_fields)) {
            throw new \InvalidArgumentException('non-nullable shop_additional_fields cannot be null');
        }
        $this->container['shop_additional_fields'] = $shop_additional_fields;

        return $this;
    }

    /**
     * Gets shop_name
     *
     * @return string|null
     */
    public function getShopName()
    {
        return $this->container['shop_name'];
    }

    /**
     * Sets shop_name
     *
     * @param string|null $shop_name The name of the shop. Cannot be null.
     *
     * @return self
     */
    public function setShopName($shop_name)
    {
        if (is_null($shop_name)) {
            throw new \InvalidArgumentException('non-nullable shop_name cannot be null');
        }
        $this->container['shop_name'] = $shop_name;

        return $this;
    }

    /**
     * Gets web_site
     *
     * @return string|null
     */
    public function getWebSite()
    {
        return $this->container['web_site'];
    }

    /**
     * Sets web_site
     *
     * @param string|null $web_site Website of the shop. Nullable.
     *
     * @return self
     */
    public function setWebSite($web_site)
    {
        if (is_null($web_site)) {
            throw new \InvalidArgumentException('non-nullable web_site cannot be null');
        }
        $this->container['web_site'] = $web_site;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


