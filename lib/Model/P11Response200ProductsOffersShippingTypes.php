<?php
/**
 * P11Response200ProductsOffersShippingTypes
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  cbdesk\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mirakl Marketplace APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest-release
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace cbdesk\Mirakl\Model;

use \ArrayAccess;
use \cbdesk\Mirakl\ObjectSerializer;

/**
 * P11Response200ProductsOffersShippingTypes Class Doc Comment
 *
 * @category Class
 * @package  cbdesk\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class P11Response200ProductsOffersShippingTypes implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'P11_Response_200_Products_Offers_ShippingTypes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'code' => 'string',
        'cut_off_next_date' => '\DateTime',
        'cut_off_time' => 'string',
        'delivery_time' => '\cbdesk\Mirakl\Model\P11Response200ProductsOffersShippingTypesDeliveryTime',
        'label' => 'string',
        'shipping_deadline' => '\DateTime',
        'shipping_price_type' => 'string',
        'shipping_price_unit' => 'float',
        'shipping_zone_code' => 'string',
        'shipping_zone_label' => 'string',
        'standard_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'code' => null,
        'cut_off_next_date' => 'date-time',
        'cut_off_time' => 'time',
        'delivery_time' => null,
        'label' => null,
        'shipping_deadline' => 'date-time',
        'shipping_price_type' => null,
        'shipping_price_unit' => null,
        'shipping_zone_code' => null,
        'shipping_zone_label' => null,
        'standard_code' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'code' => false,
        'cut_off_next_date' => false,
        'cut_off_time' => false,
        'delivery_time' => false,
        'label' => false,
        'shipping_deadline' => false,
        'shipping_price_type' => false,
        'shipping_price_unit' => false,
        'shipping_zone_code' => false,
        'shipping_zone_label' => false,
        'standard_code' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'code' => 'code',
        'cut_off_next_date' => 'cut_off_next_date',
        'cut_off_time' => 'cut_off_time',
        'delivery_time' => 'delivery_time',
        'label' => 'label',
        'shipping_deadline' => 'shipping_deadline',
        'shipping_price_type' => 'shipping_price_type',
        'shipping_price_unit' => 'shipping_price_unit',
        'shipping_zone_code' => 'shipping_zone_code',
        'shipping_zone_label' => 'shipping_zone_label',
        'standard_code' => 'standard_code'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'code' => 'setCode',
        'cut_off_next_date' => 'setCutOffNextDate',
        'cut_off_time' => 'setCutOffTime',
        'delivery_time' => 'setDeliveryTime',
        'label' => 'setLabel',
        'shipping_deadline' => 'setShippingDeadline',
        'shipping_price_type' => 'setShippingPriceType',
        'shipping_price_unit' => 'setShippingPriceUnit',
        'shipping_zone_code' => 'setShippingZoneCode',
        'shipping_zone_label' => 'setShippingZoneLabel',
        'standard_code' => 'setStandardCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'code' => 'getCode',
        'cut_off_next_date' => 'getCutOffNextDate',
        'cut_off_time' => 'getCutOffTime',
        'delivery_time' => 'getDeliveryTime',
        'label' => 'getLabel',
        'shipping_deadline' => 'getShippingDeadline',
        'shipping_price_type' => 'getShippingPriceType',
        'shipping_price_unit' => 'getShippingPriceUnit',
        'shipping_zone_code' => 'getShippingZoneCode',
        'shipping_zone_label' => 'getShippingZoneLabel',
        'standard_code' => 'getStandardCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('code', $data ?? [], null);
        $this->setIfExists('cut_off_next_date', $data ?? [], null);
        $this->setIfExists('cut_off_time', $data ?? [], null);
        $this->setIfExists('delivery_time', $data ?? [], null);
        $this->setIfExists('label', $data ?? [], null);
        $this->setIfExists('shipping_deadline', $data ?? [], null);
        $this->setIfExists('shipping_price_type', $data ?? [], null);
        $this->setIfExists('shipping_price_unit', $data ?? [], null);
        $this->setIfExists('shipping_zone_code', $data ?? [], null);
        $this->setIfExists('shipping_zone_label', $data ?? [], null);
        $this->setIfExists('standard_code', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets code
     *
     * @return string|null
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string|null $code Shipping type code
     *
     * @return self
     */
    public function setCode($code)
    {
        if (is_null($code)) {
            throw new \InvalidArgumentException('non-nullable code cannot be null');
        }
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets cut_off_next_date
     *
     * @return \DateTime|null
     */
    public function getCutOffNextDate()
    {
        return $this->container['cut_off_next_date'];
    }

    /**
     * Sets cut_off_next_date
     *
     * @param \DateTime|null $cut_off_next_date Next cutoff date
     *
     * @return self
     */
    public function setCutOffNextDate($cut_off_next_date)
    {
        if (is_null($cut_off_next_date)) {
            throw new \InvalidArgumentException('non-nullable cut_off_next_date cannot be null');
        }
        $this->container['cut_off_next_date'] = $cut_off_next_date;

        return $this;
    }

    /**
     * Gets cut_off_time
     *
     * @return string|null
     */
    public function getCutOffTime()
    {
        return $this->container['cut_off_time'];
    }

    /**
     * Sets cut_off_time
     *
     * @param string|null $cut_off_time Shipping type Cutoff time
     *
     * @return self
     */
    public function setCutOffTime($cut_off_time)
    {
        if (is_null($cut_off_time)) {
            throw new \InvalidArgumentException('non-nullable cut_off_time cannot be null');
        }
        $this->container['cut_off_time'] = $cut_off_time;

        return $this;
    }

    /**
     * Gets delivery_time
     *
     * @return \cbdesk\Mirakl\Model\P11Response200ProductsOffersShippingTypesDeliveryTime|null
     */
    public function getDeliveryTime()
    {
        return $this->container['delivery_time'];
    }

    /**
     * Sets delivery_time
     *
     * @param \cbdesk\Mirakl\Model\P11Response200ProductsOffersShippingTypesDeliveryTime|null $delivery_time delivery_time
     *
     * @return self
     */
    public function setDeliveryTime($delivery_time)
    {
        if (is_null($delivery_time)) {
            throw new \InvalidArgumentException('non-nullable delivery_time cannot be null');
        }
        $this->container['delivery_time'] = $delivery_time;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string|null
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string|null $label Shipping type label
     *
     * @return self
     */
    public function setLabel($label)
    {
        if (is_null($label)) {
            throw new \InvalidArgumentException('non-nullable label cannot be null');
        }
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets shipping_deadline
     *
     * @return \DateTime|null
     */
    public function getShippingDeadline()
    {
        return $this->container['shipping_deadline'];
    }

    /**
     * Sets shipping_deadline
     *
     * @param \DateTime|null $shipping_deadline Estimated shipping date, that includes business closing days and cut-off configured on the platform. Add the earliest and latest delivery times to calculate the estimated delivery date to customers
     *
     * @return self
     */
    public function setShippingDeadline($shipping_deadline)
    {
        if (is_null($shipping_deadline)) {
            throw new \InvalidArgumentException('non-nullable shipping_deadline cannot be null');
        }
        $this->container['shipping_deadline'] = $shipping_deadline;

        return $this;
    }

    /**
     * Gets shipping_price_type
     *
     * @return string|null
     */
    public function getShippingPriceType()
    {
        return $this->container['shipping_price_type'];
    }

    /**
     * Sets shipping_price_type
     *
     * @param string|null $shipping_price_type Shipping price type of the offer for a given zone method
     *
     * @return self
     */
    public function setShippingPriceType($shipping_price_type)
    {
        if (is_null($shipping_price_type)) {
            throw new \InvalidArgumentException('non-nullable shipping_price_type cannot be null');
        }
        $this->container['shipping_price_type'] = $shipping_price_type;

        return $this;
    }

    /**
     * Gets shipping_price_unit
     *
     * @return float|null
     */
    public function getShippingPriceUnit()
    {
        return $this->container['shipping_price_unit'];
    }

    /**
     * Sets shipping_price_unit
     *
     * @param float|null $shipping_price_unit Shipping price of the offer
     *
     * @return self
     */
    public function setShippingPriceUnit($shipping_price_unit)
    {
        if (is_null($shipping_price_unit)) {
            throw new \InvalidArgumentException('non-nullable shipping_price_unit cannot be null');
        }
        $this->container['shipping_price_unit'] = $shipping_price_unit;

        return $this;
    }

    /**
     * Gets shipping_zone_code
     *
     * @return string|null
     */
    public function getShippingZoneCode()
    {
        return $this->container['shipping_zone_code'];
    }

    /**
     * Sets shipping_zone_code
     *
     * @param string|null $shipping_zone_code Shipping zone code
     *
     * @return self
     */
    public function setShippingZoneCode($shipping_zone_code)
    {
        if (is_null($shipping_zone_code)) {
            throw new \InvalidArgumentException('non-nullable shipping_zone_code cannot be null');
        }
        $this->container['shipping_zone_code'] = $shipping_zone_code;

        return $this;
    }

    /**
     * Gets shipping_zone_label
     *
     * @return string|null
     */
    public function getShippingZoneLabel()
    {
        return $this->container['shipping_zone_label'];
    }

    /**
     * Sets shipping_zone_label
     *
     * @param string|null $shipping_zone_label Shipping zone label
     *
     * @return self
     */
    public function setShippingZoneLabel($shipping_zone_label)
    {
        if (is_null($shipping_zone_label)) {
            throw new \InvalidArgumentException('non-nullable shipping_zone_label cannot be null');
        }
        $this->container['shipping_zone_label'] = $shipping_zone_label;

        return $this;
    }

    /**
     * Gets standard_code
     *
     * @return string|null
     */
    public function getStandardCode()
    {
        return $this->container['standard_code'];
    }

    /**
     * Sets standard_code
     *
     * @param string|null $standard_code Shipping type standard code
     *
     * @return self
     */
    public function setStandardCode($standard_code)
    {
        if (is_null($standard_code)) {
            throw new \InvalidArgumentException('non-nullable standard_code cannot be null');
        }
        $this->container['standard_code'] = $standard_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


