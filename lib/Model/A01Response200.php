<?php
/**
 * A01Response200
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  cbdesk\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mirakl Marketplace APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest-release
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace cbdesk\Mirakl\Model;

use \ArrayAccess;
use \cbdesk\Mirakl\ObjectSerializer;

/**
 * A01Response200 Class Doc Comment
 *
 * @category Class
 * @package  cbdesk\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class A01Response200 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'A01_Response_200';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'applicable_taxes' => '\cbdesk\Mirakl\Model\A01Response200ApplicableTaxes[]',
        'approval_delay' => 'int',
        'approval_rate' => 'float',
        'banner' => 'string',
        'billing_info' => '\cbdesk\Mirakl\Model\A01Response200BillingInfo',
        'channels' => 'string[]',
        'closed_from' => '\DateTime',
        'closed_to' => '\DateTime',
        'contact_informations' => '\cbdesk\Mirakl\Model\A01Response200ContactInformations',
        'currency_iso_code' => 'string',
        'date_created' => '\DateTime',
        'default_billing_information' => '\cbdesk\Mirakl\Model\A01Response200DefaultBillingInformation',
        'description' => 'string',
        'domains' => 'string[]',
        'evaluations_count' => 'int',
        'free_shipping' => 'bool',
        'grade' => 'float',
        'is_professional' => 'bool',
        'kyc' => '\cbdesk\Mirakl\Model\A01Response200Kyc',
        'last_updated_date' => '\DateTime',
        'logo' => 'string',
        'model' => 'string',
        'offers_count' => 'int',
        'order_messages_response_delay' => 'int',
        'orders_count' => 'int',
        'payment_details' => '\cbdesk\Mirakl\Model\A01Response200PaymentDetails',
        'payment_info' => '\cbdesk\Mirakl\Model\A01Response200PaymentInfo',
        'payment_method_mandatory' => 'bool',
        'premium' => 'bool',
        'pro_details' => '\cbdesk\Mirakl\Model\A01Response200ProDetails',
        'producer_identifiers' => '\cbdesk\Mirakl\Model\A01Response200ProducerIdentifiers[]',
        'recycling_policy' => 'string',
        'return_policy' => 'string',
        'shipping' => '\cbdesk\Mirakl\Model\A01Response200Shipping',
        'shipping_country' => 'string',
        'shipping_types' => 'string[]',
        'shipping_zones' => 'string[]',
        'shippings' => '\cbdesk\Mirakl\Model\A01Response200Shippings[]',
        'shop_additional_fields' => '\cbdesk\Mirakl\Model\A01Response200ShopAdditionalFields[]',
        'shop_id' => 'int',
        'shop_name' => 'string',
        'shop_state' => 'string',
        'specific_billing_informations' => '\cbdesk\Mirakl\Model\A01Response200SpecificBillingInformations[]',
        'suspension_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'applicable_taxes' => null,
        'approval_delay' => 'int64',
        'approval_rate' => null,
        'banner' => null,
        'billing_info' => null,
        'channels' => null,
        'closed_from' => 'date-time',
        'closed_to' => 'date-time',
        'contact_informations' => null,
        'currency_iso_code' => null,
        'date_created' => 'date-time',
        'default_billing_information' => null,
        'description' => null,
        'domains' => null,
        'evaluations_count' => 'int64',
        'free_shipping' => null,
        'grade' => null,
        'is_professional' => null,
        'kyc' => null,
        'last_updated_date' => 'date-time',
        'logo' => null,
        'model' => null,
        'offers_count' => 'int64',
        'order_messages_response_delay' => 'int64',
        'orders_count' => 'int64',
        'payment_details' => null,
        'payment_info' => null,
        'payment_method_mandatory' => null,
        'premium' => null,
        'pro_details' => null,
        'producer_identifiers' => null,
        'recycling_policy' => null,
        'return_policy' => null,
        'shipping' => null,
        'shipping_country' => null,
        'shipping_types' => null,
        'shipping_zones' => null,
        'shippings' => null,
        'shop_additional_fields' => null,
        'shop_id' => 'int64',
        'shop_name' => null,
        'shop_state' => null,
        'specific_billing_informations' => null,
        'suspension_type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'applicable_taxes' => false,
        'approval_delay' => false,
        'approval_rate' => false,
        'banner' => false,
        'billing_info' => false,
        'channels' => false,
        'closed_from' => false,
        'closed_to' => false,
        'contact_informations' => false,
        'currency_iso_code' => false,
        'date_created' => false,
        'default_billing_information' => false,
        'description' => false,
        'domains' => false,
        'evaluations_count' => false,
        'free_shipping' => false,
        'grade' => false,
        'is_professional' => false,
        'kyc' => false,
        'last_updated_date' => false,
        'logo' => false,
        'model' => false,
        'offers_count' => false,
        'order_messages_response_delay' => false,
        'orders_count' => false,
        'payment_details' => false,
        'payment_info' => false,
        'payment_method_mandatory' => false,
        'premium' => false,
        'pro_details' => false,
        'producer_identifiers' => false,
        'recycling_policy' => false,
        'return_policy' => false,
        'shipping' => false,
        'shipping_country' => false,
        'shipping_types' => false,
        'shipping_zones' => false,
        'shippings' => false,
        'shop_additional_fields' => false,
        'shop_id' => false,
        'shop_name' => false,
        'shop_state' => false,
        'specific_billing_informations' => false,
        'suspension_type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'applicable_taxes' => 'applicable_taxes',
        'approval_delay' => 'approval_delay',
        'approval_rate' => 'approval_rate',
        'banner' => 'banner',
        'billing_info' => 'billing_info',
        'channels' => 'channels',
        'closed_from' => 'closed_from',
        'closed_to' => 'closed_to',
        'contact_informations' => 'contact_informations',
        'currency_iso_code' => 'currency_iso_code',
        'date_created' => 'date_created',
        'default_billing_information' => 'default_billing_information',
        'description' => 'description',
        'domains' => 'domains',
        'evaluations_count' => 'evaluations_count',
        'free_shipping' => 'free_shipping',
        'grade' => 'grade',
        'is_professional' => 'is_professional',
        'kyc' => 'kyc',
        'last_updated_date' => 'last_updated_date',
        'logo' => 'logo',
        'model' => 'model',
        'offers_count' => 'offers_count',
        'order_messages_response_delay' => 'order_messages_response_delay',
        'orders_count' => 'orders_count',
        'payment_details' => 'payment_details',
        'payment_info' => 'payment_info',
        'payment_method_mandatory' => 'payment_method_mandatory',
        'premium' => 'premium',
        'pro_details' => 'pro_details',
        'producer_identifiers' => 'producer_identifiers',
        'recycling_policy' => 'recycling_policy',
        'return_policy' => 'return_policy',
        'shipping' => 'shipping',
        'shipping_country' => 'shipping_country',
        'shipping_types' => 'shipping_types',
        'shipping_zones' => 'shipping_zones',
        'shippings' => 'shippings',
        'shop_additional_fields' => 'shop_additional_fields',
        'shop_id' => 'shop_id',
        'shop_name' => 'shop_name',
        'shop_state' => 'shop_state',
        'specific_billing_informations' => 'specific_billing_informations',
        'suspension_type' => 'suspension_type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'applicable_taxes' => 'setApplicableTaxes',
        'approval_delay' => 'setApprovalDelay',
        'approval_rate' => 'setApprovalRate',
        'banner' => 'setBanner',
        'billing_info' => 'setBillingInfo',
        'channels' => 'setChannels',
        'closed_from' => 'setClosedFrom',
        'closed_to' => 'setClosedTo',
        'contact_informations' => 'setContactInformations',
        'currency_iso_code' => 'setCurrencyIsoCode',
        'date_created' => 'setDateCreated',
        'default_billing_information' => 'setDefaultBillingInformation',
        'description' => 'setDescription',
        'domains' => 'setDomains',
        'evaluations_count' => 'setEvaluationsCount',
        'free_shipping' => 'setFreeShipping',
        'grade' => 'setGrade',
        'is_professional' => 'setIsProfessional',
        'kyc' => 'setKyc',
        'last_updated_date' => 'setLastUpdatedDate',
        'logo' => 'setLogo',
        'model' => 'setModel',
        'offers_count' => 'setOffersCount',
        'order_messages_response_delay' => 'setOrderMessagesResponseDelay',
        'orders_count' => 'setOrdersCount',
        'payment_details' => 'setPaymentDetails',
        'payment_info' => 'setPaymentInfo',
        'payment_method_mandatory' => 'setPaymentMethodMandatory',
        'premium' => 'setPremium',
        'pro_details' => 'setProDetails',
        'producer_identifiers' => 'setProducerIdentifiers',
        'recycling_policy' => 'setRecyclingPolicy',
        'return_policy' => 'setReturnPolicy',
        'shipping' => 'setShipping',
        'shipping_country' => 'setShippingCountry',
        'shipping_types' => 'setShippingTypes',
        'shipping_zones' => 'setShippingZones',
        'shippings' => 'setShippings',
        'shop_additional_fields' => 'setShopAdditionalFields',
        'shop_id' => 'setShopId',
        'shop_name' => 'setShopName',
        'shop_state' => 'setShopState',
        'specific_billing_informations' => 'setSpecificBillingInformations',
        'suspension_type' => 'setSuspensionType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'applicable_taxes' => 'getApplicableTaxes',
        'approval_delay' => 'getApprovalDelay',
        'approval_rate' => 'getApprovalRate',
        'banner' => 'getBanner',
        'billing_info' => 'getBillingInfo',
        'channels' => 'getChannels',
        'closed_from' => 'getClosedFrom',
        'closed_to' => 'getClosedTo',
        'contact_informations' => 'getContactInformations',
        'currency_iso_code' => 'getCurrencyIsoCode',
        'date_created' => 'getDateCreated',
        'default_billing_information' => 'getDefaultBillingInformation',
        'description' => 'getDescription',
        'domains' => 'getDomains',
        'evaluations_count' => 'getEvaluationsCount',
        'free_shipping' => 'getFreeShipping',
        'grade' => 'getGrade',
        'is_professional' => 'getIsProfessional',
        'kyc' => 'getKyc',
        'last_updated_date' => 'getLastUpdatedDate',
        'logo' => 'getLogo',
        'model' => 'getModel',
        'offers_count' => 'getOffersCount',
        'order_messages_response_delay' => 'getOrderMessagesResponseDelay',
        'orders_count' => 'getOrdersCount',
        'payment_details' => 'getPaymentDetails',
        'payment_info' => 'getPaymentInfo',
        'payment_method_mandatory' => 'getPaymentMethodMandatory',
        'premium' => 'getPremium',
        'pro_details' => 'getProDetails',
        'producer_identifiers' => 'getProducerIdentifiers',
        'recycling_policy' => 'getRecyclingPolicy',
        'return_policy' => 'getReturnPolicy',
        'shipping' => 'getShipping',
        'shipping_country' => 'getShippingCountry',
        'shipping_types' => 'getShippingTypes',
        'shipping_zones' => 'getShippingZones',
        'shippings' => 'getShippings',
        'shop_additional_fields' => 'getShopAdditionalFields',
        'shop_id' => 'getShopId',
        'shop_name' => 'getShopName',
        'shop_state' => 'getShopState',
        'specific_billing_informations' => 'getSpecificBillingInformations',
        'suspension_type' => 'getSuspensionType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('applicable_taxes', $data ?? [], null);
        $this->setIfExists('approval_delay', $data ?? [], null);
        $this->setIfExists('approval_rate', $data ?? [], null);
        $this->setIfExists('banner', $data ?? [], null);
        $this->setIfExists('billing_info', $data ?? [], null);
        $this->setIfExists('channels', $data ?? [], null);
        $this->setIfExists('closed_from', $data ?? [], null);
        $this->setIfExists('closed_to', $data ?? [], null);
        $this->setIfExists('contact_informations', $data ?? [], null);
        $this->setIfExists('currency_iso_code', $data ?? [], null);
        $this->setIfExists('date_created', $data ?? [], null);
        $this->setIfExists('default_billing_information', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('domains', $data ?? [], null);
        $this->setIfExists('evaluations_count', $data ?? [], null);
        $this->setIfExists('free_shipping', $data ?? [], null);
        $this->setIfExists('grade', $data ?? [], null);
        $this->setIfExists('is_professional', $data ?? [], null);
        $this->setIfExists('kyc', $data ?? [], null);
        $this->setIfExists('last_updated_date', $data ?? [], null);
        $this->setIfExists('logo', $data ?? [], null);
        $this->setIfExists('model', $data ?? [], null);
        $this->setIfExists('offers_count', $data ?? [], null);
        $this->setIfExists('order_messages_response_delay', $data ?? [], null);
        $this->setIfExists('orders_count', $data ?? [], null);
        $this->setIfExists('payment_details', $data ?? [], null);
        $this->setIfExists('payment_info', $data ?? [], null);
        $this->setIfExists('payment_method_mandatory', $data ?? [], null);
        $this->setIfExists('premium', $data ?? [], null);
        $this->setIfExists('pro_details', $data ?? [], null);
        $this->setIfExists('producer_identifiers', $data ?? [], null);
        $this->setIfExists('recycling_policy', $data ?? [], null);
        $this->setIfExists('return_policy', $data ?? [], null);
        $this->setIfExists('shipping', $data ?? [], null);
        $this->setIfExists('shipping_country', $data ?? [], null);
        $this->setIfExists('shipping_types', $data ?? [], null);
        $this->setIfExists('shipping_zones', $data ?? [], null);
        $this->setIfExists('shippings', $data ?? [], null);
        $this->setIfExists('shop_additional_fields', $data ?? [], null);
        $this->setIfExists('shop_id', $data ?? [], null);
        $this->setIfExists('shop_name', $data ?? [], null);
        $this->setIfExists('shop_state', $data ?? [], null);
        $this->setIfExists('specific_billing_informations', $data ?? [], null);
        $this->setIfExists('suspension_type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['recycling_policy']) && (mb_strlen($this->container['recycling_policy']) > 5000)) {
            $invalidProperties[] = "invalid value for 'recycling_policy', the character length must be smaller than or equal to 5000.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets applicable_taxes
     *
     * @return \cbdesk\Mirakl\Model\A01Response200ApplicableTaxes[]|null
     */
    public function getApplicableTaxes()
    {
        return $this->container['applicable_taxes'];
    }

    /**
     * Sets applicable_taxes
     *
     * @param \cbdesk\Mirakl\Model\A01Response200ApplicableTaxes[]|null $applicable_taxes List of the shop's applicable taxes
     *
     * @return self
     */
    public function setApplicableTaxes($applicable_taxes)
    {
        if (is_null($applicable_taxes)) {
            throw new \InvalidArgumentException('non-nullable applicable_taxes cannot be null');
        }
        $this->container['applicable_taxes'] = $applicable_taxes;

        return $this;
    }

    /**
     * Gets approval_delay
     *
     * @return int|null
     */
    public function getApprovalDelay()
    {
        return $this->container['approval_delay'];
    }

    /**
     * Sets approval_delay
     *
     * @param int|null $approval_delay Average time for a shop to accept or refuse an order (in seconds)
     *
     * @return self
     */
    public function setApprovalDelay($approval_delay)
    {
        if (is_null($approval_delay)) {
            throw new \InvalidArgumentException('non-nullable approval_delay cannot be null');
        }
        $this->container['approval_delay'] = $approval_delay;

        return $this;
    }

    /**
     * Gets approval_rate
     *
     * @return float|null
     */
    public function getApprovalRate()
    {
        return $this->container['approval_rate'];
    }

    /**
     * Sets approval_rate
     *
     * @param float|null $approval_rate Rate of accepted orders
     *
     * @return self
     */
    public function setApprovalRate($approval_rate)
    {
        if (is_null($approval_rate)) {
            throw new \InvalidArgumentException('non-nullable approval_rate cannot be null');
        }
        $this->container['approval_rate'] = $approval_rate;

        return $this;
    }

    /**
     * Gets banner
     *
     * @return string|null
     */
    public function getBanner()
    {
        return $this->container['banner'];
    }

    /**
     * Sets banner
     *
     * @param string|null $banner Url of the shop's banner image
     *
     * @return self
     */
    public function setBanner($banner)
    {
        if (is_null($banner)) {
            throw new \InvalidArgumentException('non-nullable banner cannot be null');
        }
        $this->container['banner'] = $banner;

        return $this;
    }

    /**
     * Gets billing_info
     *
     * @return \cbdesk\Mirakl\Model\A01Response200BillingInfo|null
     * @deprecated
     */
    public function getBillingInfo()
    {
        return $this->container['billing_info'];
    }

    /**
     * Sets billing_info
     *
     * @param \cbdesk\Mirakl\Model\A01Response200BillingInfo|null $billing_info billing_info
     *
     * @return self
     * @deprecated
     */
    public function setBillingInfo($billing_info)
    {
        if (is_null($billing_info)) {
            throw new \InvalidArgumentException('non-nullable billing_info cannot be null');
        }
        $this->container['billing_info'] = $billing_info;

        return $this;
    }

    /**
     * Gets channels
     *
     * @return string[]|null
     */
    public function getChannels()
    {
        return $this->container['channels'];
    }

    /**
     * Sets channels
     *
     * @param string[]|null $channels List of the channel codes associated to the shop
     *
     * @return self
     */
    public function setChannels($channels)
    {
        if (is_null($channels)) {
            throw new \InvalidArgumentException('non-nullable channels cannot be null');
        }
        $this->container['channels'] = $channels;

        return $this;
    }

    /**
     * Gets closed_from
     *
     * @return \DateTime|null
     */
    public function getClosedFrom()
    {
        return $this->container['closed_from'];
    }

    /**
     * Sets closed_from
     *
     * @param \DateTime|null $closed_from The start date of the closing of the shop
     *
     * @return self
     */
    public function setClosedFrom($closed_from)
    {
        if (is_null($closed_from)) {
            throw new \InvalidArgumentException('non-nullable closed_from cannot be null');
        }
        $this->container['closed_from'] = $closed_from;

        return $this;
    }

    /**
     * Gets closed_to
     *
     * @return \DateTime|null
     */
    public function getClosedTo()
    {
        return $this->container['closed_to'];
    }

    /**
     * Sets closed_to
     *
     * @param \DateTime|null $closed_to The end date of the closing of the shop
     *
     * @return self
     */
    public function setClosedTo($closed_to)
    {
        if (is_null($closed_to)) {
            throw new \InvalidArgumentException('non-nullable closed_to cannot be null');
        }
        $this->container['closed_to'] = $closed_to;

        return $this;
    }

    /**
     * Gets contact_informations
     *
     * @return \cbdesk\Mirakl\Model\A01Response200ContactInformations|null
     */
    public function getContactInformations()
    {
        return $this->container['contact_informations'];
    }

    /**
     * Sets contact_informations
     *
     * @param \cbdesk\Mirakl\Model\A01Response200ContactInformations|null $contact_informations contact_informations
     *
     * @return self
     */
    public function setContactInformations($contact_informations)
    {
        if (is_null($contact_informations)) {
            throw new \InvalidArgumentException('non-nullable contact_informations cannot be null');
        }
        $this->container['contact_informations'] = $contact_informations;

        return $this;
    }

    /**
     * Gets currency_iso_code
     *
     * @return string|null
     */
    public function getCurrencyIsoCode()
    {
        return $this->container['currency_iso_code'];
    }

    /**
     * Sets currency_iso_code
     *
     * @param string|null $currency_iso_code The currency of the shop (iso format)
     *
     * @return self
     */
    public function setCurrencyIsoCode($currency_iso_code)
    {
        if (is_null($currency_iso_code)) {
            throw new \InvalidArgumentException('non-nullable currency_iso_code cannot be null');
        }
        $this->container['currency_iso_code'] = $currency_iso_code;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return \DateTime|null
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param \DateTime|null $date_created Creation date of the shop
     *
     * @return self
     */
    public function setDateCreated($date_created)
    {
        if (is_null($date_created)) {
            throw new \InvalidArgumentException('non-nullable date_created cannot be null');
        }
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets default_billing_information
     *
     * @return \cbdesk\Mirakl\Model\A01Response200DefaultBillingInformation|null
     */
    public function getDefaultBillingInformation()
    {
        return $this->container['default_billing_information'];
    }

    /**
     * Sets default_billing_information
     *
     * @param \cbdesk\Mirakl\Model\A01Response200DefaultBillingInformation|null $default_billing_information default_billing_information
     *
     * @return self
     */
    public function setDefaultBillingInformation($default_billing_information)
    {
        if (is_null($default_billing_information)) {
            throw new \InvalidArgumentException('non-nullable default_billing_information cannot be null');
        }
        $this->container['default_billing_information'] = $default_billing_information;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description The description of the shop, max length: 3000 characters.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets domains
     *
     * @return string[]|null
     */
    public function getDomains()
    {
        return $this->container['domains'];
    }

    /**
     * Sets domains
     *
     * @param string[]|null $domains Shop domains
     *
     * @return self
     */
    public function setDomains($domains)
    {
        if (is_null($domains)) {
            throw new \InvalidArgumentException('non-nullable domains cannot be null');
        }
        $this->container['domains'] = $domains;

        return $this;
    }

    /**
     * Gets evaluations_count
     *
     * @return int|null
     */
    public function getEvaluationsCount()
    {
        return $this->container['evaluations_count'];
    }

    /**
     * Sets evaluations_count
     *
     * @param int|null $evaluations_count Number of evaluations for the shop
     *
     * @return self
     */
    public function setEvaluationsCount($evaluations_count)
    {
        if (is_null($evaluations_count)) {
            throw new \InvalidArgumentException('non-nullable evaluations_count cannot be null');
        }
        $this->container['evaluations_count'] = $evaluations_count;

        return $this;
    }

    /**
     * Gets free_shipping
     *
     * @return bool|null
     */
    public function getFreeShipping()
    {
        return $this->container['free_shipping'];
    }

    /**
     * Sets free_shipping
     *
     * @param bool|null $free_shipping Whether or not this shop offers free shipping to customers
     *
     * @return self
     */
    public function setFreeShipping($free_shipping)
    {
        if (is_null($free_shipping)) {
            throw new \InvalidArgumentException('non-nullable free_shipping cannot be null');
        }
        $this->container['free_shipping'] = $free_shipping;

        return $this;
    }

    /**
     * Gets grade
     *
     * @return float|null
     */
    public function getGrade()
    {
        return $this->container['grade'];
    }

    /**
     * Sets grade
     *
     * @param float|null $grade Global grade of the shop
     *
     * @return self
     */
    public function setGrade($grade)
    {
        if (is_null($grade)) {
            throw new \InvalidArgumentException('non-nullable grade cannot be null');
        }
        $this->container['grade'] = $grade;

        return $this;
    }

    /**
     * Gets is_professional
     *
     * @return bool|null
     */
    public function getIsProfessional()
    {
        return $this->container['is_professional'];
    }

    /**
     * Sets is_professional
     *
     * @param bool|null $is_professional Whether or not the shop is professional
     *
     * @return self
     */
    public function setIsProfessional($is_professional)
    {
        if (is_null($is_professional)) {
            throw new \InvalidArgumentException('non-nullable is_professional cannot be null');
        }
        $this->container['is_professional'] = $is_professional;

        return $this;
    }

    /**
     * Gets kyc
     *
     * @return \cbdesk\Mirakl\Model\A01Response200Kyc|null
     */
    public function getKyc()
    {
        return $this->container['kyc'];
    }

    /**
     * Sets kyc
     *
     * @param \cbdesk\Mirakl\Model\A01Response200Kyc|null $kyc kyc
     *
     * @return self
     */
    public function setKyc($kyc)
    {
        if (is_null($kyc)) {
            throw new \InvalidArgumentException('non-nullable kyc cannot be null');
        }
        $this->container['kyc'] = $kyc;

        return $this;
    }

    /**
     * Gets last_updated_date
     *
     * @return \DateTime|null
     */
    public function getLastUpdatedDate()
    {
        return $this->container['last_updated_date'];
    }

    /**
     * Sets last_updated_date
     *
     * @param \DateTime|null $last_updated_date The date of the last modification of the shop. Note: The following statistics fields do not update the <code>last_updated</code> date: <ul>     <li><code>orders_count</code></li>     <li><code>offers_count</code></li>     <li><code>evaluations_count</code></li>     <li><code>grade</code></li>     <li><code>approval_rate</code></li>     <li><code>approval_delay</code></li>     <li><code>order_messages_response_delay</code></li> </ul>
     *
     * @return self
     */
    public function setLastUpdatedDate($last_updated_date)
    {
        if (is_null($last_updated_date)) {
            throw new \InvalidArgumentException('non-nullable last_updated_date cannot be null');
        }
        $this->container['last_updated_date'] = $last_updated_date;

        return $this;
    }

    /**
     * Gets logo
     *
     * @return string|null
     */
    public function getLogo()
    {
        return $this->container['logo'];
    }

    /**
     * Sets logo
     *
     * @param string|null $logo Url of the shop's logo image
     *
     * @return self
     */
    public function setLogo($logo)
    {
        if (is_null($logo)) {
            throw new \InvalidArgumentException('non-nullable logo cannot be null');
        }
        $this->container['logo'] = $logo;

        return $this;
    }

    /**
     * Gets model
     *
     * @return string|null
     */
    public function getModel()
    {
        return $this->container['model'];
    }

    /**
     * Sets model
     *
     * @param string|null $model Shop platform model, current possible values : <ul>     <li><code>MARKETPLACE</code></li>     <li><code>DROPSHIP</code></li>     <li><code>ONE_CREDITOR</code></li> </ul>
     *
     * @return self
     */
    public function setModel($model)
    {
        if (is_null($model)) {
            throw new \InvalidArgumentException('non-nullable model cannot be null');
        }
        $this->container['model'] = $model;

        return $this;
    }

    /**
     * Gets offers_count
     *
     * @return int|null
     */
    public function getOffersCount()
    {
        return $this->container['offers_count'];
    }

    /**
     * Sets offers_count
     *
     * @param int|null $offers_count Total count of active offers of the shop
     *
     * @return self
     */
    public function setOffersCount($offers_count)
    {
        if (is_null($offers_count)) {
            throw new \InvalidArgumentException('non-nullable offers_count cannot be null');
        }
        $this->container['offers_count'] = $offers_count;

        return $this;
    }

    /**
     * Gets order_messages_response_delay
     *
     * @return int|null
     */
    public function getOrderMessagesResponseDelay()
    {
        return $this->container['order_messages_response_delay'];
    }

    /**
     * Sets order_messages_response_delay
     *
     * @param int|null $order_messages_response_delay Average time for a shop to answer to an order message (in seconds)
     *
     * @return self
     */
    public function setOrderMessagesResponseDelay($order_messages_response_delay)
    {
        if (is_null($order_messages_response_delay)) {
            throw new \InvalidArgumentException('non-nullable order_messages_response_delay cannot be null');
        }
        $this->container['order_messages_response_delay'] = $order_messages_response_delay;

        return $this;
    }

    /**
     * Gets orders_count
     *
     * @return int|null
     */
    public function getOrdersCount()
    {
        return $this->container['orders_count'];
    }

    /**
     * Sets orders_count
     *
     * @param int|null $orders_count Total count of debited orders (or if Pay on Delivery, accepted) of the shop
     *
     * @return self
     */
    public function setOrdersCount($orders_count)
    {
        if (is_null($orders_count)) {
            throw new \InvalidArgumentException('non-nullable orders_count cannot be null');
        }
        $this->container['orders_count'] = $orders_count;

        return $this;
    }

    /**
     * Gets payment_details
     *
     * @return \cbdesk\Mirakl\Model\A01Response200PaymentDetails|null
     */
    public function getPaymentDetails()
    {
        return $this->container['payment_details'];
    }

    /**
     * Sets payment_details
     *
     * @param \cbdesk\Mirakl\Model\A01Response200PaymentDetails|null $payment_details payment_details
     *
     * @return self
     */
    public function setPaymentDetails($payment_details)
    {
        if (is_null($payment_details)) {
            throw new \InvalidArgumentException('non-nullable payment_details cannot be null');
        }
        $this->container['payment_details'] = $payment_details;

        return $this;
    }

    /**
     * Gets payment_info
     *
     * @return \cbdesk\Mirakl\Model\A01Response200PaymentInfo|null
     */
    public function getPaymentInfo()
    {
        return $this->container['payment_info'];
    }

    /**
     * Sets payment_info
     *
     * @param \cbdesk\Mirakl\Model\A01Response200PaymentInfo|null $payment_info payment_info
     *
     * @return self
     */
    public function setPaymentInfo($payment_info)
    {
        if (is_null($payment_info)) {
            throw new \InvalidArgumentException('non-nullable payment_info cannot be null');
        }
        $this->container['payment_info'] = $payment_info;

        return $this;
    }

    /**
     * Gets payment_method_mandatory
     *
     * @return bool|null
     */
    public function getPaymentMethodMandatory()
    {
        return $this->container['payment_method_mandatory'];
    }

    /**
     * Sets payment_method_mandatory
     *
     * @param bool|null $payment_method_mandatory Payment method mandatory
     *
     * @return self
     */
    public function setPaymentMethodMandatory($payment_method_mandatory)
    {
        if (is_null($payment_method_mandatory)) {
            throw new \InvalidArgumentException('non-nullable payment_method_mandatory cannot be null');
        }
        $this->container['payment_method_mandatory'] = $payment_method_mandatory;

        return $this;
    }

    /**
     * Gets premium
     *
     * @return bool|null
     */
    public function getPremium()
    {
        return $this->container['premium'];
    }

    /**
     * Sets premium
     *
     * @param bool|null $premium Whether or not the shop is premium
     *
     * @return self
     */
    public function setPremium($premium)
    {
        if (is_null($premium)) {
            throw new \InvalidArgumentException('non-nullable premium cannot be null');
        }
        $this->container['premium'] = $premium;

        return $this;
    }

    /**
     * Gets pro_details
     *
     * @return \cbdesk\Mirakl\Model\A01Response200ProDetails|null
     * @deprecated
     */
    public function getProDetails()
    {
        return $this->container['pro_details'];
    }

    /**
     * Sets pro_details
     *
     * @param \cbdesk\Mirakl\Model\A01Response200ProDetails|null $pro_details pro_details
     *
     * @return self
     * @deprecated
     */
    public function setProDetails($pro_details)
    {
        if (is_null($pro_details)) {
            throw new \InvalidArgumentException('non-nullable pro_details cannot be null');
        }
        $this->container['pro_details'] = $pro_details;

        return $this;
    }

    /**
     * Gets producer_identifiers
     *
     * @return \cbdesk\Mirakl\Model\A01Response200ProducerIdentifiers[]|null
     */
    public function getProducerIdentifiers()
    {
        return $this->container['producer_identifiers'];
    }

    /**
     * Sets producer_identifiers
     *
     * @param \cbdesk\Mirakl\Model\A01Response200ProducerIdentifiers[]|null $producer_identifiers List of shop’s producer identifiers per Extended Producer Responsibility (EPR) categories. Only available if the operator setting <em>Activate data collection related to circular economy regulations</em> is enabled.
     *
     * @return self
     */
    public function setProducerIdentifiers($producer_identifiers)
    {
        if (is_null($producer_identifiers)) {
            throw new \InvalidArgumentException('non-nullable producer_identifiers cannot be null');
        }
        $this->container['producer_identifiers'] = $producer_identifiers;

        return $this;
    }

    /**
     * Gets recycling_policy
     *
     * @return string|null
     */
    public function getRecyclingPolicy()
    {
        return $this->container['recycling_policy'];
    }

    /**
     * Sets recycling_policy
     *
     * @param string|null $recycling_policy Recycling policy - only available if the operator setting <em>Activate data collection related to circular economy regulations</em> has been enabled.
     *
     * @return self
     */
    public function setRecyclingPolicy($recycling_policy)
    {
        if (is_null($recycling_policy)) {
            throw new \InvalidArgumentException('non-nullable recycling_policy cannot be null');
        }
        if ((mb_strlen($recycling_policy) > 5000)) {
            throw new \InvalidArgumentException('invalid length for $recycling_policy when calling A01Response200., must be smaller than or equal to 5000.');
        }

        $this->container['recycling_policy'] = $recycling_policy;

        return $this;
    }

    /**
     * Gets return_policy
     *
     * @return string|null
     */
    public function getReturnPolicy()
    {
        return $this->container['return_policy'];
    }

    /**
     * Sets return_policy
     *
     * @param string|null $return_policy Terms of restitution, max length: 60000 characters.
     *
     * @return self
     */
    public function setReturnPolicy($return_policy)
    {
        if (is_null($return_policy)) {
            throw new \InvalidArgumentException('non-nullable return_policy cannot be null');
        }
        $this->container['return_policy'] = $return_policy;

        return $this;
    }

    /**
     * Gets shipping
     *
     * @return \cbdesk\Mirakl\Model\A01Response200Shipping|null
     */
    public function getShipping()
    {
        return $this->container['shipping'];
    }

    /**
     * Sets shipping
     *
     * @param \cbdesk\Mirakl\Model\A01Response200Shipping|null $shipping shipping
     *
     * @return self
     */
    public function setShipping($shipping)
    {
        if (is_null($shipping)) {
            throw new \InvalidArgumentException('non-nullable shipping cannot be null');
        }
        $this->container['shipping'] = $shipping;

        return $this;
    }

    /**
     * Gets shipping_country
     *
     * @return string|null
     */
    public function getShippingCountry()
    {
        return $this->container['shipping_country'];
    }

    /**
     * Sets shipping_country
     *
     * @param string|null $shipping_country Code ISO 3166-1 alpha-3 of the shipping country
     *
     * @return self
     */
    public function setShippingCountry($shipping_country)
    {
        if (is_null($shipping_country)) {
            throw new \InvalidArgumentException('non-nullable shipping_country cannot be null');
        }
        $this->container['shipping_country'] = $shipping_country;

        return $this;
    }

    /**
     * Gets shipping_types
     *
     * @return string[]|null
     * @deprecated
     */
    public function getShippingTypes()
    {
        return $this->container['shipping_types'];
    }

    /**
     * Sets shipping_types
     *
     * @param string[]|null $shipping_types List of shipping types of the shop
     *
     * @return self
     * @deprecated
     */
    public function setShippingTypes($shipping_types)
    {
        if (is_null($shipping_types)) {
            throw new \InvalidArgumentException('non-nullable shipping_types cannot be null');
        }
        $this->container['shipping_types'] = $shipping_types;

        return $this;
    }

    /**
     * Gets shipping_zones
     *
     * @return string[]|null
     * @deprecated
     */
    public function getShippingZones()
    {
        return $this->container['shipping_zones'];
    }

    /**
     * Sets shipping_zones
     *
     * @param string[]|null $shipping_zones List of shipping zones of the shop
     *
     * @return self
     * @deprecated
     */
    public function setShippingZones($shipping_zones)
    {
        if (is_null($shipping_zones)) {
            throw new \InvalidArgumentException('non-nullable shipping_zones cannot be null');
        }
        $this->container['shipping_zones'] = $shipping_zones;

        return $this;
    }

    /**
     * Gets shippings
     *
     * @return \cbdesk\Mirakl\Model\A01Response200Shippings[]|null
     */
    public function getShippings()
    {
        return $this->container['shippings'];
    }

    /**
     * Sets shippings
     *
     * @param \cbdesk\Mirakl\Model\A01Response200Shippings[]|null $shippings All the pair shipping zone / shipping type accepted by the shop
     *
     * @return self
     */
    public function setShippings($shippings)
    {
        if (is_null($shippings)) {
            throw new \InvalidArgumentException('non-nullable shippings cannot be null');
        }
        $this->container['shippings'] = $shippings;

        return $this;
    }

    /**
     * Gets shop_additional_fields
     *
     * @return \cbdesk\Mirakl\Model\A01Response200ShopAdditionalFields[]|null
     */
    public function getShopAdditionalFields()
    {
        return $this->container['shop_additional_fields'];
    }

    /**
     * Sets shop_additional_fields
     *
     * @param \cbdesk\Mirakl\Model\A01Response200ShopAdditionalFields[]|null $shop_additional_fields List of additional fields
     *
     * @return self
     */
    public function setShopAdditionalFields($shop_additional_fields)
    {
        if (is_null($shop_additional_fields)) {
            throw new \InvalidArgumentException('non-nullable shop_additional_fields cannot be null');
        }
        $this->container['shop_additional_fields'] = $shop_additional_fields;

        return $this;
    }

    /**
     * Gets shop_id
     *
     * @return int|null
     */
    public function getShopId()
    {
        return $this->container['shop_id'];
    }

    /**
     * Sets shop_id
     *
     * @param int|null $shop_id The identifier of the shop
     *
     * @return self
     */
    public function setShopId($shop_id)
    {
        if (is_null($shop_id)) {
            throw new \InvalidArgumentException('non-nullable shop_id cannot be null');
        }
        $this->container['shop_id'] = $shop_id;

        return $this;
    }

    /**
     * Gets shop_name
     *
     * @return string|null
     */
    public function getShopName()
    {
        return $this->container['shop_name'];
    }

    /**
     * Sets shop_name
     *
     * @param string|null $shop_name The name of the shop
     *
     * @return self
     */
    public function setShopName($shop_name)
    {
        if (is_null($shop_name)) {
            throw new \InvalidArgumentException('non-nullable shop_name cannot be null');
        }
        $this->container['shop_name'] = $shop_name;

        return $this;
    }

    /**
     * Gets shop_state
     *
     * @return string|null
     */
    public function getShopState()
    {
        return $this->container['shop_state'];
    }

    /**
     * Sets shop_state
     *
     * @param string|null $shop_state The state of the shop
     *
     * @return self
     */
    public function setShopState($shop_state)
    {
        if (is_null($shop_state)) {
            throw new \InvalidArgumentException('non-nullable shop_state cannot be null');
        }
        $this->container['shop_state'] = $shop_state;

        return $this;
    }

    /**
     * Gets specific_billing_informations
     *
     * @return \cbdesk\Mirakl\Model\A01Response200SpecificBillingInformations[]|null
     */
    public function getSpecificBillingInformations()
    {
        return $this->container['specific_billing_informations'];
    }

    /**
     * Sets specific_billing_informations
     *
     * @param \cbdesk\Mirakl\Model\A01Response200SpecificBillingInformations[]|null $specific_billing_informations The list of specific billing information of the shop, used for invoicing and reporting purposes <br/><i>Applies only when the shop is <code>professional</code></i>
     *
     * @return self
     */
    public function setSpecificBillingInformations($specific_billing_informations)
    {
        if (is_null($specific_billing_informations)) {
            throw new \InvalidArgumentException('non-nullable specific_billing_informations cannot be null');
        }
        $this->container['specific_billing_informations'] = $specific_billing_informations;

        return $this;
    }

    /**
     * Gets suspension_type
     *
     * @return string|null
     */
    public function getSuspensionType()
    {
        return $this->container['suspension_type'];
    }

    /**
     * Sets suspension_type
     *
     * @param string|null $suspension_type Shop suspension type, current possible values:<ul><li><code>MANUAL</code>: Shop account has been manually suspended in the back-office</li><li><code>PENDING_APPROVAL</code>: Shop account has been suspended at creation</li><li><code>AUTOMATIC_SUSPENSION</code>: Shop account has been suspended by Mirakl Quality Control</li><li><code>INCOMPLETE_PROFILE</code>: Shop account is suspended because some mandatory fields are missing in its profile</li></ul>
     *
     * @return self
     */
    public function setSuspensionType($suspension_type)
    {
        if (is_null($suspension_type)) {
            throw new \InvalidArgumentException('non-nullable suspension_type cannot be null');
        }
        $this->container['suspension_type'] = $suspension_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


