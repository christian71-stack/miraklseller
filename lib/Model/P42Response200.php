<?php
/**
 * P42Response200
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  cbdesk\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mirakl Marketplace APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest-release
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace cbdesk\Mirakl\Model;

use \ArrayAccess;
use \cbdesk\Mirakl\ObjectSerializer;

/**
 * P42Response200 Class Doc Comment
 *
 * @category Class
 * @package  cbdesk\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class P42Response200 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'P42_Response_200';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'conversion_options' => '\cbdesk\Mirakl\Model\P42Response200ConversionOptions',
        'conversion_type' => 'string',
        'date_created' => '\DateTime',
        'has_error_report' => 'bool',
        'has_new_product_report' => 'bool',
        'has_transformation_error_report' => 'bool',
        'has_transformed_file' => 'bool',
        'import_id' => 'int',
        'import_status' => 'string',
        'integration_details' => '\cbdesk\Mirakl\Model\P42Response200IntegrationDetails',
        'reason_status' => 'string',
        'shop_id' => 'int',
        'transform_lines_in_error' => 'int',
        'transform_lines_in_success' => 'int',
        'transform_lines_read' => 'int',
        'transform_lines_with_warning' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'conversion_options' => null,
        'conversion_type' => null,
        'date_created' => 'date-time',
        'has_error_report' => null,
        'has_new_product_report' => null,
        'has_transformation_error_report' => null,
        'has_transformed_file' => null,
        'import_id' => 'int64',
        'import_status' => null,
        'integration_details' => null,
        'reason_status' => null,
        'shop_id' => 'int64',
        'transform_lines_in_error' => 'int64',
        'transform_lines_in_success' => 'int64',
        'transform_lines_read' => 'int64',
        'transform_lines_with_warning' => 'int64'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'conversion_options' => false,
        'conversion_type' => false,
        'date_created' => false,
        'has_error_report' => false,
        'has_new_product_report' => false,
        'has_transformation_error_report' => false,
        'has_transformed_file' => false,
        'import_id' => false,
        'import_status' => false,
        'integration_details' => false,
        'reason_status' => false,
        'shop_id' => false,
        'transform_lines_in_error' => false,
        'transform_lines_in_success' => false,
        'transform_lines_read' => false,
        'transform_lines_with_warning' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'conversion_options' => 'conversion_options',
        'conversion_type' => 'conversion_type',
        'date_created' => 'date_created',
        'has_error_report' => 'has_error_report',
        'has_new_product_report' => 'has_new_product_report',
        'has_transformation_error_report' => 'has_transformation_error_report',
        'has_transformed_file' => 'has_transformed_file',
        'import_id' => 'import_id',
        'import_status' => 'import_status',
        'integration_details' => 'integration_details',
        'reason_status' => 'reason_status',
        'shop_id' => 'shop_id',
        'transform_lines_in_error' => 'transform_lines_in_error',
        'transform_lines_in_success' => 'transform_lines_in_success',
        'transform_lines_read' => 'transform_lines_read',
        'transform_lines_with_warning' => 'transform_lines_with_warning'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'conversion_options' => 'setConversionOptions',
        'conversion_type' => 'setConversionType',
        'date_created' => 'setDateCreated',
        'has_error_report' => 'setHasErrorReport',
        'has_new_product_report' => 'setHasNewProductReport',
        'has_transformation_error_report' => 'setHasTransformationErrorReport',
        'has_transformed_file' => 'setHasTransformedFile',
        'import_id' => 'setImportId',
        'import_status' => 'setImportStatus',
        'integration_details' => 'setIntegrationDetails',
        'reason_status' => 'setReasonStatus',
        'shop_id' => 'setShopId',
        'transform_lines_in_error' => 'setTransformLinesInError',
        'transform_lines_in_success' => 'setTransformLinesInSuccess',
        'transform_lines_read' => 'setTransformLinesRead',
        'transform_lines_with_warning' => 'setTransformLinesWithWarning'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'conversion_options' => 'getConversionOptions',
        'conversion_type' => 'getConversionType',
        'date_created' => 'getDateCreated',
        'has_error_report' => 'getHasErrorReport',
        'has_new_product_report' => 'getHasNewProductReport',
        'has_transformation_error_report' => 'getHasTransformationErrorReport',
        'has_transformed_file' => 'getHasTransformedFile',
        'import_id' => 'getImportId',
        'import_status' => 'getImportStatus',
        'integration_details' => 'getIntegrationDetails',
        'reason_status' => 'getReasonStatus',
        'shop_id' => 'getShopId',
        'transform_lines_in_error' => 'getTransformLinesInError',
        'transform_lines_in_success' => 'getTransformLinesInSuccess',
        'transform_lines_read' => 'getTransformLinesRead',
        'transform_lines_with_warning' => 'getTransformLinesWithWarning'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('conversion_options', $data ?? [], null);
        $this->setIfExists('conversion_type', $data ?? [], null);
        $this->setIfExists('date_created', $data ?? [], null);
        $this->setIfExists('has_error_report', $data ?? [], null);
        $this->setIfExists('has_new_product_report', $data ?? [], null);
        $this->setIfExists('has_transformation_error_report', $data ?? [], null);
        $this->setIfExists('has_transformed_file', $data ?? [], null);
        $this->setIfExists('import_id', $data ?? [], null);
        $this->setIfExists('import_status', $data ?? [], null);
        $this->setIfExists('integration_details', $data ?? [], null);
        $this->setIfExists('reason_status', $data ?? [], null);
        $this->setIfExists('shop_id', $data ?? [], null);
        $this->setIfExists('transform_lines_in_error', $data ?? [], null);
        $this->setIfExists('transform_lines_in_success', $data ?? [], null);
        $this->setIfExists('transform_lines_read', $data ?? [], null);
        $this->setIfExists('transform_lines_with_warning', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets conversion_options
     *
     * @return \cbdesk\Mirakl\Model\P42Response200ConversionOptions|null
     */
    public function getConversionOptions()
    {
        return $this->container['conversion_options'];
    }

    /**
     * Sets conversion_options
     *
     * @param \cbdesk\Mirakl\Model\P42Response200ConversionOptions|null $conversion_options conversion_options
     *
     * @return self
     */
    public function setConversionOptions($conversion_options)
    {
        if (is_null($conversion_options)) {
            throw new \InvalidArgumentException('non-nullable conversion_options cannot be null');
        }
        $this->container['conversion_options'] = $conversion_options;

        return $this;
    }

    /**
     * Gets conversion_type
     *
     * @return string|null
     */
    public function getConversionType()
    {
        return $this->container['conversion_type'];
    }

    /**
     * Sets conversion_type
     *
     * @param string|null $conversion_type Type of conversion applied on products
     *
     * @return self
     */
    public function setConversionType($conversion_type)
    {
        if (is_null($conversion_type)) {
            throw new \InvalidArgumentException('non-nullable conversion_type cannot be null');
        }
        $this->container['conversion_type'] = $conversion_type;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return \DateTime|null
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param \DateTime|null $date_created Import creation date
     *
     * @return self
     */
    public function setDateCreated($date_created)
    {
        if (is_null($date_created)) {
            throw new \InvalidArgumentException('non-nullable date_created cannot be null');
        }
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets has_error_report
     *
     * @return bool|null
     */
    public function getHasErrorReport()
    {
        return $this->container['has_error_report'];
    }

    /**
     * Sets has_error_report
     *
     * @param bool|null $has_error_report Returns true if error report is available. Value is filled when the import is completed
     *
     * @return self
     */
    public function setHasErrorReport($has_error_report)
    {
        if (is_null($has_error_report)) {
            throw new \InvalidArgumentException('non-nullable has_error_report cannot be null');
        }
        $this->container['has_error_report'] = $has_error_report;

        return $this;
    }

    /**
     * Gets has_new_product_report
     *
     * @return bool|null
     */
    public function getHasNewProductReport()
    {
        return $this->container['has_new_product_report'];
    }

    /**
     * Sets has_new_product_report
     *
     * @param bool|null $has_new_product_report Returns true if new product report is available. Value is filled when the import is completed
     *
     * @return self
     */
    public function setHasNewProductReport($has_new_product_report)
    {
        if (is_null($has_new_product_report)) {
            throw new \InvalidArgumentException('non-nullable has_new_product_report cannot be null');
        }
        $this->container['has_new_product_report'] = $has_new_product_report;

        return $this;
    }

    /**
     * Gets has_transformation_error_report
     *
     * @return bool|null
     */
    public function getHasTransformationErrorReport()
    {
        return $this->container['has_transformation_error_report'];
    }

    /**
     * Sets has_transformation_error_report
     *
     * @param bool|null $has_transformation_error_report Returns true if transformation error report is available. Value is filled when the import is completed
     *
     * @return self
     */
    public function setHasTransformationErrorReport($has_transformation_error_report)
    {
        if (is_null($has_transformation_error_report)) {
            throw new \InvalidArgumentException('non-nullable has_transformation_error_report cannot be null');
        }
        $this->container['has_transformation_error_report'] = $has_transformation_error_report;

        return $this;
    }

    /**
     * Gets has_transformed_file
     *
     * @return bool|null
     */
    public function getHasTransformedFile()
    {
        return $this->container['has_transformed_file'];
    }

    /**
     * Sets has_transformed_file
     *
     * @param bool|null $has_transformed_file Returns true if transformed file is available. Value is filled when the import is completed
     *
     * @return self
     */
    public function setHasTransformedFile($has_transformed_file)
    {
        if (is_null($has_transformed_file)) {
            throw new \InvalidArgumentException('non-nullable has_transformed_file cannot be null');
        }
        $this->container['has_transformed_file'] = $has_transformed_file;

        return $this;
    }

    /**
     * Gets import_id
     *
     * @return int|null
     */
    public function getImportId()
    {
        return $this->container['import_id'];
    }

    /**
     * Sets import_id
     *
     * @param int|null $import_id Import identifier
     *
     * @return self
     */
    public function setImportId($import_id)
    {
        if (is_null($import_id)) {
            throw new \InvalidArgumentException('non-nullable import_id cannot be null');
        }
        $this->container['import_id'] = $import_id;

        return $this;
    }

    /**
     * Gets import_status
     *
     * @return string|null
     */
    public function getImportStatus()
    {
        return $this->container['import_status'];
    }

    /**
     * Sets import_status
     *
     * @param string|null $import_status Import status
     *
     * @return self
     */
    public function setImportStatus($import_status)
    {
        if (is_null($import_status)) {
            throw new \InvalidArgumentException('non-nullable import_status cannot be null');
        }
        $this->container['import_status'] = $import_status;

        return $this;
    }

    /**
     * Gets integration_details
     *
     * @return \cbdesk\Mirakl\Model\P42Response200IntegrationDetails|null
     */
    public function getIntegrationDetails()
    {
        return $this->container['integration_details'];
    }

    /**
     * Sets integration_details
     *
     * @param \cbdesk\Mirakl\Model\P42Response200IntegrationDetails|null $integration_details integration_details
     *
     * @return self
     */
    public function setIntegrationDetails($integration_details)
    {
        if (is_null($integration_details)) {
            throw new \InvalidArgumentException('non-nullable integration_details cannot be null');
        }
        $this->container['integration_details'] = $integration_details;

        return $this;
    }

    /**
     * Gets reason_status
     *
     * @return string|null
     */
    public function getReasonStatus()
    {
        return $this->container['reason_status'];
    }

    /**
     * Sets reason_status
     *
     * @param string|null $reason_status A message explaining the reason of the import status, if relevant
     *
     * @return self
     */
    public function setReasonStatus($reason_status)
    {
        if (is_null($reason_status)) {
            throw new \InvalidArgumentException('non-nullable reason_status cannot be null');
        }
        $this->container['reason_status'] = $reason_status;

        return $this;
    }

    /**
     * Gets shop_id
     *
     * @return int|null
     */
    public function getShopId()
    {
        return $this->container['shop_id'];
    }

    /**
     * Sets shop_id
     *
     * @param int|null $shop_id Shop identifier
     *
     * @return self
     */
    public function setShopId($shop_id)
    {
        if (is_null($shop_id)) {
            throw new \InvalidArgumentException('non-nullable shop_id cannot be null');
        }
        $this->container['shop_id'] = $shop_id;

        return $this;
    }

    /**
     * Gets transform_lines_in_error
     *
     * @return int|null
     */
    public function getTransformLinesInError()
    {
        return $this->container['transform_lines_in_error'];
    }

    /**
     * Sets transform_lines_in_error
     *
     * @param int|null $transform_lines_in_error Total count of transformed lines in error
     *
     * @return self
     */
    public function setTransformLinesInError($transform_lines_in_error)
    {
        if (is_null($transform_lines_in_error)) {
            throw new \InvalidArgumentException('non-nullable transform_lines_in_error cannot be null');
        }
        $this->container['transform_lines_in_error'] = $transform_lines_in_error;

        return $this;
    }

    /**
     * Gets transform_lines_in_success
     *
     * @return int|null
     */
    public function getTransformLinesInSuccess()
    {
        return $this->container['transform_lines_in_success'];
    }

    /**
     * Sets transform_lines_in_success
     *
     * @param int|null $transform_lines_in_success Total count of transformed lines in success
     *
     * @return self
     */
    public function setTransformLinesInSuccess($transform_lines_in_success)
    {
        if (is_null($transform_lines_in_success)) {
            throw new \InvalidArgumentException('non-nullable transform_lines_in_success cannot be null');
        }
        $this->container['transform_lines_in_success'] = $transform_lines_in_success;

        return $this;
    }

    /**
     * Gets transform_lines_read
     *
     * @return int|null
     */
    public function getTransformLinesRead()
    {
        return $this->container['transform_lines_read'];
    }

    /**
     * Sets transform_lines_read
     *
     * @param int|null $transform_lines_read Total count of transformed lines read
     *
     * @return self
     */
    public function setTransformLinesRead($transform_lines_read)
    {
        if (is_null($transform_lines_read)) {
            throw new \InvalidArgumentException('non-nullable transform_lines_read cannot be null');
        }
        $this->container['transform_lines_read'] = $transform_lines_read;

        return $this;
    }

    /**
     * Gets transform_lines_with_warning
     *
     * @return int|null
     */
    public function getTransformLinesWithWarning()
    {
        return $this->container['transform_lines_with_warning'];
    }

    /**
     * Sets transform_lines_with_warning
     *
     * @param int|null $transform_lines_with_warning Total count of transformed lines with warning
     *
     * @return self
     */
    public function setTransformLinesWithWarning($transform_lines_with_warning)
    {
        if (is_null($transform_lines_with_warning)) {
            throw new \InvalidArgumentException('non-nullable transform_lines_with_warning cannot be null');
        }
        $this->container['transform_lines_with_warning'] = $transform_lines_with_warning;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


