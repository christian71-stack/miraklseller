<?php
/**
 * OR11Response200OrdersPromotionsAppliedPromotionsConfiguration
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  cbdesk\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mirakl Marketplace APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest-release
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace cbdesk\Mirakl\Model;

use \ArrayAccess;
use \cbdesk\Mirakl\ObjectSerializer;

/**
 * OR11Response200OrdersPromotionsAppliedPromotionsConfiguration Class Doc Comment
 *
 * @category Class
 * @package  cbdesk\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OR11Response200OrdersPromotionsAppliedPromotionsConfiguration implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OR11_Response_200_Orders_Promotions_AppliedPromotions_Configuration';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'amount_off' => 'float',
        'free_items_quantity' => 'int',
        'internal_description' => 'string',
        'percentage_off' => 'float',
        'reduced_unit_price' => 'float',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'amount_off' => null,
        'free_items_quantity' => 'int32',
        'internal_description' => null,
        'percentage_off' => null,
        'reduced_unit_price' => null,
        'type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'amount_off' => false,
        'free_items_quantity' => false,
        'internal_description' => false,
        'percentage_off' => false,
        'reduced_unit_price' => false,
        'type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'amount_off' => 'amount_off',
        'free_items_quantity' => 'free_items_quantity',
        'internal_description' => 'internal_description',
        'percentage_off' => 'percentage_off',
        'reduced_unit_price' => 'reduced_unit_price',
        'type' => 'type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'amount_off' => 'setAmountOff',
        'free_items_quantity' => 'setFreeItemsQuantity',
        'internal_description' => 'setInternalDescription',
        'percentage_off' => 'setPercentageOff',
        'reduced_unit_price' => 'setReducedUnitPrice',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'amount_off' => 'getAmountOff',
        'free_items_quantity' => 'getFreeItemsQuantity',
        'internal_description' => 'getInternalDescription',
        'percentage_off' => 'getPercentageOff',
        'reduced_unit_price' => 'getReducedUnitPrice',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('amount_off', $data ?? [], null);
        $this->setIfExists('free_items_quantity', $data ?? [], null);
        $this->setIfExists('internal_description', $data ?? [], null);
        $this->setIfExists('percentage_off', $data ?? [], null);
        $this->setIfExists('reduced_unit_price', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets amount_off
     *
     * @return float|null
     */
    public function getAmountOff()
    {
        return $this->container['amount_off'];
    }

    /**
     * Sets amount_off
     *
     * @param float|null $amount_off The amount off of the promotion. <br/>Only applicable when promotion is of type <code>AMOUNT_OFF</code>, null otherwise.
     *
     * @return self
     */
    public function setAmountOff($amount_off)
    {
        if (is_null($amount_off)) {
            throw new \InvalidArgumentException('non-nullable amount_off cannot be null');
        }
        $this->container['amount_off'] = $amount_off;

        return $this;
    }

    /**
     * Gets free_items_quantity
     *
     * @return int|null
     */
    public function getFreeItemsQuantity()
    {
        return $this->container['free_items_quantity'];
    }

    /**
     * Sets free_items_quantity
     *
     * @param int|null $free_items_quantity The free item target quantity of the promotion. <br/>Only applicable when promotion is of type <code>FREE_ITEMS</code>, null otherwise.
     *
     * @return self
     */
    public function setFreeItemsQuantity($free_items_quantity)
    {
        if (is_null($free_items_quantity)) {
            throw new \InvalidArgumentException('non-nullable free_items_quantity cannot be null');
        }
        $this->container['free_items_quantity'] = $free_items_quantity;

        return $this;
    }

    /**
     * Gets internal_description
     *
     * @return string|null
     */
    public function getInternalDescription()
    {
        return $this->container['internal_description'];
    }

    /**
     * Sets internal_description
     *
     * @param string|null $internal_description Promotion's Internal description, set by the shop at creation
     *
     * @return self
     */
    public function setInternalDescription($internal_description)
    {
        if (is_null($internal_description)) {
            throw new \InvalidArgumentException('non-nullable internal_description cannot be null');
        }
        $this->container['internal_description'] = $internal_description;

        return $this;
    }

    /**
     * Gets percentage_off
     *
     * @return float|null
     */
    public function getPercentageOff()
    {
        return $this->container['percentage_off'];
    }

    /**
     * Sets percentage_off
     *
     * @param float|null $percentage_off The percentage off of the promotion. <br/>Only applicable when promotion is of type <code>PERCENTAGE_OFF</code>, null otherwise.
     *
     * @return self
     */
    public function setPercentageOff($percentage_off)
    {
        if (is_null($percentage_off)) {
            throw new \InvalidArgumentException('non-nullable percentage_off cannot be null');
        }
        $this->container['percentage_off'] = $percentage_off;

        return $this;
    }

    /**
     * Gets reduced_unit_price
     *
     * @return float|null
     */
    public function getReducedUnitPrice()
    {
        return $this->container['reduced_unit_price'];
    }

    /**
     * Sets reduced_unit_price
     *
     * @param float|null $reduced_unit_price The new offer’s unit price triggered by the promotion. <br/>Only applicable when promotion is of type <code>REDUCED_UNIT_PRICE</code>, null otherwise.
     *
     * @return self
     */
    public function setReducedUnitPrice($reduced_unit_price)
    {
        if (is_null($reduced_unit_price)) {
            throw new \InvalidArgumentException('non-nullable reduced_unit_price cannot be null');
        }
        $this->container['reduced_unit_price'] = $reduced_unit_price;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Promotion's type, whether it is applied to this item (<code>ITEM</code>), or every items in the basket for this shop (<code>BASKET</code>)
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


