<?php
/**
 * P11Response200Products
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  cbdesk\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mirakl Marketplace APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest-release
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace cbdesk\Mirakl\Model;

use \ArrayAccess;
use \cbdesk\Mirakl\ObjectSerializer;

/**
 * P11Response200Products Class Doc Comment
 *
 * @category Class
 * @package  cbdesk\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class P11Response200Products implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'P11_Response_200_Products';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'category_code' => 'string',
        'category_label' => 'string',
        'measurement' => '\cbdesk\Mirakl\Model\P11Response200ProductsMeasurement',
        'offers' => '\cbdesk\Mirakl\Model\P11Response200ProductsOffers[]',
        'product_brand' => 'string',
        'product_description' => 'string',
        'product_media' => '\cbdesk\Mirakl\Model\P11Response200ProductsProductMedia',
        'product_references' => '\cbdesk\Mirakl\Model\P11Response200ProductsProductReferences[]',
        'product_sku' => 'string',
        'product_title' => 'string',
        'total_count' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'category_code' => null,
        'category_label' => null,
        'measurement' => null,
        'offers' => null,
        'product_brand' => null,
        'product_description' => null,
        'product_media' => null,
        'product_references' => null,
        'product_sku' => null,
        'product_title' => null,
        'total_count' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'category_code' => false,
        'category_label' => false,
        'measurement' => false,
        'offers' => false,
        'product_brand' => false,
        'product_description' => false,
        'product_media' => false,
        'product_references' => false,
        'product_sku' => false,
        'product_title' => false,
        'total_count' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'category_code' => 'category_code',
        'category_label' => 'category_label',
        'measurement' => 'measurement',
        'offers' => 'offers',
        'product_brand' => 'product_brand',
        'product_description' => 'product_description',
        'product_media' => 'product_media',
        'product_references' => 'product_references',
        'product_sku' => 'product_sku',
        'product_title' => 'product_title',
        'total_count' => 'total_count'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'category_code' => 'setCategoryCode',
        'category_label' => 'setCategoryLabel',
        'measurement' => 'setMeasurement',
        'offers' => 'setOffers',
        'product_brand' => 'setProductBrand',
        'product_description' => 'setProductDescription',
        'product_media' => 'setProductMedia',
        'product_references' => 'setProductReferences',
        'product_sku' => 'setProductSku',
        'product_title' => 'setProductTitle',
        'total_count' => 'setTotalCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'category_code' => 'getCategoryCode',
        'category_label' => 'getCategoryLabel',
        'measurement' => 'getMeasurement',
        'offers' => 'getOffers',
        'product_brand' => 'getProductBrand',
        'product_description' => 'getProductDescription',
        'product_media' => 'getProductMedia',
        'product_references' => 'getProductReferences',
        'product_sku' => 'getProductSku',
        'product_title' => 'getProductTitle',
        'total_count' => 'getTotalCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('category_code', $data ?? [], null);
        $this->setIfExists('category_label', $data ?? [], null);
        $this->setIfExists('measurement', $data ?? [], null);
        $this->setIfExists('offers', $data ?? [], null);
        $this->setIfExists('product_brand', $data ?? [], null);
        $this->setIfExists('product_description', $data ?? [], null);
        $this->setIfExists('product_media', $data ?? [], null);
        $this->setIfExists('product_references', $data ?? [], null);
        $this->setIfExists('product_sku', $data ?? [], null);
        $this->setIfExists('product_title', $data ?? [], null);
        $this->setIfExists('total_count', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets category_code
     *
     * @return string|null
     */
    public function getCategoryCode()
    {
        return $this->container['category_code'];
    }

    /**
     * Sets category_code
     *
     * @param string|null $category_code Code of the product category
     *
     * @return self
     */
    public function setCategoryCode($category_code)
    {
        if (is_null($category_code)) {
            throw new \InvalidArgumentException('non-nullable category_code cannot be null');
        }
        $this->container['category_code'] = $category_code;

        return $this;
    }

    /**
     * Gets category_label
     *
     * @return string|null
     */
    public function getCategoryLabel()
    {
        return $this->container['category_label'];
    }

    /**
     * Sets category_label
     *
     * @param string|null $category_label Label of the product category
     *
     * @return self
     */
    public function setCategoryLabel($category_label)
    {
        if (is_null($category_label)) {
            throw new \InvalidArgumentException('non-nullable category_label cannot be null');
        }
        $this->container['category_label'] = $category_label;

        return $this;
    }

    /**
     * Gets measurement
     *
     * @return \cbdesk\Mirakl\Model\P11Response200ProductsMeasurement|null
     */
    public function getMeasurement()
    {
        return $this->container['measurement'];
    }

    /**
     * Sets measurement
     *
     * @param \cbdesk\Mirakl\Model\P11Response200ProductsMeasurement|null $measurement measurement
     *
     * @return self
     */
    public function setMeasurement($measurement)
    {
        if (is_null($measurement)) {
            throw new \InvalidArgumentException('non-nullable measurement cannot be null');
        }
        $this->container['measurement'] = $measurement;

        return $this;
    }

    /**
     * Gets offers
     *
     * @return \cbdesk\Mirakl\Model\P11Response200ProductsOffers[]|null
     */
    public function getOffers()
    {
        return $this->container['offers'];
    }

    /**
     * Sets offers
     *
     * @param \cbdesk\Mirakl\Model\P11Response200ProductsOffers[]|null $offers List of offers for the product
     *
     * @return self
     */
    public function setOffers($offers)
    {
        if (is_null($offers)) {
            throw new \InvalidArgumentException('non-nullable offers cannot be null');
        }
        $this->container['offers'] = $offers;

        return $this;
    }

    /**
     * Gets product_brand
     *
     * @return string|null
     */
    public function getProductBrand()
    {
        return $this->container['product_brand'];
    }

    /**
     * Sets product_brand
     *
     * @param string|null $product_brand Brand of the product
     *
     * @return self
     */
    public function setProductBrand($product_brand)
    {
        if (is_null($product_brand)) {
            throw new \InvalidArgumentException('non-nullable product_brand cannot be null');
        }
        $this->container['product_brand'] = $product_brand;

        return $this;
    }

    /**
     * Gets product_description
     *
     * @return string|null
     */
    public function getProductDescription()
    {
        return $this->container['product_description'];
    }

    /**
     * Sets product_description
     *
     * @param string|null $product_description Description of the product
     *
     * @return self
     */
    public function setProductDescription($product_description)
    {
        if (is_null($product_description)) {
            throw new \InvalidArgumentException('non-nullable product_description cannot be null');
        }
        $this->container['product_description'] = $product_description;

        return $this;
    }

    /**
     * Gets product_media
     *
     * @return \cbdesk\Mirakl\Model\P11Response200ProductsProductMedia|null
     */
    public function getProductMedia()
    {
        return $this->container['product_media'];
    }

    /**
     * Sets product_media
     *
     * @param \cbdesk\Mirakl\Model\P11Response200ProductsProductMedia|null $product_media product_media
     *
     * @return self
     */
    public function setProductMedia($product_media)
    {
        if (is_null($product_media)) {
            throw new \InvalidArgumentException('non-nullable product_media cannot be null');
        }
        $this->container['product_media'] = $product_media;

        return $this;
    }

    /**
     * Gets product_references
     *
     * @return \cbdesk\Mirakl\Model\P11Response200ProductsProductReferences[]|null
     */
    public function getProductReferences()
    {
        return $this->container['product_references'];
    }

    /**
     * Sets product_references
     *
     * @param \cbdesk\Mirakl\Model\P11Response200ProductsProductReferences[]|null $product_references List of product's references
     *
     * @return self
     */
    public function setProductReferences($product_references)
    {
        if (is_null($product_references)) {
            throw new \InvalidArgumentException('non-nullable product_references cannot be null');
        }
        $this->container['product_references'] = $product_references;

        return $this;
    }

    /**
     * Gets product_sku
     *
     * @return string|null
     */
    public function getProductSku()
    {
        return $this->container['product_sku'];
    }

    /**
     * Sets product_sku
     *
     * @param string|null $product_sku SKU of the product
     *
     * @return self
     */
    public function setProductSku($product_sku)
    {
        if (is_null($product_sku)) {
            throw new \InvalidArgumentException('non-nullable product_sku cannot be null');
        }
        $this->container['product_sku'] = $product_sku;

        return $this;
    }

    /**
     * Gets product_title
     *
     * @return string|null
     */
    public function getProductTitle()
    {
        return $this->container['product_title'];
    }

    /**
     * Sets product_title
     *
     * @param string|null $product_title Title of the product
     *
     * @return self
     */
    public function setProductTitle($product_title)
    {
        if (is_null($product_title)) {
            throw new \InvalidArgumentException('non-nullable product_title cannot be null');
        }
        $this->container['product_title'] = $product_title;

        return $this;
    }

    /**
     * Gets total_count
     *
     * @return int|null
     */
    public function getTotalCount()
    {
        return $this->container['total_count'];
    }

    /**
     * Sets total_count
     *
     * @param int|null $total_count Number of offers for this product
     *
     * @return self
     */
    public function setTotalCount($total_count)
    {
        if (is_null($total_count)) {
            throw new \InvalidArgumentException('non-nullable total_count cannot be null');
        }
        $this->container['total_count'] = $total_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


