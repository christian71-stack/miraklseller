<?php
/**
 * DR12Response200Data
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  cbdesk\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mirakl Marketplace APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest-release
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace cbdesk\Mirakl\Model;

use \ArrayAccess;
use \cbdesk\Mirakl\ObjectSerializer;

/**
 * DR12Response200Data Class Doc Comment
 *
 * @category Class
 * @package  cbdesk\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DR12Response200Data implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = 'entity_type';

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DR12_Response_200_Data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'delivery_bill_information' => '\cbdesk\Mirakl\Model\DR12Response200DataDeliveryBillInformation[]',
        'eco_contributions' => '\cbdesk\Mirakl\Model\DR12Response200DataEcoContributions[]',
        'entity_id' => 'string',
        'entity_type' => 'string',
        'fees_excluding_taxes' => '\cbdesk\Mirakl\Model\DR12Response200DataFeesExcludingTaxes[]',
        'order' => '\cbdesk\Mirakl\Model\DR12Response200DataOrder',
        'order_line' => '\cbdesk\Mirakl\Model\DR12Response200DataOrderLine',
        'origin_unit_price_excluding_taxes' => 'float',
        'origin_unit_price_including_taxes' => 'float',
        'payment_state' => 'string',
        'price_excluding_taxes' => 'float',
        'product' => '\cbdesk\Mirakl\Model\DR12Response200DataProduct',
        'quantity' => 'int',
        'shipping_from' => '\cbdesk\Mirakl\Model\DR12Response200DataShippingFrom',
        'shipping_price_excluding_taxes' => 'float',
        'shipping_taxes' => '\cbdesk\Mirakl\Model\DR12Response200DataShippingTaxes[]',
        'shipping_to' => '\cbdesk\Mirakl\Model\DR12Response200DataShippingTo',
        'shop' => '\cbdesk\Mirakl\Model\DR12Response200DataShop',
        'tax_legal_notice' => 'string',
        'taxes' => '\cbdesk\Mirakl\Model\DR12Response200DataTaxes[]',
        'total_price_including_taxes' => 'float',
        'unit_price_excluding_taxes' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'delivery_bill_information' => null,
        'eco_contributions' => null,
        'entity_id' => null,
        'entity_type' => null,
        'fees_excluding_taxes' => null,
        'order' => null,
        'order_line' => null,
        'origin_unit_price_excluding_taxes' => null,
        'origin_unit_price_including_taxes' => null,
        'payment_state' => null,
        'price_excluding_taxes' => null,
        'product' => null,
        'quantity' => 'int32',
        'shipping_from' => null,
        'shipping_price_excluding_taxes' => null,
        'shipping_taxes' => null,
        'shipping_to' => null,
        'shop' => null,
        'tax_legal_notice' => null,
        'taxes' => null,
        'total_price_including_taxes' => null,
        'unit_price_excluding_taxes' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'delivery_bill_information' => false,
        'eco_contributions' => false,
        'entity_id' => false,
        'entity_type' => false,
        'fees_excluding_taxes' => false,
        'order' => false,
        'order_line' => false,
        'origin_unit_price_excluding_taxes' => false,
        'origin_unit_price_including_taxes' => false,
        'payment_state' => false,
        'price_excluding_taxes' => false,
        'product' => false,
        'quantity' => false,
        'shipping_from' => false,
        'shipping_price_excluding_taxes' => false,
        'shipping_taxes' => false,
        'shipping_to' => false,
        'shop' => false,
        'tax_legal_notice' => false,
        'taxes' => false,
        'total_price_including_taxes' => false,
        'unit_price_excluding_taxes' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'delivery_bill_information' => 'delivery_bill_information',
        'eco_contributions' => 'eco_contributions',
        'entity_id' => 'entity_id',
        'entity_type' => 'entity_type',
        'fees_excluding_taxes' => 'fees_excluding_taxes',
        'order' => 'order',
        'order_line' => 'order_line',
        'origin_unit_price_excluding_taxes' => 'origin_unit_price_excluding_taxes',
        'origin_unit_price_including_taxes' => 'origin_unit_price_including_taxes',
        'payment_state' => 'payment_state',
        'price_excluding_taxes' => 'price_excluding_taxes',
        'product' => 'product',
        'quantity' => 'quantity',
        'shipping_from' => 'shipping_from',
        'shipping_price_excluding_taxes' => 'shipping_price_excluding_taxes',
        'shipping_taxes' => 'shipping_taxes',
        'shipping_to' => 'shipping_to',
        'shop' => 'shop',
        'tax_legal_notice' => 'tax_legal_notice',
        'taxes' => 'taxes',
        'total_price_including_taxes' => 'total_price_including_taxes',
        'unit_price_excluding_taxes' => 'unit_price_excluding_taxes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'delivery_bill_information' => 'setDeliveryBillInformation',
        'eco_contributions' => 'setEcoContributions',
        'entity_id' => 'setEntityId',
        'entity_type' => 'setEntityType',
        'fees_excluding_taxes' => 'setFeesExcludingTaxes',
        'order' => 'setOrder',
        'order_line' => 'setOrderLine',
        'origin_unit_price_excluding_taxes' => 'setOriginUnitPriceExcludingTaxes',
        'origin_unit_price_including_taxes' => 'setOriginUnitPriceIncludingTaxes',
        'payment_state' => 'setPaymentState',
        'price_excluding_taxes' => 'setPriceExcludingTaxes',
        'product' => 'setProduct',
        'quantity' => 'setQuantity',
        'shipping_from' => 'setShippingFrom',
        'shipping_price_excluding_taxes' => 'setShippingPriceExcludingTaxes',
        'shipping_taxes' => 'setShippingTaxes',
        'shipping_to' => 'setShippingTo',
        'shop' => 'setShop',
        'tax_legal_notice' => 'setTaxLegalNotice',
        'taxes' => 'setTaxes',
        'total_price_including_taxes' => 'setTotalPriceIncludingTaxes',
        'unit_price_excluding_taxes' => 'setUnitPriceExcludingTaxes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'delivery_bill_information' => 'getDeliveryBillInformation',
        'eco_contributions' => 'getEcoContributions',
        'entity_id' => 'getEntityId',
        'entity_type' => 'getEntityType',
        'fees_excluding_taxes' => 'getFeesExcludingTaxes',
        'order' => 'getOrder',
        'order_line' => 'getOrderLine',
        'origin_unit_price_excluding_taxes' => 'getOriginUnitPriceExcludingTaxes',
        'origin_unit_price_including_taxes' => 'getOriginUnitPriceIncludingTaxes',
        'payment_state' => 'getPaymentState',
        'price_excluding_taxes' => 'getPriceExcludingTaxes',
        'product' => 'getProduct',
        'quantity' => 'getQuantity',
        'shipping_from' => 'getShippingFrom',
        'shipping_price_excluding_taxes' => 'getShippingPriceExcludingTaxes',
        'shipping_taxes' => 'getShippingTaxes',
        'shipping_to' => 'getShippingTo',
        'shop' => 'getShop',
        'tax_legal_notice' => 'getTaxLegalNotice',
        'taxes' => 'getTaxes',
        'total_price_including_taxes' => 'getTotalPriceIncludingTaxes',
        'unit_price_excluding_taxes' => 'getUnitPriceExcludingTaxes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('delivery_bill_information', $data ?? [], null);
        $this->setIfExists('eco_contributions', $data ?? [], null);
        $this->setIfExists('entity_id', $data ?? [], null);
        $this->setIfExists('entity_type', $data ?? [], null);
        $this->setIfExists('fees_excluding_taxes', $data ?? [], null);
        $this->setIfExists('order', $data ?? [], null);
        $this->setIfExists('order_line', $data ?? [], null);
        $this->setIfExists('origin_unit_price_excluding_taxes', $data ?? [], null);
        $this->setIfExists('origin_unit_price_including_taxes', $data ?? [], null);
        $this->setIfExists('payment_state', $data ?? [], null);
        $this->setIfExists('price_excluding_taxes', $data ?? [], null);
        $this->setIfExists('product', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('shipping_from', $data ?? [], null);
        $this->setIfExists('shipping_price_excluding_taxes', $data ?? [], null);
        $this->setIfExists('shipping_taxes', $data ?? [], null);
        $this->setIfExists('shipping_to', $data ?? [], null);
        $this->setIfExists('shop', $data ?? [], null);
        $this->setIfExists('tax_legal_notice', $data ?? [], null);
        $this->setIfExists('taxes', $data ?? [], null);
        $this->setIfExists('total_price_including_taxes', $data ?? [], null);
        $this->setIfExists('unit_price_excluding_taxes', $data ?? [], null);

        // Initialize discriminator property with the model name.
        $this->container['entity_type'] = static::$openAPIModelName;
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets delivery_bill_information
     *
     * @return \cbdesk\Mirakl\Model\DR12Response200DataDeliveryBillInformation[]|null
     */
    public function getDeliveryBillInformation()
    {
        return $this->container['delivery_bill_information'];
    }

    /**
     * Sets delivery_bill_information
     *
     * @param \cbdesk\Mirakl\Model\DR12Response200DataDeliveryBillInformation[]|null $delivery_bill_information Delivery bill information
     *
     * @return self
     */
    public function setDeliveryBillInformation($delivery_bill_information)
    {
        if (is_null($delivery_bill_information)) {
            throw new \InvalidArgumentException('non-nullable delivery_bill_information cannot be null');
        }
        $this->container['delivery_bill_information'] = $delivery_bill_information;

        return $this;
    }

    /**
     * Gets eco_contributions
     *
     * @return \cbdesk\Mirakl\Model\DR12Response200DataEcoContributions[]|null
     */
    public function getEcoContributions()
    {
        return $this->container['eco_contributions'];
    }

    /**
     * Sets eco_contributions
     *
     * @param \cbdesk\Mirakl\Model\DR12Response200DataEcoContributions[]|null $eco_contributions List of eco-contribution amounts and corresponding producer identifiers, if applicable<br/> Only available if the operator activates the circular economy information collection.
     *
     * @return self
     */
    public function setEcoContributions($eco_contributions)
    {
        if (is_null($eco_contributions)) {
            throw new \InvalidArgumentException('non-nullable eco_contributions cannot be null');
        }
        $this->container['eco_contributions'] = $eco_contributions;

        return $this;
    }

    /**
     * Gets entity_id
     *
     * @return string|null
     */
    public function getEntityId()
    {
        return $this->container['entity_id'];
    }

    /**
     * Sets entity_id
     *
     * @param string|null $entity_id The entity id the document line relates to
     *
     * @return self
     */
    public function setEntityId($entity_id)
    {
        if (is_null($entity_id)) {
            throw new \InvalidArgumentException('non-nullable entity_id cannot be null');
        }
        $this->container['entity_id'] = $entity_id;

        return $this;
    }

    /**
     * Gets entity_type
     *
     * @return string|null
     */
    public function getEntityType()
    {
        return $this->container['entity_type'];
    }

    /**
     * Sets entity_type
     *
     * @param string|null $entity_type The entity type the document line relates to
     *
     * @return self
     */
    public function setEntityType($entity_type)
    {
        if (is_null($entity_type)) {
            throw new \InvalidArgumentException('non-nullable entity_type cannot be null');
        }
        $this->container['entity_type'] = $entity_type;

        return $this;
    }

    /**
     * Gets fees_excluding_taxes
     *
     * @return \cbdesk\Mirakl\Model\DR12Response200DataFeesExcludingTaxes[]|null
     */
    public function getFeesExcludingTaxes()
    {
        return $this->container['fees_excluding_taxes'];
    }

    /**
     * Sets fees_excluding_taxes
     *
     * @param \cbdesk\Mirakl\Model\DR12Response200DataFeesExcludingTaxes[]|null $fees_excluding_taxes List of fees applied on the order line
     *
     * @return self
     */
    public function setFeesExcludingTaxes($fees_excluding_taxes)
    {
        if (is_null($fees_excluding_taxes)) {
            throw new \InvalidArgumentException('non-nullable fees_excluding_taxes cannot be null');
        }
        $this->container['fees_excluding_taxes'] = $fees_excluding_taxes;

        return $this;
    }

    /**
     * Gets order
     *
     * @return \cbdesk\Mirakl\Model\DR12Response200DataOrder|null
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param \cbdesk\Mirakl\Model\DR12Response200DataOrder|null $order order
     *
     * @return self
     */
    public function setOrder($order)
    {
        if (is_null($order)) {
            throw new \InvalidArgumentException('non-nullable order cannot be null');
        }
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets order_line
     *
     * @return \cbdesk\Mirakl\Model\DR12Response200DataOrderLine|null
     */
    public function getOrderLine()
    {
        return $this->container['order_line'];
    }

    /**
     * Sets order_line
     *
     * @param \cbdesk\Mirakl\Model\DR12Response200DataOrderLine|null $order_line order_line
     *
     * @return self
     */
    public function setOrderLine($order_line)
    {
        if (is_null($order_line)) {
            throw new \InvalidArgumentException('non-nullable order_line cannot be null');
        }
        $this->container['order_line'] = $order_line;

        return $this;
    }

    /**
     * Gets origin_unit_price_excluding_taxes
     *
     * @return float|null
     */
    public function getOriginUnitPriceExcludingTaxes()
    {
        return $this->container['origin_unit_price_excluding_taxes'];
    }

    /**
     * Sets origin_unit_price_excluding_taxes
     *
     * @param float|null $origin_unit_price_excluding_taxes The original unit price excluding tax of the offer associated with the order line
     *
     * @return self
     */
    public function setOriginUnitPriceExcludingTaxes($origin_unit_price_excluding_taxes)
    {
        if (is_null($origin_unit_price_excluding_taxes)) {
            throw new \InvalidArgumentException('non-nullable origin_unit_price_excluding_taxes cannot be null');
        }
        $this->container['origin_unit_price_excluding_taxes'] = $origin_unit_price_excluding_taxes;

        return $this;
    }

    /**
     * Gets origin_unit_price_including_taxes
     *
     * @return float|null
     */
    public function getOriginUnitPriceIncludingTaxes()
    {
        return $this->container['origin_unit_price_including_taxes'];
    }

    /**
     * Sets origin_unit_price_including_taxes
     *
     * @param float|null $origin_unit_price_including_taxes The original unit price including tax of the offer associated with the order line
     *
     * @return self
     */
    public function setOriginUnitPriceIncludingTaxes($origin_unit_price_including_taxes)
    {
        if (is_null($origin_unit_price_including_taxes)) {
            throw new \InvalidArgumentException('non-nullable origin_unit_price_including_taxes cannot be null');
        }
        $this->container['origin_unit_price_including_taxes'] = $origin_unit_price_including_taxes;

        return $this;
    }

    /**
     * Gets payment_state
     *
     * @return string|null
     */
    public function getPaymentState()
    {
        return $this->container['payment_state'];
    }

    /**
     * Sets payment_state
     *
     * @param string|null $payment_state Document request line payment status
     *
     * @return self
     */
    public function setPaymentState($payment_state)
    {
        if (is_null($payment_state)) {
            throw new \InvalidArgumentException('non-nullable payment_state cannot be null');
        }
        $this->container['payment_state'] = $payment_state;

        return $this;
    }

    /**
     * Gets price_excluding_taxes
     *
     * @return float|null
     */
    public function getPriceExcludingTaxes()
    {
        return $this->container['price_excluding_taxes'];
    }

    /**
     * Sets price_excluding_taxes
     *
     * @param float|null $price_excluding_taxes The price excluding taxes after promotions
     *
     * @return self
     */
    public function setPriceExcludingTaxes($price_excluding_taxes)
    {
        if (is_null($price_excluding_taxes)) {
            throw new \InvalidArgumentException('non-nullable price_excluding_taxes cannot be null');
        }
        $this->container['price_excluding_taxes'] = $price_excluding_taxes;

        return $this;
    }

    /**
     * Gets product
     *
     * @return \cbdesk\Mirakl\Model\DR12Response200DataProduct|null
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param \cbdesk\Mirakl\Model\DR12Response200DataProduct|null $product product
     *
     * @return self
     */
    public function setProduct($product)
    {
        if (is_null($product)) {
            throw new \InvalidArgumentException('non-nullable product cannot be null');
        }
        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int|null $quantity The quantity of the document line
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets shipping_from
     *
     * @return \cbdesk\Mirakl\Model\DR12Response200DataShippingFrom|null
     */
    public function getShippingFrom()
    {
        return $this->container['shipping_from'];
    }

    /**
     * Sets shipping_from
     *
     * @param \cbdesk\Mirakl\Model\DR12Response200DataShippingFrom|null $shipping_from shipping_from
     *
     * @return self
     */
    public function setShippingFrom($shipping_from)
    {
        if (is_null($shipping_from)) {
            throw new \InvalidArgumentException('non-nullable shipping_from cannot be null');
        }
        $this->container['shipping_from'] = $shipping_from;

        return $this;
    }

    /**
     * Gets shipping_price_excluding_taxes
     *
     * @return float|null
     */
    public function getShippingPriceExcludingTaxes()
    {
        return $this->container['shipping_price_excluding_taxes'];
    }

    /**
     * Sets shipping_price_excluding_taxes
     *
     * @param float|null $shipping_price_excluding_taxes The shipping price excluding taxes
     *
     * @return self
     */
    public function setShippingPriceExcludingTaxes($shipping_price_excluding_taxes)
    {
        if (is_null($shipping_price_excluding_taxes)) {
            throw new \InvalidArgumentException('non-nullable shipping_price_excluding_taxes cannot be null');
        }
        $this->container['shipping_price_excluding_taxes'] = $shipping_price_excluding_taxes;

        return $this;
    }

    /**
     * Gets shipping_taxes
     *
     * @return \cbdesk\Mirakl\Model\DR12Response200DataShippingTaxes[]|null
     */
    public function getShippingTaxes()
    {
        return $this->container['shipping_taxes'];
    }

    /**
     * Sets shipping_taxes
     *
     * @param \cbdesk\Mirakl\Model\DR12Response200DataShippingTaxes[]|null $shipping_taxes The shipping taxes
     *
     * @return self
     */
    public function setShippingTaxes($shipping_taxes)
    {
        if (is_null($shipping_taxes)) {
            throw new \InvalidArgumentException('non-nullable shipping_taxes cannot be null');
        }
        $this->container['shipping_taxes'] = $shipping_taxes;

        return $this;
    }

    /**
     * Gets shipping_to
     *
     * @return \cbdesk\Mirakl\Model\DR12Response200DataShippingTo|null
     */
    public function getShippingTo()
    {
        return $this->container['shipping_to'];
    }

    /**
     * Sets shipping_to
     *
     * @param \cbdesk\Mirakl\Model\DR12Response200DataShippingTo|null $shipping_to shipping_to
     *
     * @return self
     */
    public function setShippingTo($shipping_to)
    {
        if (is_null($shipping_to)) {
            throw new \InvalidArgumentException('non-nullable shipping_to cannot be null');
        }
        $this->container['shipping_to'] = $shipping_to;

        return $this;
    }

    /**
     * Gets shop
     *
     * @return \cbdesk\Mirakl\Model\DR12Response200DataShop|null
     */
    public function getShop()
    {
        return $this->container['shop'];
    }

    /**
     * Sets shop
     *
     * @param \cbdesk\Mirakl\Model\DR12Response200DataShop|null $shop shop
     *
     * @return self
     */
    public function setShop($shop)
    {
        if (is_null($shop)) {
            throw new \InvalidArgumentException('non-nullable shop cannot be null');
        }
        $this->container['shop'] = $shop;

        return $this;
    }

    /**
     * Gets tax_legal_notice
     *
     * @return string|null
     */
    public function getTaxLegalNotice()
    {
        return $this->container['tax_legal_notice'];
    }

    /**
     * Sets tax_legal_notice
     *
     * @param string|null $tax_legal_notice The legal notice applying to the offer’s tax calculation
     *
     * @return self
     */
    public function setTaxLegalNotice($tax_legal_notice)
    {
        if (is_null($tax_legal_notice)) {
            throw new \InvalidArgumentException('non-nullable tax_legal_notice cannot be null');
        }
        $this->container['tax_legal_notice'] = $tax_legal_notice;

        return $this;
    }

    /**
     * Gets taxes
     *
     * @return \cbdesk\Mirakl\Model\DR12Response200DataTaxes[]|null
     */
    public function getTaxes()
    {
        return $this->container['taxes'];
    }

    /**
     * Sets taxes
     *
     * @param \cbdesk\Mirakl\Model\DR12Response200DataTaxes[]|null $taxes The taxes
     *
     * @return self
     */
    public function setTaxes($taxes)
    {
        if (is_null($taxes)) {
            throw new \InvalidArgumentException('non-nullable taxes cannot be null');
        }
        $this->container['taxes'] = $taxes;

        return $this;
    }

    /**
     * Gets total_price_including_taxes
     *
     * @return float|null
     */
    public function getTotalPriceIncludingTaxes()
    {
        return $this->container['total_price_including_taxes'];
    }

    /**
     * Sets total_price_including_taxes
     *
     * @param float|null $total_price_including_taxes The total price
     *
     * @return self
     */
    public function setTotalPriceIncludingTaxes($total_price_including_taxes)
    {
        if (is_null($total_price_including_taxes)) {
            throw new \InvalidArgumentException('non-nullable total_price_including_taxes cannot be null');
        }
        $this->container['total_price_including_taxes'] = $total_price_including_taxes;

        return $this;
    }

    /**
     * Gets unit_price_excluding_taxes
     *
     * @return float|null
     */
    public function getUnitPriceExcludingTaxes()
    {
        return $this->container['unit_price_excluding_taxes'];
    }

    /**
     * Sets unit_price_excluding_taxes
     *
     * @param float|null $unit_price_excluding_taxes The unit price excluding taxes after promotions
     *
     * @return self
     */
    public function setUnitPriceExcludingTaxes($unit_price_excluding_taxes)
    {
        if (is_null($unit_price_excluding_taxes)) {
            throw new \InvalidArgumentException('non-nullable unit_price_excluding_taxes cannot be null');
        }
        $this->container['unit_price_excluding_taxes'] = $unit_price_excluding_taxes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


