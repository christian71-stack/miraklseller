<?php
/**
 * ST12Response200Data
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  cbdesk\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mirakl Marketplace APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest-release
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace cbdesk\Mirakl\Model;

use \ArrayAccess;
use \cbdesk\Mirakl\ObjectSerializer;

/**
 * ST12Response200Data Class Doc Comment
 *
 * @category Class
 * @package  cbdesk\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ST12Response200Data implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ST12_Response_200_Data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'fulfillment' => '\cbdesk\Mirakl\Model\ST12Response200DataFulfillment',
        'order_id' => 'string',
        'references' => '\cbdesk\Mirakl\Model\ST12Response200DataReferences',
        'shipment_lines' => '\cbdesk\Mirakl\Model\ST12Response200DataShipmentLines[]',
        'shipping_address' => '\cbdesk\Mirakl\Model\ST12Response200DataShippingAddress',
        'shipping_date' => '\DateTime',
        'shipping_deadline' => '\DateTime',
        'shipping_type_code' => 'string',
        'shipping_type_standard_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'fulfillment' => null,
        'order_id' => null,
        'references' => null,
        'shipment_lines' => null,
        'shipping_address' => null,
        'shipping_date' => 'date-time',
        'shipping_deadline' => 'date-time',
        'shipping_type_code' => null,
        'shipping_type_standard_code' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'fulfillment' => false,
        'order_id' => false,
        'references' => false,
        'shipment_lines' => false,
        'shipping_address' => false,
        'shipping_date' => false,
        'shipping_deadline' => false,
        'shipping_type_code' => false,
        'shipping_type_standard_code' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'fulfillment' => 'fulfillment',
        'order_id' => 'order_id',
        'references' => 'references',
        'shipment_lines' => 'shipment_lines',
        'shipping_address' => 'shipping_address',
        'shipping_date' => 'shipping_date',
        'shipping_deadline' => 'shipping_deadline',
        'shipping_type_code' => 'shipping_type_code',
        'shipping_type_standard_code' => 'shipping_type_standard_code'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'fulfillment' => 'setFulfillment',
        'order_id' => 'setOrderId',
        'references' => 'setReferences',
        'shipment_lines' => 'setShipmentLines',
        'shipping_address' => 'setShippingAddress',
        'shipping_date' => 'setShippingDate',
        'shipping_deadline' => 'setShippingDeadline',
        'shipping_type_code' => 'setShippingTypeCode',
        'shipping_type_standard_code' => 'setShippingTypeStandardCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'fulfillment' => 'getFulfillment',
        'order_id' => 'getOrderId',
        'references' => 'getReferences',
        'shipment_lines' => 'getShipmentLines',
        'shipping_address' => 'getShippingAddress',
        'shipping_date' => 'getShippingDate',
        'shipping_deadline' => 'getShippingDeadline',
        'shipping_type_code' => 'getShippingTypeCode',
        'shipping_type_standard_code' => 'getShippingTypeStandardCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('fulfillment', $data ?? [], null);
        $this->setIfExists('order_id', $data ?? [], null);
        $this->setIfExists('references', $data ?? [], null);
        $this->setIfExists('shipment_lines', $data ?? [], null);
        $this->setIfExists('shipping_address', $data ?? [], null);
        $this->setIfExists('shipping_date', $data ?? [], null);
        $this->setIfExists('shipping_deadline', $data ?? [], null);
        $this->setIfExists('shipping_type_code', $data ?? [], null);
        $this->setIfExists('shipping_type_standard_code', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets fulfillment
     *
     * @return \cbdesk\Mirakl\Model\ST12Response200DataFulfillment|null
     */
    public function getFulfillment()
    {
        return $this->container['fulfillment'];
    }

    /**
     * Sets fulfillment
     *
     * @param \cbdesk\Mirakl\Model\ST12Response200DataFulfillment|null $fulfillment fulfillment
     *
     * @return self
     */
    public function setFulfillment($fulfillment)
    {
        if (is_null($fulfillment)) {
            throw new \InvalidArgumentException('non-nullable fulfillment cannot be null');
        }
        $this->container['fulfillment'] = $fulfillment;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return string|null
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param string|null $order_id Order id
     *
     * @return self
     */
    public function setOrderId($order_id)
    {
        if (is_null($order_id)) {
            throw new \InvalidArgumentException('non-nullable order_id cannot be null');
        }
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets references
     *
     * @return \cbdesk\Mirakl\Model\ST12Response200DataReferences|null
     */
    public function getReferences()
    {
        return $this->container['references'];
    }

    /**
     * Sets references
     *
     * @param \cbdesk\Mirakl\Model\ST12Response200DataReferences|null $references references
     *
     * @return self
     */
    public function setReferences($references)
    {
        if (is_null($references)) {
            throw new \InvalidArgumentException('non-nullable references cannot be null');
        }
        $this->container['references'] = $references;

        return $this;
    }

    /**
     * Gets shipment_lines
     *
     * @return \cbdesk\Mirakl\Model\ST12Response200DataShipmentLines[]|null
     */
    public function getShipmentLines()
    {
        return $this->container['shipment_lines'];
    }

    /**
     * Sets shipment_lines
     *
     * @param \cbdesk\Mirakl\Model\ST12Response200DataShipmentLines[]|null $shipment_lines Shipment lines
     *
     * @return self
     */
    public function setShipmentLines($shipment_lines)
    {
        if (is_null($shipment_lines)) {
            throw new \InvalidArgumentException('non-nullable shipment_lines cannot be null');
        }
        $this->container['shipment_lines'] = $shipment_lines;

        return $this;
    }

    /**
     * Gets shipping_address
     *
     * @return \cbdesk\Mirakl\Model\ST12Response200DataShippingAddress|null
     */
    public function getShippingAddress()
    {
        return $this->container['shipping_address'];
    }

    /**
     * Sets shipping_address
     *
     * @param \cbdesk\Mirakl\Model\ST12Response200DataShippingAddress|null $shipping_address shipping_address
     *
     * @return self
     */
    public function setShippingAddress($shipping_address)
    {
        if (is_null($shipping_address)) {
            throw new \InvalidArgumentException('non-nullable shipping_address cannot be null');
        }
        $this->container['shipping_address'] = $shipping_address;

        return $this;
    }

    /**
     * Gets shipping_date
     *
     * @return \DateTime|null
     */
    public function getShippingDate()
    {
        return $this->container['shipping_date'];
    }

    /**
     * Sets shipping_date
     *
     * @param \DateTime|null $shipping_date Shipping date
     *
     * @return self
     */
    public function setShippingDate($shipping_date)
    {
        if (is_null($shipping_date)) {
            throw new \InvalidArgumentException('non-nullable shipping_date cannot be null');
        }
        $this->container['shipping_date'] = $shipping_date;

        return $this;
    }

    /**
     * Gets shipping_deadline
     *
     * @return \DateTime|null
     */
    public function getShippingDeadline()
    {
        return $this->container['shipping_deadline'];
    }

    /**
     * Sets shipping_deadline
     *
     * @param \DateTime|null $shipping_deadline Shipping deadline
     *
     * @return self
     */
    public function setShippingDeadline($shipping_deadline)
    {
        if (is_null($shipping_deadline)) {
            throw new \InvalidArgumentException('non-nullable shipping_deadline cannot be null');
        }
        $this->container['shipping_deadline'] = $shipping_deadline;

        return $this;
    }

    /**
     * Gets shipping_type_code
     *
     * @return string|null
     */
    public function getShippingTypeCode()
    {
        return $this->container['shipping_type_code'];
    }

    /**
     * Sets shipping_type_code
     *
     * @param string|null $shipping_type_code Code of shipping's type
     *
     * @return self
     */
    public function setShippingTypeCode($shipping_type_code)
    {
        if (is_null($shipping_type_code)) {
            throw new \InvalidArgumentException('non-nullable shipping_type_code cannot be null');
        }
        $this->container['shipping_type_code'] = $shipping_type_code;

        return $this;
    }

    /**
     * Gets shipping_type_standard_code
     *
     * @return string|null
     */
    public function getShippingTypeStandardCode()
    {
        return $this->container['shipping_type_standard_code'];
    }

    /**
     * Sets shipping_type_standard_code
     *
     * @param string|null $shipping_type_standard_code Shipping type's standard code
     *
     * @return self
     */
    public function setShippingTypeStandardCode($shipping_type_standard_code)
    {
        if (is_null($shipping_type_standard_code)) {
            throw new \InvalidArgumentException('non-nullable shipping_type_standard_code cannot be null');
        }
        $this->container['shipping_type_standard_code'] = $shipping_type_standard_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


