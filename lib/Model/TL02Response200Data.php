<?php
/**
 * TL02Response200Data
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  cbdesk\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mirakl Marketplace APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest-release
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace cbdesk\Mirakl\Model;

use \ArrayAccess;
use \cbdesk\Mirakl\ObjectSerializer;

/**
 * TL02Response200Data Class Doc Comment
 *
 * @category Class
 * @package  cbdesk\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TL02Response200Data implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TL02_Response_200_Data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'accounting_document_creation_date' => '\DateTime',
        'accounting_document_id' => 'string',
        'accounting_document_number' => 'string',
        'amount' => 'int',
        'amount_credited' => 'int',
        'amount_debited' => 'int',
        'balance' => 'int',
        'currency_iso_code' => 'string',
        'date_created' => '\DateTime',
        'entities' => '\cbdesk\Mirakl\Model\TL02Response200DataEntities',
        'id' => 'string',
        'last_updated' => '\DateTime',
        'pay_out_psp_code' => 'string',
        'payment_state' => 'string',
        'psp_balance' => 'int',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'accounting_document_creation_date' => 'date-time',
        'accounting_document_id' => null,
        'accounting_document_number' => null,
        'amount' => 'int64',
        'amount_credited' => 'int64',
        'amount_debited' => 'int64',
        'balance' => 'int64',
        'currency_iso_code' => null,
        'date_created' => 'date-time',
        'entities' => null,
        'id' => null,
        'last_updated' => 'date-time',
        'pay_out_psp_code' => null,
        'payment_state' => null,
        'psp_balance' => 'int64',
        'type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'accounting_document_creation_date' => false,
        'accounting_document_id' => false,
        'accounting_document_number' => false,
        'amount' => false,
        'amount_credited' => false,
        'amount_debited' => false,
        'balance' => false,
        'currency_iso_code' => false,
        'date_created' => false,
        'entities' => false,
        'id' => false,
        'last_updated' => false,
        'pay_out_psp_code' => false,
        'payment_state' => false,
        'psp_balance' => false,
        'type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accounting_document_creation_date' => 'accounting_document_creation_date',
        'accounting_document_id' => 'accounting_document_id',
        'accounting_document_number' => 'accounting_document_number',
        'amount' => 'amount',
        'amount_credited' => 'amount_credited',
        'amount_debited' => 'amount_debited',
        'balance' => 'balance',
        'currency_iso_code' => 'currency_iso_code',
        'date_created' => 'date_created',
        'entities' => 'entities',
        'id' => 'id',
        'last_updated' => 'last_updated',
        'pay_out_psp_code' => 'pay_out_psp_code',
        'payment_state' => 'payment_state',
        'psp_balance' => 'psp_balance',
        'type' => 'type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accounting_document_creation_date' => 'setAccountingDocumentCreationDate',
        'accounting_document_id' => 'setAccountingDocumentId',
        'accounting_document_number' => 'setAccountingDocumentNumber',
        'amount' => 'setAmount',
        'amount_credited' => 'setAmountCredited',
        'amount_debited' => 'setAmountDebited',
        'balance' => 'setBalance',
        'currency_iso_code' => 'setCurrencyIsoCode',
        'date_created' => 'setDateCreated',
        'entities' => 'setEntities',
        'id' => 'setId',
        'last_updated' => 'setLastUpdated',
        'pay_out_psp_code' => 'setPayOutPspCode',
        'payment_state' => 'setPaymentState',
        'psp_balance' => 'setPspBalance',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accounting_document_creation_date' => 'getAccountingDocumentCreationDate',
        'accounting_document_id' => 'getAccountingDocumentId',
        'accounting_document_number' => 'getAccountingDocumentNumber',
        'amount' => 'getAmount',
        'amount_credited' => 'getAmountCredited',
        'amount_debited' => 'getAmountDebited',
        'balance' => 'getBalance',
        'currency_iso_code' => 'getCurrencyIsoCode',
        'date_created' => 'getDateCreated',
        'entities' => 'getEntities',
        'id' => 'getId',
        'last_updated' => 'getLastUpdated',
        'pay_out_psp_code' => 'getPayOutPspCode',
        'payment_state' => 'getPaymentState',
        'psp_balance' => 'getPspBalance',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('accounting_document_creation_date', $data ?? [], null);
        $this->setIfExists('accounting_document_id', $data ?? [], null);
        $this->setIfExists('accounting_document_number', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('amount_credited', $data ?? [], null);
        $this->setIfExists('amount_debited', $data ?? [], null);
        $this->setIfExists('balance', $data ?? [], null);
        $this->setIfExists('currency_iso_code', $data ?? [], null);
        $this->setIfExists('date_created', $data ?? [], null);
        $this->setIfExists('entities', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('last_updated', $data ?? [], null);
        $this->setIfExists('pay_out_psp_code', $data ?? [], null);
        $this->setIfExists('payment_state', $data ?? [], null);
        $this->setIfExists('psp_balance', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets accounting_document_creation_date
     *
     * @return \DateTime|null
     */
    public function getAccountingDocumentCreationDate()
    {
        return $this->container['accounting_document_creation_date'];
    }

    /**
     * Sets accounting_document_creation_date
     *
     * @param \DateTime|null $accounting_document_creation_date The billing cycle's accounting document creation date
     *
     * @return self
     */
    public function setAccountingDocumentCreationDate($accounting_document_creation_date)
    {
        if (is_null($accounting_document_creation_date)) {
            throw new \InvalidArgumentException('non-nullable accounting_document_creation_date cannot be null');
        }
        $this->container['accounting_document_creation_date'] = $accounting_document_creation_date;

        return $this;
    }

    /**
     * Gets accounting_document_id
     *
     * @return string|null
     */
    public function getAccountingDocumentId()
    {
        return $this->container['accounting_document_id'];
    }

    /**
     * Sets accounting_document_id
     *
     * @param string|null $accounting_document_id The billing cycle's accounting document id. This field is only available for documents requests of the type: <code>SHOP_BILLING_CYCLE_PURCHASE_ORDER</code>.
     *
     * @return self
     */
    public function setAccountingDocumentId($accounting_document_id)
    {
        if (is_null($accounting_document_id)) {
            throw new \InvalidArgumentException('non-nullable accounting_document_id cannot be null');
        }
        $this->container['accounting_document_id'] = $accounting_document_id;

        return $this;
    }

    /**
     * Gets accounting_document_number
     *
     * @return string|null
     */
    public function getAccountingDocumentNumber()
    {
        return $this->container['accounting_document_number'];
    }

    /**
     * Sets accounting_document_number
     *
     * @param string|null $accounting_document_number The billing cycle's accounting document number
     *
     * @return self
     */
    public function setAccountingDocumentNumber($accounting_document_number)
    {
        if (is_null($accounting_document_number)) {
            throw new \InvalidArgumentException('non-nullable accounting_document_number cannot be null');
        }
        $this->container['accounting_document_number'] = $accounting_document_number;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return int|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int|null $amount The amount.
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets amount_credited
     *
     * @return int|null
     */
    public function getAmountCredited()
    {
        return $this->container['amount_credited'];
    }

    /**
     * Sets amount_credited
     *
     * @param int|null $amount_credited The amount credited.
     *
     * @return self
     */
    public function setAmountCredited($amount_credited)
    {
        if (is_null($amount_credited)) {
            throw new \InvalidArgumentException('non-nullable amount_credited cannot be null');
        }
        $this->container['amount_credited'] = $amount_credited;

        return $this;
    }

    /**
     * Gets amount_debited
     *
     * @return int|null
     */
    public function getAmountDebited()
    {
        return $this->container['amount_debited'];
    }

    /**
     * Sets amount_debited
     *
     * @param int|null $amount_debited The amount debited.
     *
     * @return self
     */
    public function setAmountDebited($amount_debited)
    {
        if (is_null($amount_debited)) {
            throw new \InvalidArgumentException('non-nullable amount_debited cannot be null');
        }
        $this->container['amount_debited'] = $amount_debited;

        return $this;
    }

    /**
     * Gets balance
     *
     * @return int|null
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param int|null $balance The balance of the transaction.
     *
     * @return self
     */
    public function setBalance($balance)
    {
        if (is_null($balance)) {
            throw new \InvalidArgumentException('non-nullable balance cannot be null');
        }
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets currency_iso_code
     *
     * @return string|null
     */
    public function getCurrencyIsoCode()
    {
        return $this->container['currency_iso_code'];
    }

    /**
     * Sets currency_iso_code
     *
     * @param string|null $currency_iso_code The currency of the shop (iso format)
     *
     * @return self
     */
    public function setCurrencyIsoCode($currency_iso_code)
    {
        if (is_null($currency_iso_code)) {
            throw new \InvalidArgumentException('non-nullable currency_iso_code cannot be null');
        }
        $this->container['currency_iso_code'] = $currency_iso_code;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return \DateTime|null
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param \DateTime|null $date_created Creation date of the transaction line
     *
     * @return self
     */
    public function setDateCreated($date_created)
    {
        if (is_null($date_created)) {
            throw new \InvalidArgumentException('non-nullable date_created cannot be null');
        }
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets entities
     *
     * @return \cbdesk\Mirakl\Model\TL02Response200DataEntities|null
     */
    public function getEntities()
    {
        return $this->container['entities'];
    }

    /**
     * Sets entities
     *
     * @param \cbdesk\Mirakl\Model\TL02Response200DataEntities|null $entities entities
     *
     * @return self
     */
    public function setEntities($entities)
    {
        if (is_null($entities)) {
            throw new \InvalidArgumentException('non-nullable entities cannot be null');
        }
        $this->container['entities'] = $entities;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Identifier of the transaction
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return \DateTime|null
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param \DateTime|null $last_updated Date of last update of the transaction line
     *
     * @return self
     */
    public function setLastUpdated($last_updated)
    {
        if (is_null($last_updated)) {
            throw new \InvalidArgumentException('non-nullable last_updated cannot be null');
        }
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets pay_out_psp_code
     *
     * @return string|null
     */
    public function getPayOutPspCode()
    {
        return $this->container['pay_out_psp_code'];
    }

    /**
     * Sets pay_out_psp_code
     *
     * @param string|null $pay_out_psp_code Pay-out PSP code associated with the transaction.
     *
     * @return self
     */
    public function setPayOutPspCode($pay_out_psp_code)
    {
        if (is_null($pay_out_psp_code)) {
            throw new \InvalidArgumentException('non-nullable pay_out_psp_code cannot be null');
        }
        $this->container['pay_out_psp_code'] = $pay_out_psp_code;

        return $this;
    }

    /**
     * Gets payment_state
     *
     * @return string|null
     */
    public function getPaymentState()
    {
        return $this->container['payment_state'];
    }

    /**
     * Sets payment_state
     *
     * @param string|null $payment_state The payment state of the transaction.
     *
     * @return self
     */
    public function setPaymentState($payment_state)
    {
        if (is_null($payment_state)) {
            throw new \InvalidArgumentException('non-nullable payment_state cannot be null');
        }
        $this->container['payment_state'] = $payment_state;

        return $this;
    }

    /**
     * Gets psp_balance
     *
     * @return int|null
     */
    public function getPspBalance()
    {
        return $this->container['psp_balance'];
    }

    /**
     * Sets psp_balance
     *
     * @param int|null $psp_balance The Pay-out balance of the transaction.
     *
     * @return self
     */
    public function setPspBalance($psp_balance)
    {
        if (is_null($psp_balance)) {
            throw new \InvalidArgumentException('non-nullable psp_balance cannot be null');
        }
        $this->container['psp_balance'] = $psp_balance;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Type of transaction (refund, transaction fee, etc ...)
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


