<?php
/**
 * A01Response200DefaultBillingInformationFiscalRepresentative
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  cbdesk\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mirakl Marketplace APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest-release
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace cbdesk\Mirakl\Model;

use \ArrayAccess;
use \cbdesk\Mirakl\ObjectSerializer;

/**
 * A01Response200DefaultBillingInformationFiscalRepresentative Class Doc Comment
 *
 * @category Class
 * @package  cbdesk\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class A01Response200DefaultBillingInformationFiscalRepresentative implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'A01_Response_200_DefaultBillingInformation_FiscalRepresentative';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'city' => 'string',
        'civility' => 'string',
        'company_registration_name' => 'string',
        'company_registration_number' => 'string',
        'country_iso_code' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'local_tax_number' => 'string',
        'state' => 'string',
        'street_1' => 'string',
        'street_2' => 'string',
        'zip_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'city' => null,
        'civility' => null,
        'company_registration_name' => null,
        'company_registration_number' => null,
        'country_iso_code' => null,
        'first_name' => null,
        'last_name' => null,
        'local_tax_number' => null,
        'state' => null,
        'street_1' => null,
        'street_2' => null,
        'zip_code' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'city' => false,
        'civility' => false,
        'company_registration_name' => false,
        'company_registration_number' => false,
        'country_iso_code' => false,
        'first_name' => false,
        'last_name' => false,
        'local_tax_number' => false,
        'state' => false,
        'street_1' => false,
        'street_2' => false,
        'zip_code' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'city' => 'city',
        'civility' => 'civility',
        'company_registration_name' => 'company_registration_name',
        'company_registration_number' => 'company_registration_number',
        'country_iso_code' => 'country_iso_code',
        'first_name' => 'first_name',
        'last_name' => 'last_name',
        'local_tax_number' => 'local_tax_number',
        'state' => 'state',
        'street_1' => 'street_1',
        'street_2' => 'street_2',
        'zip_code' => 'zip_code'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'city' => 'setCity',
        'civility' => 'setCivility',
        'company_registration_name' => 'setCompanyRegistrationName',
        'company_registration_number' => 'setCompanyRegistrationNumber',
        'country_iso_code' => 'setCountryIsoCode',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'local_tax_number' => 'setLocalTaxNumber',
        'state' => 'setState',
        'street_1' => 'setStreet1',
        'street_2' => 'setStreet2',
        'zip_code' => 'setZipCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'city' => 'getCity',
        'civility' => 'getCivility',
        'company_registration_name' => 'getCompanyRegistrationName',
        'company_registration_number' => 'getCompanyRegistrationNumber',
        'country_iso_code' => 'getCountryIsoCode',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'local_tax_number' => 'getLocalTaxNumber',
        'state' => 'getState',
        'street_1' => 'getStreet1',
        'street_2' => 'getStreet2',
        'zip_code' => 'getZipCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('city', $data ?? [], null);
        $this->setIfExists('civility', $data ?? [], null);
        $this->setIfExists('company_registration_name', $data ?? [], null);
        $this->setIfExists('company_registration_number', $data ?? [], null);
        $this->setIfExists('country_iso_code', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('local_tax_number', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('street_1', $data ?? [], null);
        $this->setIfExists('street_2', $data ?? [], null);
        $this->setIfExists('zip_code', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city The city where the fiscal representative is located.
     *
     * @return self
     */
    public function setCity($city)
    {
        if (is_null($city)) {
            throw new \InvalidArgumentException('non-nullable city cannot be null');
        }
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets civility
     *
     * @return string|null
     */
    public function getCivility()
    {
        return $this->container['civility'];
    }

    /**
     * Sets civility
     *
     * @param string|null $civility Civility of the fiscal representative
     *
     * @return self
     */
    public function setCivility($civility)
    {
        if (is_null($civility)) {
            throw new \InvalidArgumentException('non-nullable civility cannot be null');
        }
        $this->container['civility'] = $civility;

        return $this;
    }

    /**
     * Gets company_registration_name
     *
     * @return string|null
     */
    public function getCompanyRegistrationName()
    {
        return $this->container['company_registration_name'];
    }

    /**
     * Sets company_registration_name
     *
     * @param string|null $company_registration_name The name of the fiscal representative, as registered if the business registry of the fiscal representative's country
     *
     * @return self
     */
    public function setCompanyRegistrationName($company_registration_name)
    {
        if (is_null($company_registration_name)) {
            throw new \InvalidArgumentException('non-nullable company_registration_name cannot be null');
        }
        $this->container['company_registration_name'] = $company_registration_name;

        return $this;
    }

    /**
     * Gets company_registration_number
     *
     * @return string|null
     */
    public function getCompanyRegistrationNumber()
    {
        return $this->container['company_registration_number'];
    }

    /**
     * Sets company_registration_number
     *
     * @param string|null $company_registration_number The unique code used to identify the fiscal representative and verify its legal existence as an incorporated entity
     *
     * @return self
     */
    public function setCompanyRegistrationNumber($company_registration_number)
    {
        if (is_null($company_registration_number)) {
            throw new \InvalidArgumentException('non-nullable company_registration_number cannot be null');
        }
        $this->container['company_registration_number'] = $company_registration_number;

        return $this;
    }

    /**
     * Gets country_iso_code
     *
     * @return string|null
     */
    public function getCountryIsoCode()
    {
        return $this->container['country_iso_code'];
    }

    /**
     * Sets country_iso_code
     *
     * @param string|null $country_iso_code Country ISO 3166-1 code of the fiscal representative address
     *
     * @return self
     */
    public function setCountryIsoCode($country_iso_code)
    {
        if (is_null($country_iso_code)) {
            throw new \InvalidArgumentException('non-nullable country_iso_code cannot be null');
        }
        $this->container['country_iso_code'] = $country_iso_code;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name First name of the fiscal representative
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            throw new \InvalidArgumentException('non-nullable first_name cannot be null');
        }
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name Last name of the fiscal representative
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (is_null($last_name)) {
            throw new \InvalidArgumentException('non-nullable last_name cannot be null');
        }
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets local_tax_number
     *
     * @return string|null
     */
    public function getLocalTaxNumber()
    {
        return $this->container['local_tax_number'];
    }

    /**
     * Sets local_tax_number
     *
     * @param string|null $local_tax_number The identifying number of the fiscal representative for VAT or GST purposes
     *
     * @return self
     */
    public function setLocalTaxNumber($local_tax_number)
    {
        if (is_null($local_tax_number)) {
            throw new \InvalidArgumentException('non-nullable local_tax_number cannot be null');
        }
        $this->container['local_tax_number'] = $local_tax_number;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state The state/province/region where the fiscal representative is located.
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets street_1
     *
     * @return string|null
     */
    public function getStreet1()
    {
        return $this->container['street_1'];
    }

    /**
     * Sets street_1
     *
     * @param string|null $street_1 The first line of address of the fiscal representative
     *
     * @return self
     */
    public function setStreet1($street_1)
    {
        if (is_null($street_1)) {
            throw new \InvalidArgumentException('non-nullable street_1 cannot be null');
        }
        $this->container['street_1'] = $street_1;

        return $this;
    }

    /**
     * Gets street_2
     *
     * @return string|null
     */
    public function getStreet2()
    {
        return $this->container['street_2'];
    }

    /**
     * Sets street_2
     *
     * @param string|null $street_2 The second line of address of the fiscal representative
     *
     * @return self
     */
    public function setStreet2($street_2)
    {
        if (is_null($street_2)) {
            throw new \InvalidArgumentException('non-nullable street_2 cannot be null');
        }
        $this->container['street_2'] = $street_2;

        return $this;
    }

    /**
     * Gets zip_code
     *
     * @return string|null
     */
    public function getZipCode()
    {
        return $this->container['zip_code'];
    }

    /**
     * Sets zip_code
     *
     * @param string|null $zip_code The Zip/Postal code corresponding to the fiscal representative location
     *
     * @return self
     */
    public function setZipCode($zip_code)
    {
        if (is_null($zip_code)) {
            throw new \InvalidArgumentException('non-nullable zip_code cannot be null');
        }
        $this->container['zip_code'] = $zip_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


