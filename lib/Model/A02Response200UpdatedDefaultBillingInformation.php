<?php
/**
 * A02Response200UpdatedDefaultBillingInformation
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  cbdesk\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mirakl Marketplace APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest-release
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace cbdesk\Mirakl\Model;

use \ArrayAccess;
use \cbdesk\Mirakl\ObjectSerializer;

/**
 * A02Response200UpdatedDefaultBillingInformation Class Doc Comment
 *
 * @category Class
 * @package  cbdesk\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class A02Response200UpdatedDefaultBillingInformation implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'A02_Response_200_Updated_DefaultBillingInformation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'corporate_information' => '\cbdesk\Mirakl\Model\A02Response200UpdatedDefaultBillingInformationCorporateInformation',
        'default_language' => 'string',
        'fiscal_information' => '\cbdesk\Mirakl\Model\A02Response200UpdatedDefaultBillingInformationFiscalInformation',
        'fiscal_representative' => '\cbdesk\Mirakl\Model\A02Response200UpdatedDefaultBillingInformationFiscalRepresentative',
        'id' => 'string',
        'personal_information' => '\cbdesk\Mirakl\Model\A02Response200UpdatedDefaultBillingInformationPersonalInformation',
        'registration_address' => '\cbdesk\Mirakl\Model\A02Response200UpdatedDefaultBillingInformationRegistrationAddress'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'corporate_information' => null,
        'default_language' => null,
        'fiscal_information' => null,
        'fiscal_representative' => null,
        'id' => null,
        'personal_information' => null,
        'registration_address' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'corporate_information' => false,
        'default_language' => false,
        'fiscal_information' => false,
        'fiscal_representative' => false,
        'id' => false,
        'personal_information' => false,
        'registration_address' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'corporate_information' => 'corporate_information',
        'default_language' => 'default_language',
        'fiscal_information' => 'fiscal_information',
        'fiscal_representative' => 'fiscal_representative',
        'id' => 'id',
        'personal_information' => 'personal_information',
        'registration_address' => 'registration_address'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'corporate_information' => 'setCorporateInformation',
        'default_language' => 'setDefaultLanguage',
        'fiscal_information' => 'setFiscalInformation',
        'fiscal_representative' => 'setFiscalRepresentative',
        'id' => 'setId',
        'personal_information' => 'setPersonalInformation',
        'registration_address' => 'setRegistrationAddress'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'corporate_information' => 'getCorporateInformation',
        'default_language' => 'getDefaultLanguage',
        'fiscal_information' => 'getFiscalInformation',
        'fiscal_representative' => 'getFiscalRepresentative',
        'id' => 'getId',
        'personal_information' => 'getPersonalInformation',
        'registration_address' => 'getRegistrationAddress'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('corporate_information', $data ?? [], null);
        $this->setIfExists('default_language', $data ?? [], null);
        $this->setIfExists('fiscal_information', $data ?? [], null);
        $this->setIfExists('fiscal_representative', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('personal_information', $data ?? [], null);
        $this->setIfExists('registration_address', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets corporate_information
     *
     * @return \cbdesk\Mirakl\Model\A02Response200UpdatedDefaultBillingInformationCorporateInformation|null
     */
    public function getCorporateInformation()
    {
        return $this->container['corporate_information'];
    }

    /**
     * Sets corporate_information
     *
     * @param \cbdesk\Mirakl\Model\A02Response200UpdatedDefaultBillingInformationCorporateInformation|null $corporate_information corporate_information
     *
     * @return self
     */
    public function setCorporateInformation($corporate_information)
    {
        if (is_null($corporate_information)) {
            throw new \InvalidArgumentException('non-nullable corporate_information cannot be null');
        }
        $this->container['corporate_information'] = $corporate_information;

        return $this;
    }

    /**
     * Gets default_language
     *
     * @return string|null
     */
    public function getDefaultLanguage()
    {
        return $this->container['default_language'];
    }

    /**
     * Sets default_language
     *
     * @param string|null $default_language The default language of the shop, for invoicing purposes
     *
     * @return self
     */
    public function setDefaultLanguage($default_language)
    {
        if (is_null($default_language)) {
            throw new \InvalidArgumentException('non-nullable default_language cannot be null');
        }
        $this->container['default_language'] = $default_language;

        return $this;
    }

    /**
     * Gets fiscal_information
     *
     * @return \cbdesk\Mirakl\Model\A02Response200UpdatedDefaultBillingInformationFiscalInformation|null
     */
    public function getFiscalInformation()
    {
        return $this->container['fiscal_information'];
    }

    /**
     * Sets fiscal_information
     *
     * @param \cbdesk\Mirakl\Model\A02Response200UpdatedDefaultBillingInformationFiscalInformation|null $fiscal_information fiscal_information
     *
     * @return self
     */
    public function setFiscalInformation($fiscal_information)
    {
        if (is_null($fiscal_information)) {
            throw new \InvalidArgumentException('non-nullable fiscal_information cannot be null');
        }
        $this->container['fiscal_information'] = $fiscal_information;

        return $this;
    }

    /**
     * Gets fiscal_representative
     *
     * @return \cbdesk\Mirakl\Model\A02Response200UpdatedDefaultBillingInformationFiscalRepresentative|null
     */
    public function getFiscalRepresentative()
    {
        return $this->container['fiscal_representative'];
    }

    /**
     * Sets fiscal_representative
     *
     * @param \cbdesk\Mirakl\Model\A02Response200UpdatedDefaultBillingInformationFiscalRepresentative|null $fiscal_representative fiscal_representative
     *
     * @return self
     */
    public function setFiscalRepresentative($fiscal_representative)
    {
        if (is_null($fiscal_representative)) {
            throw new \InvalidArgumentException('non-nullable fiscal_representative cannot be null');
        }
        $this->container['fiscal_representative'] = $fiscal_representative;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The unique identifier of the default billing information.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets personal_information
     *
     * @return \cbdesk\Mirakl\Model\A02Response200UpdatedDefaultBillingInformationPersonalInformation|null
     */
    public function getPersonalInformation()
    {
        return $this->container['personal_information'];
    }

    /**
     * Sets personal_information
     *
     * @param \cbdesk\Mirakl\Model\A02Response200UpdatedDefaultBillingInformationPersonalInformation|null $personal_information personal_information
     *
     * @return self
     */
    public function setPersonalInformation($personal_information)
    {
        if (is_null($personal_information)) {
            throw new \InvalidArgumentException('non-nullable personal_information cannot be null');
        }
        $this->container['personal_information'] = $personal_information;

        return $this;
    }

    /**
     * Gets registration_address
     *
     * @return \cbdesk\Mirakl\Model\A02Response200UpdatedDefaultBillingInformationRegistrationAddress|null
     */
    public function getRegistrationAddress()
    {
        return $this->container['registration_address'];
    }

    /**
     * Sets registration_address
     *
     * @param \cbdesk\Mirakl\Model\A02Response200UpdatedDefaultBillingInformationRegistrationAddress|null $registration_address registration_address
     *
     * @return self
     */
    public function setRegistrationAddress($registration_address)
    {
        if (is_null($registration_address)) {
            throw new \InvalidArgumentException('non-nullable registration_address cannot be null');
        }
        $this->container['registration_address'] = $registration_address;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


