<?php
/**
 * TL03Request
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  cbdesk\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mirakl Marketplace APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest-release
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace cbdesk\Mirakl\Model;

use \ArrayAccess;
use \cbdesk\Mirakl\ObjectSerializer;

/**
 * TL03Request Class Doc Comment
 *
 * @category Class
 * @package  cbdesk\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TL03Request implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TL03_Request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'accounting_document_id' => 'string',
        'accounting_document_number' => 'string',
        'date_created_from' => '\DateTime',
        'date_created_to' => '\DateTime',
        'items_per_chunk' => 'int',
        'last_updated_from' => '\DateTime',
        'megabytes_per_chunk' => 'int',
        'order_id' => 'string[]',
        'order_line_id' => 'string[]',
        'order_reference_for_customer' => 'string[]',
        'order_reference_for_seller' => 'string[]',
        'pay_out_psp_codes' => 'string[]',
        'payment_state' => 'string[]',
        'payment_voucher_number' => 'string',
        'shop_domain' => 'string[]',
        'shop_id' => 'int',
        'shop_model' => 'string[]',
        'transaction_date_from' => '\DateTime',
        'transaction_date_to' => '\DateTime',
        'transaction_type' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'accounting_document_id' => null,
        'accounting_document_number' => null,
        'date_created_from' => 'date-time',
        'date_created_to' => 'date-time',
        'items_per_chunk' => 'int64',
        'last_updated_from' => 'date-time',
        'megabytes_per_chunk' => 'int64',
        'order_id' => null,
        'order_line_id' => null,
        'order_reference_for_customer' => null,
        'order_reference_for_seller' => null,
        'pay_out_psp_codes' => null,
        'payment_state' => null,
        'payment_voucher_number' => null,
        'shop_domain' => null,
        'shop_id' => 'int64',
        'shop_model' => null,
        'transaction_date_from' => 'date-time',
        'transaction_date_to' => 'date-time',
        'transaction_type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'accounting_document_id' => false,
        'accounting_document_number' => false,
        'date_created_from' => false,
        'date_created_to' => false,
        'items_per_chunk' => false,
        'last_updated_from' => false,
        'megabytes_per_chunk' => false,
        'order_id' => false,
        'order_line_id' => false,
        'order_reference_for_customer' => false,
        'order_reference_for_seller' => false,
        'pay_out_psp_codes' => false,
        'payment_state' => false,
        'payment_voucher_number' => false,
        'shop_domain' => false,
        'shop_id' => false,
        'shop_model' => false,
        'transaction_date_from' => false,
        'transaction_date_to' => false,
        'transaction_type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accounting_document_id' => 'accounting_document_id',
        'accounting_document_number' => 'accounting_document_number',
        'date_created_from' => 'date_created_from',
        'date_created_to' => 'date_created_to',
        'items_per_chunk' => 'items_per_chunk',
        'last_updated_from' => 'last_updated_from',
        'megabytes_per_chunk' => 'megabytes_per_chunk',
        'order_id' => 'order_id',
        'order_line_id' => 'order_line_id',
        'order_reference_for_customer' => 'order_reference_for_customer',
        'order_reference_for_seller' => 'order_reference_for_seller',
        'pay_out_psp_codes' => 'pay_out_psp_codes',
        'payment_state' => 'payment_state',
        'payment_voucher_number' => 'payment_voucher_number',
        'shop_domain' => 'shop_domain',
        'shop_id' => 'shop_id',
        'shop_model' => 'shop_model',
        'transaction_date_from' => 'transaction_date_from',
        'transaction_date_to' => 'transaction_date_to',
        'transaction_type' => 'transaction_type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accounting_document_id' => 'setAccountingDocumentId',
        'accounting_document_number' => 'setAccountingDocumentNumber',
        'date_created_from' => 'setDateCreatedFrom',
        'date_created_to' => 'setDateCreatedTo',
        'items_per_chunk' => 'setItemsPerChunk',
        'last_updated_from' => 'setLastUpdatedFrom',
        'megabytes_per_chunk' => 'setMegabytesPerChunk',
        'order_id' => 'setOrderId',
        'order_line_id' => 'setOrderLineId',
        'order_reference_for_customer' => 'setOrderReferenceForCustomer',
        'order_reference_for_seller' => 'setOrderReferenceForSeller',
        'pay_out_psp_codes' => 'setPayOutPspCodes',
        'payment_state' => 'setPaymentState',
        'payment_voucher_number' => 'setPaymentVoucherNumber',
        'shop_domain' => 'setShopDomain',
        'shop_id' => 'setShopId',
        'shop_model' => 'setShopModel',
        'transaction_date_from' => 'setTransactionDateFrom',
        'transaction_date_to' => 'setTransactionDateTo',
        'transaction_type' => 'setTransactionType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accounting_document_id' => 'getAccountingDocumentId',
        'accounting_document_number' => 'getAccountingDocumentNumber',
        'date_created_from' => 'getDateCreatedFrom',
        'date_created_to' => 'getDateCreatedTo',
        'items_per_chunk' => 'getItemsPerChunk',
        'last_updated_from' => 'getLastUpdatedFrom',
        'megabytes_per_chunk' => 'getMegabytesPerChunk',
        'order_id' => 'getOrderId',
        'order_line_id' => 'getOrderLineId',
        'order_reference_for_customer' => 'getOrderReferenceForCustomer',
        'order_reference_for_seller' => 'getOrderReferenceForSeller',
        'pay_out_psp_codes' => 'getPayOutPspCodes',
        'payment_state' => 'getPaymentState',
        'payment_voucher_number' => 'getPaymentVoucherNumber',
        'shop_domain' => 'getShopDomain',
        'shop_id' => 'getShopId',
        'shop_model' => 'getShopModel',
        'transaction_date_from' => 'getTransactionDateFrom',
        'transaction_date_to' => 'getTransactionDateTo',
        'transaction_type' => 'getTransactionType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('accounting_document_id', $data ?? [], null);
        $this->setIfExists('accounting_document_number', $data ?? [], null);
        $this->setIfExists('date_created_from', $data ?? [], null);
        $this->setIfExists('date_created_to', $data ?? [], null);
        $this->setIfExists('items_per_chunk', $data ?? [], null);
        $this->setIfExists('last_updated_from', $data ?? [], null);
        $this->setIfExists('megabytes_per_chunk', $data ?? [], null);
        $this->setIfExists('order_id', $data ?? [], null);
        $this->setIfExists('order_line_id', $data ?? [], null);
        $this->setIfExists('order_reference_for_customer', $data ?? [], null);
        $this->setIfExists('order_reference_for_seller', $data ?? [], null);
        $this->setIfExists('pay_out_psp_codes', $data ?? [], null);
        $this->setIfExists('payment_state', $data ?? [], null);
        $this->setIfExists('payment_voucher_number', $data ?? [], null);
        $this->setIfExists('shop_domain', $data ?? [], null);
        $this->setIfExists('shop_id', $data ?? [], null);
        $this->setIfExists('shop_model', $data ?? [], null);
        $this->setIfExists('transaction_date_from', $data ?? [], null);
        $this->setIfExists('transaction_date_to', $data ?? [], null);
        $this->setIfExists('transaction_type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['order_id']) && (count($this->container['order_id']) > 100)) {
            $invalidProperties[] = "invalid value for 'order_id', number of items must be less than or equal to 100.";
        }

        if (!is_null($this->container['order_id']) && (count($this->container['order_id']) < 0)) {
            $invalidProperties[] = "invalid value for 'order_id', number of items must be greater than or equal to 0.";
        }

        if (!is_null($this->container['order_line_id']) && (count($this->container['order_line_id']) > 100)) {
            $invalidProperties[] = "invalid value for 'order_line_id', number of items must be less than or equal to 100.";
        }

        if (!is_null($this->container['order_line_id']) && (count($this->container['order_line_id']) < 0)) {
            $invalidProperties[] = "invalid value for 'order_line_id', number of items must be greater than or equal to 0.";
        }

        if (!is_null($this->container['order_reference_for_customer']) && (count($this->container['order_reference_for_customer']) > 100)) {
            $invalidProperties[] = "invalid value for 'order_reference_for_customer', number of items must be less than or equal to 100.";
        }

        if (!is_null($this->container['order_reference_for_customer']) && (count($this->container['order_reference_for_customer']) < 0)) {
            $invalidProperties[] = "invalid value for 'order_reference_for_customer', number of items must be greater than or equal to 0.";
        }

        if (!is_null($this->container['order_reference_for_seller']) && (count($this->container['order_reference_for_seller']) > 100)) {
            $invalidProperties[] = "invalid value for 'order_reference_for_seller', number of items must be less than or equal to 100.";
        }

        if (!is_null($this->container['order_reference_for_seller']) && (count($this->container['order_reference_for_seller']) < 0)) {
            $invalidProperties[] = "invalid value for 'order_reference_for_seller', number of items must be greater than or equal to 0.";
        }

        if (!is_null($this->container['payment_state']) && (count($this->container['payment_state']) > 100)) {
            $invalidProperties[] = "invalid value for 'payment_state', number of items must be less than or equal to 100.";
        }

        if (!is_null($this->container['payment_state']) && (count($this->container['payment_state']) < 0)) {
            $invalidProperties[] = "invalid value for 'payment_state', number of items must be greater than or equal to 0.";
        }

        if (!is_null($this->container['shop_domain']) && (count($this->container['shop_domain']) > 100)) {
            $invalidProperties[] = "invalid value for 'shop_domain', number of items must be less than or equal to 100.";
        }

        if (!is_null($this->container['shop_domain']) && (count($this->container['shop_domain']) < 0)) {
            $invalidProperties[] = "invalid value for 'shop_domain', number of items must be greater than or equal to 0.";
        }

        if (!is_null($this->container['transaction_type']) && (count($this->container['transaction_type']) > 100)) {
            $invalidProperties[] = "invalid value for 'transaction_type', number of items must be less than or equal to 100.";
        }

        if (!is_null($this->container['transaction_type']) && (count($this->container['transaction_type']) < 0)) {
            $invalidProperties[] = "invalid value for 'transaction_type', number of items must be greater than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets accounting_document_id
     *
     * @return string|null
     */
    public function getAccountingDocumentId()
    {
        return $this->container['accounting_document_id'];
    }

    /**
     * Sets accounting_document_id
     *
     * @param string|null $accounting_document_id Accounting document id for filtering. This parameter only filter documents requests of the type: <code>SHOP_BILLING_CYCLE_PURCHASE_ORDER</code>.
     *
     * @return self
     */
    public function setAccountingDocumentId($accounting_document_id)
    {
        if (is_null($accounting_document_id)) {
            throw new \InvalidArgumentException('non-nullable accounting_document_id cannot be null');
        }
        $this->container['accounting_document_id'] = $accounting_document_id;

        return $this;
    }

    /**
     * Gets accounting_document_number
     *
     * @return string|null
     */
    public function getAccountingDocumentNumber()
    {
        return $this->container['accounting_document_number'];
    }

    /**
     * Sets accounting_document_number
     *
     * @param string|null $accounting_document_number Accounting document number for filtering.
     *
     * @return self
     */
    public function setAccountingDocumentNumber($accounting_document_number)
    {
        if (is_null($accounting_document_number)) {
            throw new \InvalidArgumentException('non-nullable accounting_document_number cannot be null');
        }
        $this->container['accounting_document_number'] = $accounting_document_number;

        return $this;
    }

    /**
     * Gets date_created_from
     *
     * @return \DateTime|null
     */
    public function getDateCreatedFrom()
    {
        return $this->container['date_created_from'];
    }

    /**
     * Sets date_created_from
     *
     * @param \DateTime|null $date_created_from Creation date for filtering
     *
     * @return self
     */
    public function setDateCreatedFrom($date_created_from)
    {
        if (is_null($date_created_from)) {
            throw new \InvalidArgumentException('non-nullable date_created_from cannot be null');
        }
        $this->container['date_created_from'] = $date_created_from;

        return $this;
    }

    /**
     * Gets date_created_to
     *
     * @return \DateTime|null
     */
    public function getDateCreatedTo()
    {
        return $this->container['date_created_to'];
    }

    /**
     * Sets date_created_to
     *
     * @param \DateTime|null $date_created_to Creation date for filtering
     *
     * @return self
     */
    public function setDateCreatedTo($date_created_to)
    {
        if (is_null($date_created_to)) {
            throw new \InvalidArgumentException('non-nullable date_created_to cannot be null');
        }
        $this->container['date_created_to'] = $date_created_to;

        return $this;
    }

    /**
     * Gets items_per_chunk
     *
     * @return int|null
     */
    public function getItemsPerChunk()
    {
        return $this->container['items_per_chunk'];
    }

    /**
     * Sets items_per_chunk
     *
     * @param int|null $items_per_chunk The maximum number of items per chunk.
     *
     * @return self
     */
    public function setItemsPerChunk($items_per_chunk)
    {
        if (is_null($items_per_chunk)) {
            throw new \InvalidArgumentException('non-nullable items_per_chunk cannot be null');
        }
        $this->container['items_per_chunk'] = $items_per_chunk;

        return $this;
    }

    /**
     * Gets last_updated_from
     *
     * @return \DateTime|null
     */
    public function getLastUpdatedFrom()
    {
        return $this->container['last_updated_from'];
    }

    /**
     * Sets last_updated_from
     *
     * @param \DateTime|null $last_updated_from Last updated date for filtering
     *
     * @return self
     */
    public function setLastUpdatedFrom($last_updated_from)
    {
        if (is_null($last_updated_from)) {
            throw new \InvalidArgumentException('non-nullable last_updated_from cannot be null');
        }
        $this->container['last_updated_from'] = $last_updated_from;

        return $this;
    }

    /**
     * Gets megabytes_per_chunk
     *
     * @return int|null
     */
    public function getMegabytesPerChunk()
    {
        return $this->container['megabytes_per_chunk'];
    }

    /**
     * Sets megabytes_per_chunk
     *
     * @param int|null $megabytes_per_chunk The maximum size in megabytes of a chunk.
     *
     * @return self
     */
    public function setMegabytesPerChunk($megabytes_per_chunk)
    {
        if (is_null($megabytes_per_chunk)) {
            throw new \InvalidArgumentException('non-nullable megabytes_per_chunk cannot be null');
        }
        $this->container['megabytes_per_chunk'] = $megabytes_per_chunk;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return string[]|null
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param string[]|null $order_id Order id for filtering. This parameter can be supplied multiple times.
     *
     * @return self
     */
    public function setOrderId($order_id)
    {
        if (is_null($order_id)) {
            throw new \InvalidArgumentException('non-nullable order_id cannot be null');
        }

        if ((count($order_id) > 100)) {
            throw new \InvalidArgumentException('invalid value for $order_id when calling TL03Request., number of items must be less than or equal to 100.');
        }
        if ((count($order_id) < 0)) {
            throw new \InvalidArgumentException('invalid length for $order_id when calling TL03Request., number of items must be greater than or equal to 0.');
        }
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets order_line_id
     *
     * @return string[]|null
     */
    public function getOrderLineId()
    {
        return $this->container['order_line_id'];
    }

    /**
     * Sets order_line_id
     *
     * @param string[]|null $order_line_id Order line id for filtering. This parameter can be supplied multiple times.
     *
     * @return self
     */
    public function setOrderLineId($order_line_id)
    {
        if (is_null($order_line_id)) {
            throw new \InvalidArgumentException('non-nullable order_line_id cannot be null');
        }

        if ((count($order_line_id) > 100)) {
            throw new \InvalidArgumentException('invalid value for $order_line_id when calling TL03Request., number of items must be less than or equal to 100.');
        }
        if ((count($order_line_id) < 0)) {
            throw new \InvalidArgumentException('invalid length for $order_line_id when calling TL03Request., number of items must be greater than or equal to 0.');
        }
        $this->container['order_line_id'] = $order_line_id;

        return $this;
    }

    /**
     * Gets order_reference_for_customer
     *
     * @return string[]|null
     */
    public function getOrderReferenceForCustomer()
    {
        return $this->container['order_reference_for_customer'];
    }

    /**
     * Sets order_reference_for_customer
     *
     * @param string[]|null $order_reference_for_customer A comma-separated list of order references for customer.
     *
     * @return self
     */
    public function setOrderReferenceForCustomer($order_reference_for_customer)
    {
        if (is_null($order_reference_for_customer)) {
            throw new \InvalidArgumentException('non-nullable order_reference_for_customer cannot be null');
        }

        if ((count($order_reference_for_customer) > 100)) {
            throw new \InvalidArgumentException('invalid value for $order_reference_for_customer when calling TL03Request., number of items must be less than or equal to 100.');
        }
        if ((count($order_reference_for_customer) < 0)) {
            throw new \InvalidArgumentException('invalid length for $order_reference_for_customer when calling TL03Request., number of items must be greater than or equal to 0.');
        }
        $this->container['order_reference_for_customer'] = $order_reference_for_customer;

        return $this;
    }

    /**
     * Gets order_reference_for_seller
     *
     * @return string[]|null
     */
    public function getOrderReferenceForSeller()
    {
        return $this->container['order_reference_for_seller'];
    }

    /**
     * Sets order_reference_for_seller
     *
     * @param string[]|null $order_reference_for_seller A comma-separated list of order references for seller.
     *
     * @return self
     */
    public function setOrderReferenceForSeller($order_reference_for_seller)
    {
        if (is_null($order_reference_for_seller)) {
            throw new \InvalidArgumentException('non-nullable order_reference_for_seller cannot be null');
        }

        if ((count($order_reference_for_seller) > 100)) {
            throw new \InvalidArgumentException('invalid value for $order_reference_for_seller when calling TL03Request., number of items must be less than or equal to 100.');
        }
        if ((count($order_reference_for_seller) < 0)) {
            throw new \InvalidArgumentException('invalid length for $order_reference_for_seller when calling TL03Request., number of items must be greater than or equal to 0.');
        }
        $this->container['order_reference_for_seller'] = $order_reference_for_seller;

        return $this;
    }

    /**
     * Gets pay_out_psp_codes
     *
     * @return string[]|null
     */
    public function getPayOutPspCodes()
    {
        return $this->container['pay_out_psp_codes'];
    }

    /**
     * Sets pay_out_psp_codes
     *
     * @param string[]|null $pay_out_psp_codes A comma-separated list of pay-out PSP codes for filtering. This parameter requires the Hybrid pay-out PSP feature to be enabled.
     *
     * @return self
     */
    public function setPayOutPspCodes($pay_out_psp_codes)
    {
        if (is_null($pay_out_psp_codes)) {
            throw new \InvalidArgumentException('non-nullable pay_out_psp_codes cannot be null');
        }
        $this->container['pay_out_psp_codes'] = $pay_out_psp_codes;

        return $this;
    }

    /**
     * Gets payment_state
     *
     * @return string[]|null
     */
    public function getPaymentState()
    {
        return $this->container['payment_state'];
    }

    /**
     * Sets payment_state
     *
     * @param string[]|null $payment_state Payment state for filtering. This parameter can be supplied multiple times.
     *
     * @return self
     */
    public function setPaymentState($payment_state)
    {
        if (is_null($payment_state)) {
            throw new \InvalidArgumentException('non-nullable payment_state cannot be null');
        }

        if ((count($payment_state) > 100)) {
            throw new \InvalidArgumentException('invalid value for $payment_state when calling TL03Request., number of items must be less than or equal to 100.');
        }
        if ((count($payment_state) < 0)) {
            throw new \InvalidArgumentException('invalid length for $payment_state when calling TL03Request., number of items must be greater than or equal to 0.');
        }
        $this->container['payment_state'] = $payment_state;

        return $this;
    }

    /**
     * Gets payment_voucher_number
     *
     * @return string|null
     */
    public function getPaymentVoucherNumber()
    {
        return $this->container['payment_voucher_number'];
    }

    /**
     * Sets payment_voucher_number
     *
     * @param string|null $payment_voucher_number Payment voucher for filtering
     *
     * @return self
     */
    public function setPaymentVoucherNumber($payment_voucher_number)
    {
        if (is_null($payment_voucher_number)) {
            throw new \InvalidArgumentException('non-nullable payment_voucher_number cannot be null');
        }
        $this->container['payment_voucher_number'] = $payment_voucher_number;

        return $this;
    }

    /**
     * Gets shop_domain
     *
     * @return string[]|null
     */
    public function getShopDomain()
    {
        return $this->container['shop_domain'];
    }

    /**
     * Sets shop_domain
     *
     * @param string[]|null $shop_domain A shop domain for filtering. This parameter can be supplied multiple times.
     *
     * @return self
     */
    public function setShopDomain($shop_domain)
    {
        if (is_null($shop_domain)) {
            throw new \InvalidArgumentException('non-nullable shop_domain cannot be null');
        }

        if ((count($shop_domain) > 100)) {
            throw new \InvalidArgumentException('invalid value for $shop_domain when calling TL03Request., number of items must be less than or equal to 100.');
        }
        if ((count($shop_domain) < 0)) {
            throw new \InvalidArgumentException('invalid length for $shop_domain when calling TL03Request., number of items must be greater than or equal to 0.');
        }
        $this->container['shop_domain'] = $shop_domain;

        return $this;
    }

    /**
     * Gets shop_id
     *
     * @return int|null
     */
    public function getShopId()
    {
        return $this->container['shop_id'];
    }

    /**
     * Sets shop_id
     *
     * @param int|null $shop_id Shop identifier
     *
     * @return self
     */
    public function setShopId($shop_id)
    {
        if (is_null($shop_id)) {
            throw new \InvalidArgumentException('non-nullable shop_id cannot be null');
        }
        $this->container['shop_id'] = $shop_id;

        return $this;
    }

    /**
     * Gets shop_model
     *
     * @return string[]|null
     */
    public function getShopModel()
    {
        return $this->container['shop_model'];
    }

    /**
     * Sets shop_model
     *
     * @param string[]|null $shop_model Shop model for filtering. This parameter can be supplied multiple times.
     *
     * @return self
     */
    public function setShopModel($shop_model)
    {
        if (is_null($shop_model)) {
            throw new \InvalidArgumentException('non-nullable shop_model cannot be null');
        }
        $this->container['shop_model'] = $shop_model;

        return $this;
    }

    /**
     * Gets transaction_date_from
     *
     * @return \DateTime|null
     */
    public function getTransactionDateFrom()
    {
        return $this->container['transaction_date_from'];
    }

    /**
     * Sets transaction_date_from
     *
     * @param \DateTime|null $transaction_date_from Transaction date for filtering
     *
     * @return self
     */
    public function setTransactionDateFrom($transaction_date_from)
    {
        if (is_null($transaction_date_from)) {
            throw new \InvalidArgumentException('non-nullable transaction_date_from cannot be null');
        }
        $this->container['transaction_date_from'] = $transaction_date_from;

        return $this;
    }

    /**
     * Gets transaction_date_to
     *
     * @return \DateTime|null
     */
    public function getTransactionDateTo()
    {
        return $this->container['transaction_date_to'];
    }

    /**
     * Sets transaction_date_to
     *
     * @param \DateTime|null $transaction_date_to Transaction date for filtering
     *
     * @return self
     */
    public function setTransactionDateTo($transaction_date_to)
    {
        if (is_null($transaction_date_to)) {
            throw new \InvalidArgumentException('non-nullable transaction_date_to cannot be null');
        }
        $this->container['transaction_date_to'] = $transaction_date_to;

        return $this;
    }

    /**
     * Gets transaction_type
     *
     * @return string[]|null
     */
    public function getTransactionType()
    {
        return $this->container['transaction_type'];
    }

    /**
     * Sets transaction_type
     *
     * @param string[]|null $transaction_type Transaction type for filtering. This parameter can be supplied multiple times.
     *
     * @return self
     */
    public function setTransactionType($transaction_type)
    {
        if (is_null($transaction_type)) {
            throw new \InvalidArgumentException('non-nullable transaction_type cannot be null');
        }

        if ((count($transaction_type) > 100)) {
            throw new \InvalidArgumentException('invalid value for $transaction_type when calling TL03Request., number of items must be less than or equal to 100.');
        }
        if ((count($transaction_type) < 0)) {
            throw new \InvalidArgumentException('invalid length for $transaction_type when calling TL03Request., number of items must be greater than or equal to 0.');
        }
        $this->container['transaction_type'] = $transaction_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


