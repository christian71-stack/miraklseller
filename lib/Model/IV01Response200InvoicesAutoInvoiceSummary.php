<?php
/**
 * IV01Response200InvoicesAutoInvoiceSummary
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  cbdesk\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mirakl Marketplace APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest-release
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace cbdesk\Mirakl\Model;

use \ArrayAccess;
use \cbdesk\Mirakl\ObjectSerializer;

/**
 * IV01Response200InvoicesAutoInvoiceSummary Class Doc Comment
 *
 * @category Class
 * @package  cbdesk\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class IV01Response200InvoicesAutoInvoiceSummary implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'IV01_Response_200_Invoices_AutoInvoice_Summary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'amount_transferred' => 'float',
        'amount_transferred_to_operator' => 'float',
        'reserve_funding' => 'float',
        'reserve_settlement' => 'float',
        'total_commissions_excl_tax' => 'float',
        'total_commissions_incl_tax' => 'float',
        'total_fee_excl_tax' => 'float',
        'total_fee_incl_tax' => 'float',
        'total_fee_operator_remitted_excl_tax' => 'float',
        'total_fee_operator_remitted_incl_tax' => 'float',
        'total_non_payable_orders_excl_tax' => 'float',
        'total_non_payable_orders_incl_tax' => 'float',
        'total_operator_paid_shipping_charges_excl_tax' => 'float',
        'total_operator_paid_shipping_charges_incl_tax' => 'float',
        'total_operator_remitted_taxes' => 'float',
        'total_other_credits_excl_tax' => 'float',
        'total_other_credits_incl_tax' => 'float',
        'total_other_invoices_excl_tax' => 'float',
        'total_other_invoices_incl_tax' => 'float',
        'total_payable_orders_excl_tax' => 'float',
        'total_payable_orders_incl_tax' => 'float',
        'total_purchase_taxes' => 'float',
        'total_refund_commissions_excl_tax' => 'float',
        'total_refund_commissions_incl_tax' => 'float',
        'total_refund_fee_excl_tax' => 'float',
        'total_refund_fee_incl_tax' => 'float',
        'total_refund_fee_operator_remitted_excl_tax' => 'float',
        'total_refund_fee_operator_remitted_incl_tax' => 'float',
        'total_refund_non_payable_orders_excl_tax' => 'float',
        'total_refund_non_payable_orders_incl_tax' => 'float',
        'total_refund_operator_paid_shipping_charges_excl_tax' => 'float',
        'total_refund_operator_paid_shipping_charges_incl_tax' => 'float',
        'total_refund_operator_remitted_taxes' => 'float',
        'total_refund_orders_excl_tax' => 'float',
        'total_refund_orders_incl_tax' => 'float',
        'total_refund_payable_orders_excl_tax' => 'float',
        'total_refund_payable_orders_incl_tax' => 'float',
        'total_refund_purchase_taxes' => 'float',
        'total_seller_fees_on_orders_excl_tax' => 'float',
        'total_seller_fees_on_orders_incl_tax' => 'float',
        'total_seller_penalty_fees_excl_tax' => 'float',
        'total_seller_penalty_fees_incl_tax' => 'float',
        'total_subscription_excl_tax' => 'float',
        'total_subscription_incl_tax' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'amount_transferred' => null,
        'amount_transferred_to_operator' => null,
        'reserve_funding' => null,
        'reserve_settlement' => null,
        'total_commissions_excl_tax' => null,
        'total_commissions_incl_tax' => null,
        'total_fee_excl_tax' => null,
        'total_fee_incl_tax' => null,
        'total_fee_operator_remitted_excl_tax' => null,
        'total_fee_operator_remitted_incl_tax' => null,
        'total_non_payable_orders_excl_tax' => null,
        'total_non_payable_orders_incl_tax' => null,
        'total_operator_paid_shipping_charges_excl_tax' => null,
        'total_operator_paid_shipping_charges_incl_tax' => null,
        'total_operator_remitted_taxes' => null,
        'total_other_credits_excl_tax' => null,
        'total_other_credits_incl_tax' => null,
        'total_other_invoices_excl_tax' => null,
        'total_other_invoices_incl_tax' => null,
        'total_payable_orders_excl_tax' => null,
        'total_payable_orders_incl_tax' => null,
        'total_purchase_taxes' => null,
        'total_refund_commissions_excl_tax' => null,
        'total_refund_commissions_incl_tax' => null,
        'total_refund_fee_excl_tax' => null,
        'total_refund_fee_incl_tax' => null,
        'total_refund_fee_operator_remitted_excl_tax' => null,
        'total_refund_fee_operator_remitted_incl_tax' => null,
        'total_refund_non_payable_orders_excl_tax' => null,
        'total_refund_non_payable_orders_incl_tax' => null,
        'total_refund_operator_paid_shipping_charges_excl_tax' => null,
        'total_refund_operator_paid_shipping_charges_incl_tax' => null,
        'total_refund_operator_remitted_taxes' => null,
        'total_refund_orders_excl_tax' => null,
        'total_refund_orders_incl_tax' => null,
        'total_refund_payable_orders_excl_tax' => null,
        'total_refund_payable_orders_incl_tax' => null,
        'total_refund_purchase_taxes' => null,
        'total_seller_fees_on_orders_excl_tax' => null,
        'total_seller_fees_on_orders_incl_tax' => null,
        'total_seller_penalty_fees_excl_tax' => null,
        'total_seller_penalty_fees_incl_tax' => null,
        'total_subscription_excl_tax' => null,
        'total_subscription_incl_tax' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'amount_transferred' => false,
        'amount_transferred_to_operator' => false,
        'reserve_funding' => false,
        'reserve_settlement' => false,
        'total_commissions_excl_tax' => false,
        'total_commissions_incl_tax' => false,
        'total_fee_excl_tax' => false,
        'total_fee_incl_tax' => false,
        'total_fee_operator_remitted_excl_tax' => false,
        'total_fee_operator_remitted_incl_tax' => false,
        'total_non_payable_orders_excl_tax' => false,
        'total_non_payable_orders_incl_tax' => false,
        'total_operator_paid_shipping_charges_excl_tax' => false,
        'total_operator_paid_shipping_charges_incl_tax' => false,
        'total_operator_remitted_taxes' => false,
        'total_other_credits_excl_tax' => false,
        'total_other_credits_incl_tax' => false,
        'total_other_invoices_excl_tax' => false,
        'total_other_invoices_incl_tax' => false,
        'total_payable_orders_excl_tax' => false,
        'total_payable_orders_incl_tax' => false,
        'total_purchase_taxes' => false,
        'total_refund_commissions_excl_tax' => false,
        'total_refund_commissions_incl_tax' => false,
        'total_refund_fee_excl_tax' => false,
        'total_refund_fee_incl_tax' => false,
        'total_refund_fee_operator_remitted_excl_tax' => false,
        'total_refund_fee_operator_remitted_incl_tax' => false,
        'total_refund_non_payable_orders_excl_tax' => false,
        'total_refund_non_payable_orders_incl_tax' => false,
        'total_refund_operator_paid_shipping_charges_excl_tax' => false,
        'total_refund_operator_paid_shipping_charges_incl_tax' => false,
        'total_refund_operator_remitted_taxes' => false,
        'total_refund_orders_excl_tax' => false,
        'total_refund_orders_incl_tax' => false,
        'total_refund_payable_orders_excl_tax' => false,
        'total_refund_payable_orders_incl_tax' => false,
        'total_refund_purchase_taxes' => false,
        'total_seller_fees_on_orders_excl_tax' => false,
        'total_seller_fees_on_orders_incl_tax' => false,
        'total_seller_penalty_fees_excl_tax' => false,
        'total_seller_penalty_fees_incl_tax' => false,
        'total_subscription_excl_tax' => false,
        'total_subscription_incl_tax' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'amount_transferred' => 'amount_transferred',
        'amount_transferred_to_operator' => 'amount_transferred_to_operator',
        'reserve_funding' => 'reserve_funding',
        'reserve_settlement' => 'reserve_settlement',
        'total_commissions_excl_tax' => 'total_commissions_excl_tax',
        'total_commissions_incl_tax' => 'total_commissions_incl_tax',
        'total_fee_excl_tax' => 'total_fee_excl_tax',
        'total_fee_incl_tax' => 'total_fee_incl_tax',
        'total_fee_operator_remitted_excl_tax' => 'total_fee_operator_remitted_excl_tax',
        'total_fee_operator_remitted_incl_tax' => 'total_fee_operator_remitted_incl_tax',
        'total_non_payable_orders_excl_tax' => 'total_non_payable_orders_excl_tax',
        'total_non_payable_orders_incl_tax' => 'total_non_payable_orders_incl_tax',
        'total_operator_paid_shipping_charges_excl_tax' => 'total_operator_paid_shipping_charges_excl_tax',
        'total_operator_paid_shipping_charges_incl_tax' => 'total_operator_paid_shipping_charges_incl_tax',
        'total_operator_remitted_taxes' => 'total_operator_remitted_taxes',
        'total_other_credits_excl_tax' => 'total_other_credits_excl_tax',
        'total_other_credits_incl_tax' => 'total_other_credits_incl_tax',
        'total_other_invoices_excl_tax' => 'total_other_invoices_excl_tax',
        'total_other_invoices_incl_tax' => 'total_other_invoices_incl_tax',
        'total_payable_orders_excl_tax' => 'total_payable_orders_excl_tax',
        'total_payable_orders_incl_tax' => 'total_payable_orders_incl_tax',
        'total_purchase_taxes' => 'total_purchase_taxes',
        'total_refund_commissions_excl_tax' => 'total_refund_commissions_excl_tax',
        'total_refund_commissions_incl_tax' => 'total_refund_commissions_incl_tax',
        'total_refund_fee_excl_tax' => 'total_refund_fee_excl_tax',
        'total_refund_fee_incl_tax' => 'total_refund_fee_incl_tax',
        'total_refund_fee_operator_remitted_excl_tax' => 'total_refund_fee_operator_remitted_excl_tax',
        'total_refund_fee_operator_remitted_incl_tax' => 'total_refund_fee_operator_remitted_incl_tax',
        'total_refund_non_payable_orders_excl_tax' => 'total_refund_non_payable_orders_excl_tax',
        'total_refund_non_payable_orders_incl_tax' => 'total_refund_non_payable_orders_incl_tax',
        'total_refund_operator_paid_shipping_charges_excl_tax' => 'total_refund_operator_paid_shipping_charges_excl_tax',
        'total_refund_operator_paid_shipping_charges_incl_tax' => 'total_refund_operator_paid_shipping_charges_incl_tax',
        'total_refund_operator_remitted_taxes' => 'total_refund_operator_remitted_taxes',
        'total_refund_orders_excl_tax' => 'total_refund_orders_excl_tax',
        'total_refund_orders_incl_tax' => 'total_refund_orders_incl_tax',
        'total_refund_payable_orders_excl_tax' => 'total_refund_payable_orders_excl_tax',
        'total_refund_payable_orders_incl_tax' => 'total_refund_payable_orders_incl_tax',
        'total_refund_purchase_taxes' => 'total_refund_purchase_taxes',
        'total_seller_fees_on_orders_excl_tax' => 'total_seller_fees_on_orders_excl_tax',
        'total_seller_fees_on_orders_incl_tax' => 'total_seller_fees_on_orders_incl_tax',
        'total_seller_penalty_fees_excl_tax' => 'total_seller_penalty_fees_excl_tax',
        'total_seller_penalty_fees_incl_tax' => 'total_seller_penalty_fees_incl_tax',
        'total_subscription_excl_tax' => 'total_subscription_excl_tax',
        'total_subscription_incl_tax' => 'total_subscription_incl_tax'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'amount_transferred' => 'setAmountTransferred',
        'amount_transferred_to_operator' => 'setAmountTransferredToOperator',
        'reserve_funding' => 'setReserveFunding',
        'reserve_settlement' => 'setReserveSettlement',
        'total_commissions_excl_tax' => 'setTotalCommissionsExclTax',
        'total_commissions_incl_tax' => 'setTotalCommissionsInclTax',
        'total_fee_excl_tax' => 'setTotalFeeExclTax',
        'total_fee_incl_tax' => 'setTotalFeeInclTax',
        'total_fee_operator_remitted_excl_tax' => 'setTotalFeeOperatorRemittedExclTax',
        'total_fee_operator_remitted_incl_tax' => 'setTotalFeeOperatorRemittedInclTax',
        'total_non_payable_orders_excl_tax' => 'setTotalNonPayableOrdersExclTax',
        'total_non_payable_orders_incl_tax' => 'setTotalNonPayableOrdersInclTax',
        'total_operator_paid_shipping_charges_excl_tax' => 'setTotalOperatorPaidShippingChargesExclTax',
        'total_operator_paid_shipping_charges_incl_tax' => 'setTotalOperatorPaidShippingChargesInclTax',
        'total_operator_remitted_taxes' => 'setTotalOperatorRemittedTaxes',
        'total_other_credits_excl_tax' => 'setTotalOtherCreditsExclTax',
        'total_other_credits_incl_tax' => 'setTotalOtherCreditsInclTax',
        'total_other_invoices_excl_tax' => 'setTotalOtherInvoicesExclTax',
        'total_other_invoices_incl_tax' => 'setTotalOtherInvoicesInclTax',
        'total_payable_orders_excl_tax' => 'setTotalPayableOrdersExclTax',
        'total_payable_orders_incl_tax' => 'setTotalPayableOrdersInclTax',
        'total_purchase_taxes' => 'setTotalPurchaseTaxes',
        'total_refund_commissions_excl_tax' => 'setTotalRefundCommissionsExclTax',
        'total_refund_commissions_incl_tax' => 'setTotalRefundCommissionsInclTax',
        'total_refund_fee_excl_tax' => 'setTotalRefundFeeExclTax',
        'total_refund_fee_incl_tax' => 'setTotalRefundFeeInclTax',
        'total_refund_fee_operator_remitted_excl_tax' => 'setTotalRefundFeeOperatorRemittedExclTax',
        'total_refund_fee_operator_remitted_incl_tax' => 'setTotalRefundFeeOperatorRemittedInclTax',
        'total_refund_non_payable_orders_excl_tax' => 'setTotalRefundNonPayableOrdersExclTax',
        'total_refund_non_payable_orders_incl_tax' => 'setTotalRefundNonPayableOrdersInclTax',
        'total_refund_operator_paid_shipping_charges_excl_tax' => 'setTotalRefundOperatorPaidShippingChargesExclTax',
        'total_refund_operator_paid_shipping_charges_incl_tax' => 'setTotalRefundOperatorPaidShippingChargesInclTax',
        'total_refund_operator_remitted_taxes' => 'setTotalRefundOperatorRemittedTaxes',
        'total_refund_orders_excl_tax' => 'setTotalRefundOrdersExclTax',
        'total_refund_orders_incl_tax' => 'setTotalRefundOrdersInclTax',
        'total_refund_payable_orders_excl_tax' => 'setTotalRefundPayableOrdersExclTax',
        'total_refund_payable_orders_incl_tax' => 'setTotalRefundPayableOrdersInclTax',
        'total_refund_purchase_taxes' => 'setTotalRefundPurchaseTaxes',
        'total_seller_fees_on_orders_excl_tax' => 'setTotalSellerFeesOnOrdersExclTax',
        'total_seller_fees_on_orders_incl_tax' => 'setTotalSellerFeesOnOrdersInclTax',
        'total_seller_penalty_fees_excl_tax' => 'setTotalSellerPenaltyFeesExclTax',
        'total_seller_penalty_fees_incl_tax' => 'setTotalSellerPenaltyFeesInclTax',
        'total_subscription_excl_tax' => 'setTotalSubscriptionExclTax',
        'total_subscription_incl_tax' => 'setTotalSubscriptionInclTax'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'amount_transferred' => 'getAmountTransferred',
        'amount_transferred_to_operator' => 'getAmountTransferredToOperator',
        'reserve_funding' => 'getReserveFunding',
        'reserve_settlement' => 'getReserveSettlement',
        'total_commissions_excl_tax' => 'getTotalCommissionsExclTax',
        'total_commissions_incl_tax' => 'getTotalCommissionsInclTax',
        'total_fee_excl_tax' => 'getTotalFeeExclTax',
        'total_fee_incl_tax' => 'getTotalFeeInclTax',
        'total_fee_operator_remitted_excl_tax' => 'getTotalFeeOperatorRemittedExclTax',
        'total_fee_operator_remitted_incl_tax' => 'getTotalFeeOperatorRemittedInclTax',
        'total_non_payable_orders_excl_tax' => 'getTotalNonPayableOrdersExclTax',
        'total_non_payable_orders_incl_tax' => 'getTotalNonPayableOrdersInclTax',
        'total_operator_paid_shipping_charges_excl_tax' => 'getTotalOperatorPaidShippingChargesExclTax',
        'total_operator_paid_shipping_charges_incl_tax' => 'getTotalOperatorPaidShippingChargesInclTax',
        'total_operator_remitted_taxes' => 'getTotalOperatorRemittedTaxes',
        'total_other_credits_excl_tax' => 'getTotalOtherCreditsExclTax',
        'total_other_credits_incl_tax' => 'getTotalOtherCreditsInclTax',
        'total_other_invoices_excl_tax' => 'getTotalOtherInvoicesExclTax',
        'total_other_invoices_incl_tax' => 'getTotalOtherInvoicesInclTax',
        'total_payable_orders_excl_tax' => 'getTotalPayableOrdersExclTax',
        'total_payable_orders_incl_tax' => 'getTotalPayableOrdersInclTax',
        'total_purchase_taxes' => 'getTotalPurchaseTaxes',
        'total_refund_commissions_excl_tax' => 'getTotalRefundCommissionsExclTax',
        'total_refund_commissions_incl_tax' => 'getTotalRefundCommissionsInclTax',
        'total_refund_fee_excl_tax' => 'getTotalRefundFeeExclTax',
        'total_refund_fee_incl_tax' => 'getTotalRefundFeeInclTax',
        'total_refund_fee_operator_remitted_excl_tax' => 'getTotalRefundFeeOperatorRemittedExclTax',
        'total_refund_fee_operator_remitted_incl_tax' => 'getTotalRefundFeeOperatorRemittedInclTax',
        'total_refund_non_payable_orders_excl_tax' => 'getTotalRefundNonPayableOrdersExclTax',
        'total_refund_non_payable_orders_incl_tax' => 'getTotalRefundNonPayableOrdersInclTax',
        'total_refund_operator_paid_shipping_charges_excl_tax' => 'getTotalRefundOperatorPaidShippingChargesExclTax',
        'total_refund_operator_paid_shipping_charges_incl_tax' => 'getTotalRefundOperatorPaidShippingChargesInclTax',
        'total_refund_operator_remitted_taxes' => 'getTotalRefundOperatorRemittedTaxes',
        'total_refund_orders_excl_tax' => 'getTotalRefundOrdersExclTax',
        'total_refund_orders_incl_tax' => 'getTotalRefundOrdersInclTax',
        'total_refund_payable_orders_excl_tax' => 'getTotalRefundPayableOrdersExclTax',
        'total_refund_payable_orders_incl_tax' => 'getTotalRefundPayableOrdersInclTax',
        'total_refund_purchase_taxes' => 'getTotalRefundPurchaseTaxes',
        'total_seller_fees_on_orders_excl_tax' => 'getTotalSellerFeesOnOrdersExclTax',
        'total_seller_fees_on_orders_incl_tax' => 'getTotalSellerFeesOnOrdersInclTax',
        'total_seller_penalty_fees_excl_tax' => 'getTotalSellerPenaltyFeesExclTax',
        'total_seller_penalty_fees_incl_tax' => 'getTotalSellerPenaltyFeesInclTax',
        'total_subscription_excl_tax' => 'getTotalSubscriptionExclTax',
        'total_subscription_incl_tax' => 'getTotalSubscriptionInclTax'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('amount_transferred', $data ?? [], null);
        $this->setIfExists('amount_transferred_to_operator', $data ?? [], null);
        $this->setIfExists('reserve_funding', $data ?? [], null);
        $this->setIfExists('reserve_settlement', $data ?? [], null);
        $this->setIfExists('total_commissions_excl_tax', $data ?? [], null);
        $this->setIfExists('total_commissions_incl_tax', $data ?? [], null);
        $this->setIfExists('total_fee_excl_tax', $data ?? [], null);
        $this->setIfExists('total_fee_incl_tax', $data ?? [], null);
        $this->setIfExists('total_fee_operator_remitted_excl_tax', $data ?? [], null);
        $this->setIfExists('total_fee_operator_remitted_incl_tax', $data ?? [], null);
        $this->setIfExists('total_non_payable_orders_excl_tax', $data ?? [], null);
        $this->setIfExists('total_non_payable_orders_incl_tax', $data ?? [], null);
        $this->setIfExists('total_operator_paid_shipping_charges_excl_tax', $data ?? [], null);
        $this->setIfExists('total_operator_paid_shipping_charges_incl_tax', $data ?? [], null);
        $this->setIfExists('total_operator_remitted_taxes', $data ?? [], null);
        $this->setIfExists('total_other_credits_excl_tax', $data ?? [], null);
        $this->setIfExists('total_other_credits_incl_tax', $data ?? [], null);
        $this->setIfExists('total_other_invoices_excl_tax', $data ?? [], null);
        $this->setIfExists('total_other_invoices_incl_tax', $data ?? [], null);
        $this->setIfExists('total_payable_orders_excl_tax', $data ?? [], null);
        $this->setIfExists('total_payable_orders_incl_tax', $data ?? [], null);
        $this->setIfExists('total_purchase_taxes', $data ?? [], null);
        $this->setIfExists('total_refund_commissions_excl_tax', $data ?? [], null);
        $this->setIfExists('total_refund_commissions_incl_tax', $data ?? [], null);
        $this->setIfExists('total_refund_fee_excl_tax', $data ?? [], null);
        $this->setIfExists('total_refund_fee_incl_tax', $data ?? [], null);
        $this->setIfExists('total_refund_fee_operator_remitted_excl_tax', $data ?? [], null);
        $this->setIfExists('total_refund_fee_operator_remitted_incl_tax', $data ?? [], null);
        $this->setIfExists('total_refund_non_payable_orders_excl_tax', $data ?? [], null);
        $this->setIfExists('total_refund_non_payable_orders_incl_tax', $data ?? [], null);
        $this->setIfExists('total_refund_operator_paid_shipping_charges_excl_tax', $data ?? [], null);
        $this->setIfExists('total_refund_operator_paid_shipping_charges_incl_tax', $data ?? [], null);
        $this->setIfExists('total_refund_operator_remitted_taxes', $data ?? [], null);
        $this->setIfExists('total_refund_orders_excl_tax', $data ?? [], null);
        $this->setIfExists('total_refund_orders_incl_tax', $data ?? [], null);
        $this->setIfExists('total_refund_payable_orders_excl_tax', $data ?? [], null);
        $this->setIfExists('total_refund_payable_orders_incl_tax', $data ?? [], null);
        $this->setIfExists('total_refund_purchase_taxes', $data ?? [], null);
        $this->setIfExists('total_seller_fees_on_orders_excl_tax', $data ?? [], null);
        $this->setIfExists('total_seller_fees_on_orders_incl_tax', $data ?? [], null);
        $this->setIfExists('total_seller_penalty_fees_excl_tax', $data ?? [], null);
        $this->setIfExists('total_seller_penalty_fees_incl_tax', $data ?? [], null);
        $this->setIfExists('total_subscription_excl_tax', $data ?? [], null);
        $this->setIfExists('total_subscription_incl_tax', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets amount_transferred
     *
     * @return float|null
     */
    public function getAmountTransferred()
    {
        return $this->container['amount_transferred'];
    }

    /**
     * Sets amount_transferred
     *
     * @param float|null $amount_transferred Total amount to be transferred to the seller
     *
     * @return self
     */
    public function setAmountTransferred($amount_transferred)
    {
        if (is_null($amount_transferred)) {
            throw new \InvalidArgumentException('non-nullable amount_transferred cannot be null');
        }
        $this->container['amount_transferred'] = $amount_transferred;

        return $this;
    }

    /**
     * Gets amount_transferred_to_operator
     *
     * @return float|null
     */
    public function getAmountTransferredToOperator()
    {
        return $this->container['amount_transferred_to_operator'];
    }

    /**
     * Sets amount_transferred_to_operator
     *
     * @param float|null $amount_transferred_to_operator Total amount to be transferred to the operator
     *
     * @return self
     */
    public function setAmountTransferredToOperator($amount_transferred_to_operator)
    {
        if (is_null($amount_transferred_to_operator)) {
            throw new \InvalidArgumentException('non-nullable amount_transferred_to_operator cannot be null');
        }
        $this->container['amount_transferred_to_operator'] = $amount_transferred_to_operator;

        return $this;
    }

    /**
     * Gets reserve_funding
     *
     * @return float|null
     */
    public function getReserveFunding()
    {
        return $this->container['reserve_funding'];
    }

    /**
     * Sets reserve_funding
     *
     * @param float|null $reserve_funding Amount set aside for the seller reserve
     *
     * @return self
     */
    public function setReserveFunding($reserve_funding)
    {
        if (is_null($reserve_funding)) {
            throw new \InvalidArgumentException('non-nullable reserve_funding cannot be null');
        }
        $this->container['reserve_funding'] = $reserve_funding;

        return $this;
    }

    /**
     * Gets reserve_settlement
     *
     * @return float|null
     */
    public function getReserveSettlement()
    {
        return $this->container['reserve_settlement'];
    }

    /**
     * Sets reserve_settlement
     *
     * @param float|null $reserve_settlement Amount paid out from the seller reserve
     *
     * @return self
     */
    public function setReserveSettlement($reserve_settlement)
    {
        if (is_null($reserve_settlement)) {
            throw new \InvalidArgumentException('non-nullable reserve_settlement cannot be null');
        }
        $this->container['reserve_settlement'] = $reserve_settlement;

        return $this;
    }

    /**
     * Gets total_commissions_excl_tax
     *
     * @return float|null
     */
    public function getTotalCommissionsExclTax()
    {
        return $this->container['total_commissions_excl_tax'];
    }

    /**
     * Sets total_commissions_excl_tax
     *
     * @param float|null $total_commissions_excl_tax Total amount of commissions (excluding taxes on orders)
     *
     * @return self
     */
    public function setTotalCommissionsExclTax($total_commissions_excl_tax)
    {
        if (is_null($total_commissions_excl_tax)) {
            throw new \InvalidArgumentException('non-nullable total_commissions_excl_tax cannot be null');
        }
        $this->container['total_commissions_excl_tax'] = $total_commissions_excl_tax;

        return $this;
    }

    /**
     * Gets total_commissions_incl_tax
     *
     * @return float|null
     */
    public function getTotalCommissionsInclTax()
    {
        return $this->container['total_commissions_incl_tax'];
    }

    /**
     * Sets total_commissions_incl_tax
     *
     * @param float|null $total_commissions_incl_tax Total amount of commissions (including taxes on orders)
     *
     * @return self
     */
    public function setTotalCommissionsInclTax($total_commissions_incl_tax)
    {
        if (is_null($total_commissions_incl_tax)) {
            throw new \InvalidArgumentException('non-nullable total_commissions_incl_tax cannot be null');
        }
        $this->container['total_commissions_incl_tax'] = $total_commissions_incl_tax;

        return $this;
    }

    /**
     * Gets total_fee_excl_tax
     *
     * @return float|null
     */
    public function getTotalFeeExclTax()
    {
        return $this->container['total_fee_excl_tax'];
    }

    /**
     * Sets total_fee_excl_tax
     *
     * @param float|null $total_fee_excl_tax Total amount of fees (excluding taxes on orders)
     *
     * @return self
     */
    public function setTotalFeeExclTax($total_fee_excl_tax)
    {
        if (is_null($total_fee_excl_tax)) {
            throw new \InvalidArgumentException('non-nullable total_fee_excl_tax cannot be null');
        }
        $this->container['total_fee_excl_tax'] = $total_fee_excl_tax;

        return $this;
    }

    /**
     * Gets total_fee_incl_tax
     *
     * @return float|null
     */
    public function getTotalFeeInclTax()
    {
        return $this->container['total_fee_incl_tax'];
    }

    /**
     * Sets total_fee_incl_tax
     *
     * @param float|null $total_fee_incl_tax Total amount of fees (including taxes on orders)
     *
     * @return self
     */
    public function setTotalFeeInclTax($total_fee_incl_tax)
    {
        if (is_null($total_fee_incl_tax)) {
            throw new \InvalidArgumentException('non-nullable total_fee_incl_tax cannot be null');
        }
        $this->container['total_fee_incl_tax'] = $total_fee_incl_tax;

        return $this;
    }

    /**
     * Gets total_fee_operator_remitted_excl_tax
     *
     * @return float|null
     */
    public function getTotalFeeOperatorRemittedExclTax()
    {
        return $this->container['total_fee_operator_remitted_excl_tax'];
    }

    /**
     * Sets total_fee_operator_remitted_excl_tax
     *
     * @param float|null $total_fee_operator_remitted_excl_tax Total amount of fees remitted by the operator (excluding taxes on orders)
     *
     * @return self
     */
    public function setTotalFeeOperatorRemittedExclTax($total_fee_operator_remitted_excl_tax)
    {
        if (is_null($total_fee_operator_remitted_excl_tax)) {
            throw new \InvalidArgumentException('non-nullable total_fee_operator_remitted_excl_tax cannot be null');
        }
        $this->container['total_fee_operator_remitted_excl_tax'] = $total_fee_operator_remitted_excl_tax;

        return $this;
    }

    /**
     * Gets total_fee_operator_remitted_incl_tax
     *
     * @return float|null
     */
    public function getTotalFeeOperatorRemittedInclTax()
    {
        return $this->container['total_fee_operator_remitted_incl_tax'];
    }

    /**
     * Sets total_fee_operator_remitted_incl_tax
     *
     * @param float|null $total_fee_operator_remitted_incl_tax Total amount of fees remitted by the operator (including taxes on orders)
     *
     * @return self
     */
    public function setTotalFeeOperatorRemittedInclTax($total_fee_operator_remitted_incl_tax)
    {
        if (is_null($total_fee_operator_remitted_incl_tax)) {
            throw new \InvalidArgumentException('non-nullable total_fee_operator_remitted_incl_tax cannot be null');
        }
        $this->container['total_fee_operator_remitted_incl_tax'] = $total_fee_operator_remitted_incl_tax;

        return $this;
    }

    /**
     * Gets total_non_payable_orders_excl_tax
     *
     * @return float|null
     */
    public function getTotalNonPayableOrdersExclTax()
    {
        return $this->container['total_non_payable_orders_excl_tax'];
    }

    /**
     * Sets total_non_payable_orders_excl_tax
     *
     * @param float|null $total_non_payable_orders_excl_tax Total amount for non payable orders (including shipping charges and excluding taxes on orders)
     *
     * @return self
     */
    public function setTotalNonPayableOrdersExclTax($total_non_payable_orders_excl_tax)
    {
        if (is_null($total_non_payable_orders_excl_tax)) {
            throw new \InvalidArgumentException('non-nullable total_non_payable_orders_excl_tax cannot be null');
        }
        $this->container['total_non_payable_orders_excl_tax'] = $total_non_payable_orders_excl_tax;

        return $this;
    }

    /**
     * Gets total_non_payable_orders_incl_tax
     *
     * @return float|null
     */
    public function getTotalNonPayableOrdersInclTax()
    {
        return $this->container['total_non_payable_orders_incl_tax'];
    }

    /**
     * Sets total_non_payable_orders_incl_tax
     *
     * @param float|null $total_non_payable_orders_incl_tax Total amount for non payable orders (including shipping charges and taxes on orders)
     *
     * @return self
     */
    public function setTotalNonPayableOrdersInclTax($total_non_payable_orders_incl_tax)
    {
        if (is_null($total_non_payable_orders_incl_tax)) {
            throw new \InvalidArgumentException('non-nullable total_non_payable_orders_incl_tax cannot be null');
        }
        $this->container['total_non_payable_orders_incl_tax'] = $total_non_payable_orders_incl_tax;

        return $this;
    }

    /**
     * Gets total_operator_paid_shipping_charges_excl_tax
     *
     * @return float|null
     */
    public function getTotalOperatorPaidShippingChargesExclTax()
    {
        return $this->container['total_operator_paid_shipping_charges_excl_tax'];
    }

    /**
     * Sets total_operator_paid_shipping_charges_excl_tax
     *
     * @param float|null $total_operator_paid_shipping_charges_excl_tax Total amount of shipping charges paid by the operator (excluding taxes on orders)
     *
     * @return self
     */
    public function setTotalOperatorPaidShippingChargesExclTax($total_operator_paid_shipping_charges_excl_tax)
    {
        if (is_null($total_operator_paid_shipping_charges_excl_tax)) {
            throw new \InvalidArgumentException('non-nullable total_operator_paid_shipping_charges_excl_tax cannot be null');
        }
        $this->container['total_operator_paid_shipping_charges_excl_tax'] = $total_operator_paid_shipping_charges_excl_tax;

        return $this;
    }

    /**
     * Gets total_operator_paid_shipping_charges_incl_tax
     *
     * @return float|null
     */
    public function getTotalOperatorPaidShippingChargesInclTax()
    {
        return $this->container['total_operator_paid_shipping_charges_incl_tax'];
    }

    /**
     * Sets total_operator_paid_shipping_charges_incl_tax
     *
     * @param float|null $total_operator_paid_shipping_charges_incl_tax Total amount of shipping charges paid by the operator (including taxes on orders)
     *
     * @return self
     */
    public function setTotalOperatorPaidShippingChargesInclTax($total_operator_paid_shipping_charges_incl_tax)
    {
        if (is_null($total_operator_paid_shipping_charges_incl_tax)) {
            throw new \InvalidArgumentException('non-nullable total_operator_paid_shipping_charges_incl_tax cannot be null');
        }
        $this->container['total_operator_paid_shipping_charges_incl_tax'] = $total_operator_paid_shipping_charges_incl_tax;

        return $this;
    }

    /**
     * Gets total_operator_remitted_taxes
     *
     * @return float|null
     */
    public function getTotalOperatorRemittedTaxes()
    {
        return $this->container['total_operator_remitted_taxes'];
    }

    /**
     * Sets total_operator_remitted_taxes
     *
     * @param float|null $total_operator_remitted_taxes Total amount for order taxes remitted by the operator
     *
     * @return self
     */
    public function setTotalOperatorRemittedTaxes($total_operator_remitted_taxes)
    {
        if (is_null($total_operator_remitted_taxes)) {
            throw new \InvalidArgumentException('non-nullable total_operator_remitted_taxes cannot be null');
        }
        $this->container['total_operator_remitted_taxes'] = $total_operator_remitted_taxes;

        return $this;
    }

    /**
     * Gets total_other_credits_excl_tax
     *
     * @return float|null
     */
    public function getTotalOtherCreditsExclTax()
    {
        return $this->container['total_other_credits_excl_tax'];
    }

    /**
     * Sets total_other_credits_excl_tax
     *
     * @param float|null $total_other_credits_excl_tax Total amount for other manual credits of a payment cycle (excluding taxes on stores)
     *
     * @return self
     */
    public function setTotalOtherCreditsExclTax($total_other_credits_excl_tax)
    {
        if (is_null($total_other_credits_excl_tax)) {
            throw new \InvalidArgumentException('non-nullable total_other_credits_excl_tax cannot be null');
        }
        $this->container['total_other_credits_excl_tax'] = $total_other_credits_excl_tax;

        return $this;
    }

    /**
     * Gets total_other_credits_incl_tax
     *
     * @return float|null
     */
    public function getTotalOtherCreditsInclTax()
    {
        return $this->container['total_other_credits_incl_tax'];
    }

    /**
     * Sets total_other_credits_incl_tax
     *
     * @param float|null $total_other_credits_incl_tax Total amount for other manual credits of a payment cycle (including taxes on stores)
     *
     * @return self
     */
    public function setTotalOtherCreditsInclTax($total_other_credits_incl_tax)
    {
        if (is_null($total_other_credits_incl_tax)) {
            throw new \InvalidArgumentException('non-nullable total_other_credits_incl_tax cannot be null');
        }
        $this->container['total_other_credits_incl_tax'] = $total_other_credits_incl_tax;

        return $this;
    }

    /**
     * Gets total_other_invoices_excl_tax
     *
     * @return float|null
     */
    public function getTotalOtherInvoicesExclTax()
    {
        return $this->container['total_other_invoices_excl_tax'];
    }

    /**
     * Sets total_other_invoices_excl_tax
     *
     * @param float|null $total_other_invoices_excl_tax Total amount for other manual invoices of a payment cycle (excluding taxes on stores)
     *
     * @return self
     */
    public function setTotalOtherInvoicesExclTax($total_other_invoices_excl_tax)
    {
        if (is_null($total_other_invoices_excl_tax)) {
            throw new \InvalidArgumentException('non-nullable total_other_invoices_excl_tax cannot be null');
        }
        $this->container['total_other_invoices_excl_tax'] = $total_other_invoices_excl_tax;

        return $this;
    }

    /**
     * Gets total_other_invoices_incl_tax
     *
     * @return float|null
     */
    public function getTotalOtherInvoicesInclTax()
    {
        return $this->container['total_other_invoices_incl_tax'];
    }

    /**
     * Sets total_other_invoices_incl_tax
     *
     * @param float|null $total_other_invoices_incl_tax Total amount for other manual invoices of a payment cycle (including taxes on stores)
     *
     * @return self
     */
    public function setTotalOtherInvoicesInclTax($total_other_invoices_incl_tax)
    {
        if (is_null($total_other_invoices_incl_tax)) {
            throw new \InvalidArgumentException('non-nullable total_other_invoices_incl_tax cannot be null');
        }
        $this->container['total_other_invoices_incl_tax'] = $total_other_invoices_incl_tax;

        return $this;
    }

    /**
     * Gets total_payable_orders_excl_tax
     *
     * @return float|null
     */
    public function getTotalPayableOrdersExclTax()
    {
        return $this->container['total_payable_orders_excl_tax'];
    }

    /**
     * Sets total_payable_orders_excl_tax
     *
     * @param float|null $total_payable_orders_excl_tax Total amount for payable orders including shipping charges (excluding taxes on stores)
     *
     * @return self
     */
    public function setTotalPayableOrdersExclTax($total_payable_orders_excl_tax)
    {
        if (is_null($total_payable_orders_excl_tax)) {
            throw new \InvalidArgumentException('non-nullable total_payable_orders_excl_tax cannot be null');
        }
        $this->container['total_payable_orders_excl_tax'] = $total_payable_orders_excl_tax;

        return $this;
    }

    /**
     * Gets total_payable_orders_incl_tax
     *
     * @return float|null
     */
    public function getTotalPayableOrdersInclTax()
    {
        return $this->container['total_payable_orders_incl_tax'];
    }

    /**
     * Sets total_payable_orders_incl_tax
     *
     * @param float|null $total_payable_orders_incl_tax Total amount for payable orders including taxes (including taxes on orders)
     *
     * @return self
     */
    public function setTotalPayableOrdersInclTax($total_payable_orders_incl_tax)
    {
        if (is_null($total_payable_orders_incl_tax)) {
            throw new \InvalidArgumentException('non-nullable total_payable_orders_incl_tax cannot be null');
        }
        $this->container['total_payable_orders_incl_tax'] = $total_payable_orders_incl_tax;

        return $this;
    }

    /**
     * Gets total_purchase_taxes
     *
     * @return float|null
     */
    public function getTotalPurchaseTaxes()
    {
        return $this->container['total_purchase_taxes'];
    }

    /**
     * Sets total_purchase_taxes
     *
     * @param float|null $total_purchase_taxes Total amount for purchase taxes
     *
     * @return self
     */
    public function setTotalPurchaseTaxes($total_purchase_taxes)
    {
        if (is_null($total_purchase_taxes)) {
            throw new \InvalidArgumentException('non-nullable total_purchase_taxes cannot be null');
        }
        $this->container['total_purchase_taxes'] = $total_purchase_taxes;

        return $this;
    }

    /**
     * Gets total_refund_commissions_excl_tax
     *
     * @return float|null
     */
    public function getTotalRefundCommissionsExclTax()
    {
        return $this->container['total_refund_commissions_excl_tax'];
    }

    /**
     * Sets total_refund_commissions_excl_tax
     *
     * @param float|null $total_refund_commissions_excl_tax Total amount of refunded commissions (excluding taxes on orders)
     *
     * @return self
     */
    public function setTotalRefundCommissionsExclTax($total_refund_commissions_excl_tax)
    {
        if (is_null($total_refund_commissions_excl_tax)) {
            throw new \InvalidArgumentException('non-nullable total_refund_commissions_excl_tax cannot be null');
        }
        $this->container['total_refund_commissions_excl_tax'] = $total_refund_commissions_excl_tax;

        return $this;
    }

    /**
     * Gets total_refund_commissions_incl_tax
     *
     * @return float|null
     */
    public function getTotalRefundCommissionsInclTax()
    {
        return $this->container['total_refund_commissions_incl_tax'];
    }

    /**
     * Sets total_refund_commissions_incl_tax
     *
     * @param float|null $total_refund_commissions_incl_tax Total amount of refunded commissions (including taxes on orders)
     *
     * @return self
     */
    public function setTotalRefundCommissionsInclTax($total_refund_commissions_incl_tax)
    {
        if (is_null($total_refund_commissions_incl_tax)) {
            throw new \InvalidArgumentException('non-nullable total_refund_commissions_incl_tax cannot be null');
        }
        $this->container['total_refund_commissions_incl_tax'] = $total_refund_commissions_incl_tax;

        return $this;
    }

    /**
     * Gets total_refund_fee_excl_tax
     *
     * @return float|null
     */
    public function getTotalRefundFeeExclTax()
    {
        return $this->container['total_refund_fee_excl_tax'];
    }

    /**
     * Sets total_refund_fee_excl_tax
     *
     * @param float|null $total_refund_fee_excl_tax Total amount of refunded fees (excluding taxes on orders)
     *
     * @return self
     */
    public function setTotalRefundFeeExclTax($total_refund_fee_excl_tax)
    {
        if (is_null($total_refund_fee_excl_tax)) {
            throw new \InvalidArgumentException('non-nullable total_refund_fee_excl_tax cannot be null');
        }
        $this->container['total_refund_fee_excl_tax'] = $total_refund_fee_excl_tax;

        return $this;
    }

    /**
     * Gets total_refund_fee_incl_tax
     *
     * @return float|null
     */
    public function getTotalRefundFeeInclTax()
    {
        return $this->container['total_refund_fee_incl_tax'];
    }

    /**
     * Sets total_refund_fee_incl_tax
     *
     * @param float|null $total_refund_fee_incl_tax Total amount of refunded fees (including taxes on orders)
     *
     * @return self
     */
    public function setTotalRefundFeeInclTax($total_refund_fee_incl_tax)
    {
        if (is_null($total_refund_fee_incl_tax)) {
            throw new \InvalidArgumentException('non-nullable total_refund_fee_incl_tax cannot be null');
        }
        $this->container['total_refund_fee_incl_tax'] = $total_refund_fee_incl_tax;

        return $this;
    }

    /**
     * Gets total_refund_fee_operator_remitted_excl_tax
     *
     * @return float|null
     */
    public function getTotalRefundFeeOperatorRemittedExclTax()
    {
        return $this->container['total_refund_fee_operator_remitted_excl_tax'];
    }

    /**
     * Sets total_refund_fee_operator_remitted_excl_tax
     *
     * @param float|null $total_refund_fee_operator_remitted_excl_tax Total amount of refunded fees remitted by the operator (excluding taxes on orders)
     *
     * @return self
     */
    public function setTotalRefundFeeOperatorRemittedExclTax($total_refund_fee_operator_remitted_excl_tax)
    {
        if (is_null($total_refund_fee_operator_remitted_excl_tax)) {
            throw new \InvalidArgumentException('non-nullable total_refund_fee_operator_remitted_excl_tax cannot be null');
        }
        $this->container['total_refund_fee_operator_remitted_excl_tax'] = $total_refund_fee_operator_remitted_excl_tax;

        return $this;
    }

    /**
     * Gets total_refund_fee_operator_remitted_incl_tax
     *
     * @return float|null
     */
    public function getTotalRefundFeeOperatorRemittedInclTax()
    {
        return $this->container['total_refund_fee_operator_remitted_incl_tax'];
    }

    /**
     * Sets total_refund_fee_operator_remitted_incl_tax
     *
     * @param float|null $total_refund_fee_operator_remitted_incl_tax Total amount of refunded fees remitted by the operator (including taxes on orders)
     *
     * @return self
     */
    public function setTotalRefundFeeOperatorRemittedInclTax($total_refund_fee_operator_remitted_incl_tax)
    {
        if (is_null($total_refund_fee_operator_remitted_incl_tax)) {
            throw new \InvalidArgumentException('non-nullable total_refund_fee_operator_remitted_incl_tax cannot be null');
        }
        $this->container['total_refund_fee_operator_remitted_incl_tax'] = $total_refund_fee_operator_remitted_incl_tax;

        return $this;
    }

    /**
     * Gets total_refund_non_payable_orders_excl_tax
     *
     * @return float|null
     */
    public function getTotalRefundNonPayableOrdersExclTax()
    {
        return $this->container['total_refund_non_payable_orders_excl_tax'];
    }

    /**
     * Sets total_refund_non_payable_orders_excl_tax
     *
     * @param float|null $total_refund_non_payable_orders_excl_tax Total amount refunded for non payable orders (including shipping charges and excluding taxes on orders)
     *
     * @return self
     */
    public function setTotalRefundNonPayableOrdersExclTax($total_refund_non_payable_orders_excl_tax)
    {
        if (is_null($total_refund_non_payable_orders_excl_tax)) {
            throw new \InvalidArgumentException('non-nullable total_refund_non_payable_orders_excl_tax cannot be null');
        }
        $this->container['total_refund_non_payable_orders_excl_tax'] = $total_refund_non_payable_orders_excl_tax;

        return $this;
    }

    /**
     * Gets total_refund_non_payable_orders_incl_tax
     *
     * @return float|null
     */
    public function getTotalRefundNonPayableOrdersInclTax()
    {
        return $this->container['total_refund_non_payable_orders_incl_tax'];
    }

    /**
     * Sets total_refund_non_payable_orders_incl_tax
     *
     * @param float|null $total_refund_non_payable_orders_incl_tax Total amount refunded for non payable orders (excluding shipping charges and including taxes on orders)
     *
     * @return self
     */
    public function setTotalRefundNonPayableOrdersInclTax($total_refund_non_payable_orders_incl_tax)
    {
        if (is_null($total_refund_non_payable_orders_incl_tax)) {
            throw new \InvalidArgumentException('non-nullable total_refund_non_payable_orders_incl_tax cannot be null');
        }
        $this->container['total_refund_non_payable_orders_incl_tax'] = $total_refund_non_payable_orders_incl_tax;

        return $this;
    }

    /**
     * Gets total_refund_operator_paid_shipping_charges_excl_tax
     *
     * @return float|null
     */
    public function getTotalRefundOperatorPaidShippingChargesExclTax()
    {
        return $this->container['total_refund_operator_paid_shipping_charges_excl_tax'];
    }

    /**
     * Sets total_refund_operator_paid_shipping_charges_excl_tax
     *
     * @param float|null $total_refund_operator_paid_shipping_charges_excl_tax Total amount of refunded shipping charges paid by the operator (excluding taxes on orders)
     *
     * @return self
     */
    public function setTotalRefundOperatorPaidShippingChargesExclTax($total_refund_operator_paid_shipping_charges_excl_tax)
    {
        if (is_null($total_refund_operator_paid_shipping_charges_excl_tax)) {
            throw new \InvalidArgumentException('non-nullable total_refund_operator_paid_shipping_charges_excl_tax cannot be null');
        }
        $this->container['total_refund_operator_paid_shipping_charges_excl_tax'] = $total_refund_operator_paid_shipping_charges_excl_tax;

        return $this;
    }

    /**
     * Gets total_refund_operator_paid_shipping_charges_incl_tax
     *
     * @return float|null
     */
    public function getTotalRefundOperatorPaidShippingChargesInclTax()
    {
        return $this->container['total_refund_operator_paid_shipping_charges_incl_tax'];
    }

    /**
     * Sets total_refund_operator_paid_shipping_charges_incl_tax
     *
     * @param float|null $total_refund_operator_paid_shipping_charges_incl_tax Total amount of refunded shipping charges paid by the operator (including taxes on orders)
     *
     * @return self
     */
    public function setTotalRefundOperatorPaidShippingChargesInclTax($total_refund_operator_paid_shipping_charges_incl_tax)
    {
        if (is_null($total_refund_operator_paid_shipping_charges_incl_tax)) {
            throw new \InvalidArgumentException('non-nullable total_refund_operator_paid_shipping_charges_incl_tax cannot be null');
        }
        $this->container['total_refund_operator_paid_shipping_charges_incl_tax'] = $total_refund_operator_paid_shipping_charges_incl_tax;

        return $this;
    }

    /**
     * Gets total_refund_operator_remitted_taxes
     *
     * @return float|null
     */
    public function getTotalRefundOperatorRemittedTaxes()
    {
        return $this->container['total_refund_operator_remitted_taxes'];
    }

    /**
     * Sets total_refund_operator_remitted_taxes
     *
     * @param float|null $total_refund_operator_remitted_taxes Total amount of refunded taxes remitted by the operator
     *
     * @return self
     */
    public function setTotalRefundOperatorRemittedTaxes($total_refund_operator_remitted_taxes)
    {
        if (is_null($total_refund_operator_remitted_taxes)) {
            throw new \InvalidArgumentException('non-nullable total_refund_operator_remitted_taxes cannot be null');
        }
        $this->container['total_refund_operator_remitted_taxes'] = $total_refund_operator_remitted_taxes;

        return $this;
    }

    /**
     * Gets total_refund_orders_excl_tax
     *
     * @return float|null
     */
    public function getTotalRefundOrdersExclTax()
    {
        return $this->container['total_refund_orders_excl_tax'];
    }

    /**
     * Sets total_refund_orders_excl_tax
     *
     * @param float|null $total_refund_orders_excl_tax Total amount of refunded orders (excluding all refunded taxes)
     *
     * @return self
     */
    public function setTotalRefundOrdersExclTax($total_refund_orders_excl_tax)
    {
        if (is_null($total_refund_orders_excl_tax)) {
            throw new \InvalidArgumentException('non-nullable total_refund_orders_excl_tax cannot be null');
        }
        $this->container['total_refund_orders_excl_tax'] = $total_refund_orders_excl_tax;

        return $this;
    }

    /**
     * Gets total_refund_orders_incl_tax
     *
     * @return float|null
     */
    public function getTotalRefundOrdersInclTax()
    {
        return $this->container['total_refund_orders_incl_tax'];
    }

    /**
     * Sets total_refund_orders_incl_tax
     *
     * @param float|null $total_refund_orders_incl_tax Total amount of refunded orders (including all refunded taxes)
     *
     * @return self
     */
    public function setTotalRefundOrdersInclTax($total_refund_orders_incl_tax)
    {
        if (is_null($total_refund_orders_incl_tax)) {
            throw new \InvalidArgumentException('non-nullable total_refund_orders_incl_tax cannot be null');
        }
        $this->container['total_refund_orders_incl_tax'] = $total_refund_orders_incl_tax;

        return $this;
    }

    /**
     * Gets total_refund_payable_orders_excl_tax
     *
     * @return float|null
     */
    public function getTotalRefundPayableOrdersExclTax()
    {
        return $this->container['total_refund_payable_orders_excl_tax'];
    }

    /**
     * Sets total_refund_payable_orders_excl_tax
     *
     * @param float|null $total_refund_payable_orders_excl_tax Total amount refunded for payable orders (excluding taxes on orders)
     *
     * @return self
     */
    public function setTotalRefundPayableOrdersExclTax($total_refund_payable_orders_excl_tax)
    {
        if (is_null($total_refund_payable_orders_excl_tax)) {
            throw new \InvalidArgumentException('non-nullable total_refund_payable_orders_excl_tax cannot be null');
        }
        $this->container['total_refund_payable_orders_excl_tax'] = $total_refund_payable_orders_excl_tax;

        return $this;
    }

    /**
     * Gets total_refund_payable_orders_incl_tax
     *
     * @return float|null
     */
    public function getTotalRefundPayableOrdersInclTax()
    {
        return $this->container['total_refund_payable_orders_incl_tax'];
    }

    /**
     * Sets total_refund_payable_orders_incl_tax
     *
     * @param float|null $total_refund_payable_orders_incl_tax Total amount refunded for payable orders (including taxes on orders)
     *
     * @return self
     */
    public function setTotalRefundPayableOrdersInclTax($total_refund_payable_orders_incl_tax)
    {
        if (is_null($total_refund_payable_orders_incl_tax)) {
            throw new \InvalidArgumentException('non-nullable total_refund_payable_orders_incl_tax cannot be null');
        }
        $this->container['total_refund_payable_orders_incl_tax'] = $total_refund_payable_orders_incl_tax;

        return $this;
    }

    /**
     * Gets total_refund_purchase_taxes
     *
     * @return float|null
     */
    public function getTotalRefundPurchaseTaxes()
    {
        return $this->container['total_refund_purchase_taxes'];
    }

    /**
     * Sets total_refund_purchase_taxes
     *
     * @param float|null $total_refund_purchase_taxes Total amount of refunded purchase taxes
     *
     * @return self
     */
    public function setTotalRefundPurchaseTaxes($total_refund_purchase_taxes)
    {
        if (is_null($total_refund_purchase_taxes)) {
            throw new \InvalidArgumentException('non-nullable total_refund_purchase_taxes cannot be null');
        }
        $this->container['total_refund_purchase_taxes'] = $total_refund_purchase_taxes;

        return $this;
    }

    /**
     * Gets total_seller_fees_on_orders_excl_tax
     *
     * @return float|null
     */
    public function getTotalSellerFeesOnOrdersExclTax()
    {
        return $this->container['total_seller_fees_on_orders_excl_tax'];
    }

    /**
     * Sets total_seller_fees_on_orders_excl_tax
     *
     * @param float|null $total_seller_fees_on_orders_excl_tax Total amount of seller fees on orders (excluding taxes on orders)
     *
     * @return self
     */
    public function setTotalSellerFeesOnOrdersExclTax($total_seller_fees_on_orders_excl_tax)
    {
        if (is_null($total_seller_fees_on_orders_excl_tax)) {
            throw new \InvalidArgumentException('non-nullable total_seller_fees_on_orders_excl_tax cannot be null');
        }
        $this->container['total_seller_fees_on_orders_excl_tax'] = $total_seller_fees_on_orders_excl_tax;

        return $this;
    }

    /**
     * Gets total_seller_fees_on_orders_incl_tax
     *
     * @return float|null
     */
    public function getTotalSellerFeesOnOrdersInclTax()
    {
        return $this->container['total_seller_fees_on_orders_incl_tax'];
    }

    /**
     * Sets total_seller_fees_on_orders_incl_tax
     *
     * @param float|null $total_seller_fees_on_orders_incl_tax Total amount of seller fees on orders (including taxes on orders)
     *
     * @return self
     */
    public function setTotalSellerFeesOnOrdersInclTax($total_seller_fees_on_orders_incl_tax)
    {
        if (is_null($total_seller_fees_on_orders_incl_tax)) {
            throw new \InvalidArgumentException('non-nullable total_seller_fees_on_orders_incl_tax cannot be null');
        }
        $this->container['total_seller_fees_on_orders_incl_tax'] = $total_seller_fees_on_orders_incl_tax;

        return $this;
    }

    /**
     * Gets total_seller_penalty_fees_excl_tax
     *
     * @return float|null
     */
    public function getTotalSellerPenaltyFeesExclTax()
    {
        return $this->container['total_seller_penalty_fees_excl_tax'];
    }

    /**
     * Sets total_seller_penalty_fees_excl_tax
     *
     * @param float|null $total_seller_penalty_fees_excl_tax Total amount of seller penalty fees (excluding taxes on orders)
     *
     * @return self
     */
    public function setTotalSellerPenaltyFeesExclTax($total_seller_penalty_fees_excl_tax)
    {
        if (is_null($total_seller_penalty_fees_excl_tax)) {
            throw new \InvalidArgumentException('non-nullable total_seller_penalty_fees_excl_tax cannot be null');
        }
        $this->container['total_seller_penalty_fees_excl_tax'] = $total_seller_penalty_fees_excl_tax;

        return $this;
    }

    /**
     * Gets total_seller_penalty_fees_incl_tax
     *
     * @return float|null
     */
    public function getTotalSellerPenaltyFeesInclTax()
    {
        return $this->container['total_seller_penalty_fees_incl_tax'];
    }

    /**
     * Sets total_seller_penalty_fees_incl_tax
     *
     * @param float|null $total_seller_penalty_fees_incl_tax Total amount of seller penalty fees (including taxes on orders)
     *
     * @return self
     */
    public function setTotalSellerPenaltyFeesInclTax($total_seller_penalty_fees_incl_tax)
    {
        if (is_null($total_seller_penalty_fees_incl_tax)) {
            throw new \InvalidArgumentException('non-nullable total_seller_penalty_fees_incl_tax cannot be null');
        }
        $this->container['total_seller_penalty_fees_incl_tax'] = $total_seller_penalty_fees_incl_tax;

        return $this;
    }

    /**
     * Gets total_subscription_excl_tax
     *
     * @return float|null
     */
    public function getTotalSubscriptionExclTax()
    {
        return $this->container['total_subscription_excl_tax'];
    }

    /**
     * Sets total_subscription_excl_tax
     *
     * @param float|null $total_subscription_excl_tax Total amount of subscription fees (excluding taxes on stores)
     *
     * @return self
     */
    public function setTotalSubscriptionExclTax($total_subscription_excl_tax)
    {
        if (is_null($total_subscription_excl_tax)) {
            throw new \InvalidArgumentException('non-nullable total_subscription_excl_tax cannot be null');
        }
        $this->container['total_subscription_excl_tax'] = $total_subscription_excl_tax;

        return $this;
    }

    /**
     * Gets total_subscription_incl_tax
     *
     * @return float|null
     */
    public function getTotalSubscriptionInclTax()
    {
        return $this->container['total_subscription_incl_tax'];
    }

    /**
     * Sets total_subscription_incl_tax
     *
     * @param float|null $total_subscription_incl_tax Total amount of subscription taxes (including taxes on stores)
     *
     * @return self
     */
    public function setTotalSubscriptionInclTax($total_subscription_incl_tax)
    {
        if (is_null($total_subscription_incl_tax)) {
            throw new \InvalidArgumentException('non-nullable total_subscription_incl_tax cannot be null');
        }
        $this->container['total_subscription_incl_tax'] = $total_subscription_incl_tax;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


