<?php
/**
 * OF52Request
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  cbdesk\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mirakl Marketplace APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest-release
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace cbdesk\Mirakl\Model;

use \ArrayAccess;
use \cbdesk\Mirakl\ObjectSerializer;

/**
 * OF52Request Class Doc Comment
 *
 * @category Class
 * @package  cbdesk\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OF52Request implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OF52_Request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'channel_codes' => 'string[]',
        'export_type' => 'string',
        'include_fields' => 'string[]',
        'include_inactive_offers' => 'bool',
        'items_per_chunk' => 'int',
        'last_request_date' => '\DateTime',
        'megabytes_per_chunk' => 'int',
        'rename_fields' => 'array<string,string>',
        'shipping_zones' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'channel_codes' => null,
        'export_type' => null,
        'include_fields' => null,
        'include_inactive_offers' => null,
        'items_per_chunk' => 'int64',
        'last_request_date' => 'date-time',
        'megabytes_per_chunk' => 'int64',
        'rename_fields' => null,
        'shipping_zones' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'channel_codes' => false,
        'export_type' => false,
        'include_fields' => false,
        'include_inactive_offers' => false,
        'items_per_chunk' => false,
        'last_request_date' => false,
        'megabytes_per_chunk' => false,
        'rename_fields' => false,
        'shipping_zones' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'channel_codes' => 'channel_codes',
        'export_type' => 'export_type',
        'include_fields' => 'include_fields',
        'include_inactive_offers' => 'include_inactive_offers',
        'items_per_chunk' => 'items_per_chunk',
        'last_request_date' => 'last_request_date',
        'megabytes_per_chunk' => 'megabytes_per_chunk',
        'rename_fields' => 'rename_fields',
        'shipping_zones' => 'shipping_zones'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'channel_codes' => 'setChannelCodes',
        'export_type' => 'setExportType',
        'include_fields' => 'setIncludeFields',
        'include_inactive_offers' => 'setIncludeInactiveOffers',
        'items_per_chunk' => 'setItemsPerChunk',
        'last_request_date' => 'setLastRequestDate',
        'megabytes_per_chunk' => 'setMegabytesPerChunk',
        'rename_fields' => 'setRenameFields',
        'shipping_zones' => 'setShippingZones'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'channel_codes' => 'getChannelCodes',
        'export_type' => 'getExportType',
        'include_fields' => 'getIncludeFields',
        'include_inactive_offers' => 'getIncludeInactiveOffers',
        'items_per_chunk' => 'getItemsPerChunk',
        'last_request_date' => 'getLastRequestDate',
        'megabytes_per_chunk' => 'getMegabytesPerChunk',
        'rename_fields' => 'getRenameFields',
        'shipping_zones' => 'getShippingZones'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('channel_codes', $data ?? [], null);
        $this->setIfExists('export_type', $data ?? [], null);
        $this->setIfExists('include_fields', $data ?? [], null);
        $this->setIfExists('include_inactive_offers', $data ?? [], false);
        $this->setIfExists('items_per_chunk', $data ?? [], null);
        $this->setIfExists('last_request_date', $data ?? [], null);
        $this->setIfExists('megabytes_per_chunk', $data ?? [], null);
        $this->setIfExists('rename_fields', $data ?? [], null);
        $this->setIfExists('shipping_zones', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['items_per_chunk']) && ($this->container['items_per_chunk'] > 1000000)) {
            $invalidProperties[] = "invalid value for 'items_per_chunk', must be smaller than or equal to 1000000.";
        }

        if (!is_null($this->container['items_per_chunk']) && ($this->container['items_per_chunk'] < 10000)) {
            $invalidProperties[] = "invalid value for 'items_per_chunk', must be bigger than or equal to 10000.";
        }

        if (!is_null($this->container['megabytes_per_chunk']) && ($this->container['megabytes_per_chunk'] > 1000)) {
            $invalidProperties[] = "invalid value for 'megabytes_per_chunk', must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['megabytes_per_chunk']) && ($this->container['megabytes_per_chunk'] < 10)) {
            $invalidProperties[] = "invalid value for 'megabytes_per_chunk', must be bigger than or equal to 10.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets channel_codes
     *
     * @return string[]|null
     */
    public function getChannelCodes()
    {
        return $this->container['channel_codes'];
    }

    /**
     * Sets channel_codes
     *
     * @param string[]|null $channel_codes List of the channel codes to filter with. If specified, only offers that can be sold on the specified channel(s) will be returned. If not, offers will be returned regardless of their channels.
     *
     * @return self
     */
    public function setChannelCodes($channel_codes)
    {
        if (is_null($channel_codes)) {
            throw new \InvalidArgumentException('non-nullable channel_codes cannot be null');
        }
        $this->container['channel_codes'] = $channel_codes;

        return $this;
    }

    /**
     * Gets export_type
     *
     * @return string|null
     */
    public function getExportType()
    {
        return $this->container['export_type'];
    }

    /**
     * Sets export_type
     *
     * @param string|null $export_type Format of the generated files: CSV or JSON (value is either <code>text/csv</code> or <code>application/json</code>). Default to <code>text/csv</code>.
     *
     * @return self
     */
    public function setExportType($export_type)
    {
        if (is_null($export_type)) {
            throw new \InvalidArgumentException('non-nullable export_type cannot be null');
        }
        $this->container['export_type'] = $export_type;

        return $this;
    }

    /**
     * Gets include_fields
     *
     * @return string[]|null
     */
    public function getIncludeFields()
    {
        return $this->container['include_fields'];
    }

    /**
     * Sets include_fields
     *
     * @param string[]|null $include_fields Specify which columns (CSV) or fields (JSON) will be returned. If specified, only the listed columns/fields will be returned, otherwise all will be returned. If combined with <em>rename_fields</em>, <em>include_fields</em> must use the original header/field names.
     *
     * @return self
     */
    public function setIncludeFields($include_fields)
    {
        if (is_null($include_fields)) {
            throw new \InvalidArgumentException('non-nullable include_fields cannot be null');
        }
        $this->container['include_fields'] = $include_fields;

        return $this;
    }

    /**
     * Gets include_inactive_offers
     *
     * @return bool|null
     */
    public function getIncludeInactiveOffers()
    {
        return $this->container['include_inactive_offers'];
    }

    /**
     * Sets include_inactive_offers
     *
     * @param bool|null $include_inactive_offers When calling the API in full mode (i.e. when no <i>last_request_date</i> is provided), inactive offers are not returned. To retrieve both active and inactive offers, set this field to true.<br />When calling the API in differential mode (i.e. when the <i>last_request_date</i> is provided), both active and inactive offers are returned. This field cannot be used in differential mode otherwise the call fails.
     *
     * @return self
     */
    public function setIncludeInactiveOffers($include_inactive_offers)
    {
        if (is_null($include_inactive_offers)) {
            throw new \InvalidArgumentException('non-nullable include_inactive_offers cannot be null');
        }
        $this->container['include_inactive_offers'] = $include_inactive_offers;

        return $this;
    }

    /**
     * Gets items_per_chunk
     *
     * @return int|null
     */
    public function getItemsPerChunk()
    {
        return $this->container['items_per_chunk'];
    }

    /**
     * Sets items_per_chunk
     *
     * @param int|null $items_per_chunk The maximum number of items per chunk
     *
     * @return self
     */
    public function setItemsPerChunk($items_per_chunk)
    {
        if (is_null($items_per_chunk)) {
            throw new \InvalidArgumentException('non-nullable items_per_chunk cannot be null');
        }

        if (($items_per_chunk > 1000000)) {
            throw new \InvalidArgumentException('invalid value for $items_per_chunk when calling OF52Request., must be smaller than or equal to 1000000.');
        }
        if (($items_per_chunk < 10000)) {
            throw new \InvalidArgumentException('invalid value for $items_per_chunk when calling OF52Request., must be bigger than or equal to 10000.');
        }

        $this->container['items_per_chunk'] = $items_per_chunk;

        return $this;
    }

    /**
     * Gets last_request_date
     *
     * @return \DateTime|null
     */
    public function getLastRequestDate()
    {
        return $this->container['last_request_date'];
    }

    /**
     * Sets last_request_date
     *
     * @param \DateTime|null $last_request_date Date and time of your last request.<br />If provided, retrieves all offers updated since this date and time, including deleted and inactive offers.<br />If not provided, retrieves all active offers only, unless otherwise specified in the <i>include_inactive_offers</i> field.
     *
     * @return self
     */
    public function setLastRequestDate($last_request_date)
    {
        if (is_null($last_request_date)) {
            throw new \InvalidArgumentException('non-nullable last_request_date cannot be null');
        }
        $this->container['last_request_date'] = $last_request_date;

        return $this;
    }

    /**
     * Gets megabytes_per_chunk
     *
     * @return int|null
     */
    public function getMegabytesPerChunk()
    {
        return $this->container['megabytes_per_chunk'];
    }

    /**
     * Sets megabytes_per_chunk
     *
     * @param int|null $megabytes_per_chunk The maximum size in megabytes of a chunk
     *
     * @return self
     */
    public function setMegabytesPerChunk($megabytes_per_chunk)
    {
        if (is_null($megabytes_per_chunk)) {
            throw new \InvalidArgumentException('non-nullable megabytes_per_chunk cannot be null');
        }

        if (($megabytes_per_chunk > 1000)) {
            throw new \InvalidArgumentException('invalid value for $megabytes_per_chunk when calling OF52Request., must be smaller than or equal to 1000.');
        }
        if (($megabytes_per_chunk < 10)) {
            throw new \InvalidArgumentException('invalid value for $megabytes_per_chunk when calling OF52Request., must be bigger than or equal to 10.');
        }

        $this->container['megabytes_per_chunk'] = $megabytes_per_chunk;

        return $this;
    }

    /**
     * Gets rename_fields
     *
     * @return array<string,string>|null
     */
    public function getRenameFields()
    {
        return $this->container['rename_fields'];
    }

    /**
     * Sets rename_fields
     *
     * @param array<string,string>|null $rename_fields This is only supported for CSV export. Can be used to modify the name of the CSV headers. The expected format is a JSON object with the original fields as keys and the substitute as value. <pre>{\"offer-id\": \"offerId\", \"shop-name\":\"shopName\"}</pre>
     *
     * @return self
     */
    public function setRenameFields($rename_fields)
    {
        if (is_null($rename_fields)) {
            throw new \InvalidArgumentException('non-nullable rename_fields cannot be null');
        }
        $this->container['rename_fields'] = $rename_fields;

        return $this;
    }

    /**
     * Gets shipping_zones
     *
     * @return string[]|null
     */
    public function getShippingZones()
    {
        return $this->container['shipping_zones'];
    }

    /**
     * Sets shipping_zones
     *
     * @param string[]|null $shipping_zones If the setting <i>Export shipping charges and delivery times</i> has been enabled, list of the shipping zones codes to filter with. If specified, only shipping information linked to the given zones will be returned. Otherwise, all shipping information for all zones will be returned.
     *
     * @return self
     */
    public function setShippingZones($shipping_zones)
    {
        if (is_null($shipping_zones)) {
            throw new \InvalidArgumentException('non-nullable shipping_zones cannot be null');
        }
        $this->container['shipping_zones'] = $shipping_zones;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


