<?php
/**
 * PM11Response200Attributes
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  cbdesk\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mirakl Marketplace APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest-release
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace cbdesk\Mirakl\Model;

use \ArrayAccess;
use \cbdesk\Mirakl\ObjectSerializer;

/**
 * PM11Response200Attributes Class Doc Comment
 *
 * @category Class
 * @package  cbdesk\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PM11Response200Attributes implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PM11_Response_200_Attributes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'channels' => '\cbdesk\Mirakl\Model\PM11Response200AttributesChannels[]',
        'code' => 'string',
        'default_value' => 'string',
        'description' => 'string',
        'description_translations' => '\cbdesk\Mirakl\Model\PM11Response200AttributesDescriptionTranslations[]',
        'example' => 'string',
        'hierarchy_code' => 'string',
        'label' => 'string',
        'label_translations' => '\cbdesk\Mirakl\Model\PM11Response200AttributesLabelTranslations[]',
        'locale' => 'string',
        'required' => 'bool',
        'requirement_level' => 'string',
        'roles' => '\cbdesk\Mirakl\Model\PM11Response200AttributesRoles[]',
        'transformations' => 'string',
        'type' => 'string',
        'type_parameter' => 'string',
        'type_parameters' => '\cbdesk\Mirakl\Model\PM11Response200AttributesTypeParameters[]',
        'unique_code' => 'string',
        'validations' => 'string',
        'values' => '\cbdesk\Mirakl\Model\PM11Response200AttributesValues[]',
        'values_list' => 'string',
        'variant' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'channels' => null,
        'code' => null,
        'default_value' => null,
        'description' => null,
        'description_translations' => null,
        'example' => null,
        'hierarchy_code' => null,
        'label' => null,
        'label_translations' => null,
        'locale' => null,
        'required' => null,
        'requirement_level' => null,
        'roles' => null,
        'transformations' => null,
        'type' => null,
        'type_parameter' => null,
        'type_parameters' => null,
        'unique_code' => null,
        'validations' => null,
        'values' => null,
        'values_list' => null,
        'variant' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'channels' => false,
        'code' => false,
        'default_value' => false,
        'description' => false,
        'description_translations' => false,
        'example' => false,
        'hierarchy_code' => false,
        'label' => false,
        'label_translations' => false,
        'locale' => false,
        'required' => false,
        'requirement_level' => false,
        'roles' => false,
        'transformations' => false,
        'type' => false,
        'type_parameter' => false,
        'type_parameters' => false,
        'unique_code' => false,
        'validations' => false,
        'values' => false,
        'values_list' => false,
        'variant' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'channels' => 'channels',
        'code' => 'code',
        'default_value' => 'default_value',
        'description' => 'description',
        'description_translations' => 'description_translations',
        'example' => 'example',
        'hierarchy_code' => 'hierarchy_code',
        'label' => 'label',
        'label_translations' => 'label_translations',
        'locale' => 'locale',
        'required' => 'required',
        'requirement_level' => 'requirement_level',
        'roles' => 'roles',
        'transformations' => 'transformations',
        'type' => 'type',
        'type_parameter' => 'type_parameter',
        'type_parameters' => 'type_parameters',
        'unique_code' => 'unique_code',
        'validations' => 'validations',
        'values' => 'values',
        'values_list' => 'values_list',
        'variant' => 'variant'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'channels' => 'setChannels',
        'code' => 'setCode',
        'default_value' => 'setDefaultValue',
        'description' => 'setDescription',
        'description_translations' => 'setDescriptionTranslations',
        'example' => 'setExample',
        'hierarchy_code' => 'setHierarchyCode',
        'label' => 'setLabel',
        'label_translations' => 'setLabelTranslations',
        'locale' => 'setLocale',
        'required' => 'setRequired',
        'requirement_level' => 'setRequirementLevel',
        'roles' => 'setRoles',
        'transformations' => 'setTransformations',
        'type' => 'setType',
        'type_parameter' => 'setTypeParameter',
        'type_parameters' => 'setTypeParameters',
        'unique_code' => 'setUniqueCode',
        'validations' => 'setValidations',
        'values' => 'setValues',
        'values_list' => 'setValuesList',
        'variant' => 'setVariant'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'channels' => 'getChannels',
        'code' => 'getCode',
        'default_value' => 'getDefaultValue',
        'description' => 'getDescription',
        'description_translations' => 'getDescriptionTranslations',
        'example' => 'getExample',
        'hierarchy_code' => 'getHierarchyCode',
        'label' => 'getLabel',
        'label_translations' => 'getLabelTranslations',
        'locale' => 'getLocale',
        'required' => 'getRequired',
        'requirement_level' => 'getRequirementLevel',
        'roles' => 'getRoles',
        'transformations' => 'getTransformations',
        'type' => 'getType',
        'type_parameter' => 'getTypeParameter',
        'type_parameters' => 'getTypeParameters',
        'unique_code' => 'getUniqueCode',
        'validations' => 'getValidations',
        'values' => 'getValues',
        'values_list' => 'getValuesList',
        'variant' => 'getVariant'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('channels', $data ?? [], null);
        $this->setIfExists('code', $data ?? [], null);
        $this->setIfExists('default_value', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('description_translations', $data ?? [], null);
        $this->setIfExists('example', $data ?? [], null);
        $this->setIfExists('hierarchy_code', $data ?? [], null);
        $this->setIfExists('label', $data ?? [], null);
        $this->setIfExists('label_translations', $data ?? [], null);
        $this->setIfExists('locale', $data ?? [], null);
        $this->setIfExists('required', $data ?? [], null);
        $this->setIfExists('requirement_level', $data ?? [], null);
        $this->setIfExists('roles', $data ?? [], null);
        $this->setIfExists('transformations', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('type_parameter', $data ?? [], null);
        $this->setIfExists('type_parameters', $data ?? [], null);
        $this->setIfExists('unique_code', $data ?? [], null);
        $this->setIfExists('validations', $data ?? [], null);
        $this->setIfExists('values', $data ?? [], null);
        $this->setIfExists('values_list', $data ?? [], null);
        $this->setIfExists('variant', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets channels
     *
     * @return \cbdesk\Mirakl\Model\PM11Response200AttributesChannels[]|null
     */
    public function getChannels()
    {
        return $this->container['channels'];
    }

    /**
     * Sets channels
     *
     * @param \cbdesk\Mirakl\Model\PM11Response200AttributesChannels[]|null $channels Channels
     *
     * @return self
     */
    public function setChannels($channels)
    {
        if (is_null($channels)) {
            throw new \InvalidArgumentException('non-nullable channels cannot be null');
        }
        $this->container['channels'] = $channels;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string|null
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string|null $code Attribute code
     *
     * @return self
     */
    public function setCode($code)
    {
        if (is_null($code)) {
            throw new \InvalidArgumentException('non-nullable code cannot be null');
        }
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets default_value
     *
     * @return string|null
     */
    public function getDefaultValue()
    {
        return $this->container['default_value'];
    }

    /**
     * Sets default_value
     *
     * @param string|null $default_value Default value for value list type attributes
     *
     * @return self
     */
    public function setDefaultValue($default_value)
    {
        if (is_null($default_value)) {
            throw new \InvalidArgumentException('non-nullable default_value cannot be null');
        }
        $this->container['default_value'] = $default_value;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Attribute description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets description_translations
     *
     * @return \cbdesk\Mirakl\Model\PM11Response200AttributesDescriptionTranslations[]|null
     */
    public function getDescriptionTranslations()
    {
        return $this->container['description_translations'];
    }

    /**
     * Sets description_translations
     *
     * @param \cbdesk\Mirakl\Model\PM11Response200AttributesDescriptionTranslations[]|null $description_translations Translations of the attribute description
     *
     * @return self
     */
    public function setDescriptionTranslations($description_translations)
    {
        if (is_null($description_translations)) {
            throw new \InvalidArgumentException('non-nullable description_translations cannot be null');
        }
        $this->container['description_translations'] = $description_translations;

        return $this;
    }

    /**
     * Gets example
     *
     * @return string|null
     */
    public function getExample()
    {
        return $this->container['example'];
    }

    /**
     * Sets example
     *
     * @param string|null $example Attribute example to help sellers when they fill the product creation form
     *
     * @return self
     */
    public function setExample($example)
    {
        if (is_null($example)) {
            throw new \InvalidArgumentException('non-nullable example cannot be null');
        }
        $this->container['example'] = $example;

        return $this;
    }

    /**
     * Gets hierarchy_code
     *
     * @return string|null
     */
    public function getHierarchyCode()
    {
        return $this->container['hierarchy_code'];
    }

    /**
     * Sets hierarchy_code
     *
     * @param string|null $hierarchy_code The code of the hierarchy (category) this attribute belongs to. If this field is empty, the attribute is shared among all hierarchies.
     *
     * @return self
     */
    public function setHierarchyCode($hierarchy_code)
    {
        if (is_null($hierarchy_code)) {
            throw new \InvalidArgumentException('non-nullable hierarchy_code cannot be null');
        }
        $this->container['hierarchy_code'] = $hierarchy_code;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string|null
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string|null $label Attribute label
     *
     * @return self
     */
    public function setLabel($label)
    {
        if (is_null($label)) {
            throw new \InvalidArgumentException('non-nullable label cannot be null');
        }
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets label_translations
     *
     * @return \cbdesk\Mirakl\Model\PM11Response200AttributesLabelTranslations[]|null
     */
    public function getLabelTranslations()
    {
        return $this->container['label_translations'];
    }

    /**
     * Sets label_translations
     *
     * @param \cbdesk\Mirakl\Model\PM11Response200AttributesLabelTranslations[]|null $label_translations Translations of the attribute label
     *
     * @return self
     */
    public function setLabelTranslations($label_translations)
    {
        if (is_null($label_translations)) {
            throw new \InvalidArgumentException('non-nullable label_translations cannot be null');
        }
        $this->container['label_translations'] = $label_translations;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return string|null
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param string|null $locale Attribute localization.<br/> The language format can either be:<br/> <ul>    <li>ISO-639 (E.g. \"en\")</li>    <li>ISO-639_ISO-3166 (E.g. \"en_US\")</li> </ul>
     *
     * @return self
     */
    public function setLocale($locale)
    {
        if (is_null($locale)) {
            throw new \InvalidArgumentException('non-nullable locale cannot be null');
        }
        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets required
     *
     * @return bool|null
     * @deprecated
     */
    public function getRequired()
    {
        return $this->container['required'];
    }

    /**
     * Sets required
     *
     * @param bool|null $required Whether or not the attribute is required
     *
     * @return self
     * @deprecated
     */
    public function setRequired($required)
    {
        if (is_null($required)) {
            throw new \InvalidArgumentException('non-nullable required cannot be null');
        }
        $this->container['required'] = $required;

        return $this;
    }

    /**
     * Gets requirement_level
     *
     * @return string|null
     */
    public function getRequirementLevel()
    {
        return $this->container['requirement_level'];
    }

    /**
     * Sets requirement_level
     *
     * @param string|null $requirement_level Requirement level of the attribute
     *
     * @return self
     */
    public function setRequirementLevel($requirement_level)
    {
        if (is_null($requirement_level)) {
            throw new \InvalidArgumentException('non-nullable requirement_level cannot be null');
        }
        $this->container['requirement_level'] = $requirement_level;

        return $this;
    }

    /**
     * Gets roles
     *
     * @return \cbdesk\Mirakl\Model\PM11Response200AttributesRoles[]|null
     */
    public function getRoles()
    {
        return $this->container['roles'];
    }

    /**
     * Sets roles
     *
     * @param \cbdesk\Mirakl\Model\PM11Response200AttributesRoles[]|null $roles Attribute roles
     *
     * @return self
     */
    public function setRoles($roles)
    {
        if (is_null($roles)) {
            throw new \InvalidArgumentException('non-nullable roles cannot be null');
        }
        $this->container['roles'] = $roles;

        return $this;
    }

    /**
     * Gets transformations
     *
     * @return string|null
     */
    public function getTransformations()
    {
        return $this->container['transformations'];
    }

    /**
     * Sets transformations
     *
     * @param string|null $transformations Transformations applied to the attribute (a list of transformations separated by commas)
     *
     * @return self
     */
    public function setTransformations($transformations)
    {
        if (is_null($transformations)) {
            throw new \InvalidArgumentException('non-nullable transformations cannot be null');
        }
        $this->container['transformations'] = $transformations;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Attribute type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets type_parameter
     *
     * @return string|null
     * @deprecated
     */
    public function getTypeParameter()
    {
        return $this->container['type_parameter'];
    }

    /**
     * Sets type_parameter
     *
     * @param string|null $type_parameter Type parameter
     *
     * @return self
     * @deprecated
     */
    public function setTypeParameter($type_parameter)
    {
        if (is_null($type_parameter)) {
            throw new \InvalidArgumentException('non-nullable type_parameter cannot be null');
        }
        $this->container['type_parameter'] = $type_parameter;

        return $this;
    }

    /**
     * Gets type_parameters
     *
     * @return \cbdesk\Mirakl\Model\PM11Response200AttributesTypeParameters[]|null
     */
    public function getTypeParameters()
    {
        return $this->container['type_parameters'];
    }

    /**
     * Sets type_parameters
     *
     * @param \cbdesk\Mirakl\Model\PM11Response200AttributesTypeParameters[]|null $type_parameters Specificities of the attribute type, for example the date format, or the maximum size of a media
     *
     * @return self
     */
    public function setTypeParameters($type_parameters)
    {
        if (is_null($type_parameters)) {
            throw new \InvalidArgumentException('non-nullable type_parameters cannot be null');
        }
        $this->container['type_parameters'] = $type_parameters;

        return $this;
    }

    /**
     * Gets unique_code
     *
     * @return string|null
     */
    public function getUniqueCode()
    {
        return $this->container['unique_code'];
    }

    /**
     * Sets unique_code
     *
     * @param string|null $unique_code Unique code of the attribute
     *
     * @return self
     */
    public function setUniqueCode($unique_code)
    {
        if (is_null($unique_code)) {
            throw new \InvalidArgumentException('non-nullable unique_code cannot be null');
        }
        $this->container['unique_code'] = $unique_code;

        return $this;
    }

    /**
     * Gets validations
     *
     * @return string|null
     */
    public function getValidations()
    {
        return $this->container['validations'];
    }

    /**
     * Sets validations
     *
     * @param string|null $validations Validations applied to the attribute (a list of validations separated by commas)
     *
     * @return self
     */
    public function setValidations($validations)
    {
        if (is_null($validations)) {
            throw new \InvalidArgumentException('non-nullable validations cannot be null');
        }
        $this->container['validations'] = $validations;

        return $this;
    }

    /**
     * Gets values
     *
     * @return \cbdesk\Mirakl\Model\PM11Response200AttributesValues[]|null
     * @deprecated
     */
    public function getValues()
    {
        return $this->container['values'];
    }

    /**
     * Sets values
     *
     * @param \cbdesk\Mirakl\Model\PM11Response200AttributesValues[]|null $values A list of authorized values for this attribute
     *
     * @return self
     * @deprecated
     */
    public function setValues($values)
    {
        if (is_null($values)) {
            throw new \InvalidArgumentException('non-nullable values cannot be null');
        }
        $this->container['values'] = $values;

        return $this;
    }

    /**
     * Gets values_list
     *
     * @return string|null
     * @deprecated
     */
    public function getValuesList()
    {
        return $this->container['values_list'];
    }

    /**
     * Sets values_list
     *
     * @param string|null $values_list This code points to the list defining the authorized values for this attribute.
     *
     * @return self
     * @deprecated
     */
    public function setValuesList($values_list)
    {
        if (is_null($values_list)) {
            throw new \InvalidArgumentException('non-nullable values_list cannot be null');
        }
        $this->container['values_list'] = $values_list;

        return $this;
    }

    /**
     * Gets variant
     *
     * @return bool|null
     */
    public function getVariant()
    {
        return $this->container['variant'];
    }

    /**
     * Sets variant
     *
     * @param bool|null $variant Whether or not the attribute is a variation axis. Possible values: <code>true</code> or <code>false</code>
     *
     * @return self
     */
    public function setVariant($variant)
    {
        if (is_null($variant)) {
            throw new \InvalidArgumentException('non-nullable variant cannot be null');
        }
        $this->container['variant'] = $variant;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


