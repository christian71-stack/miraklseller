<?php
/**
 * OF24RequestOffers
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  cbdesk\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mirakl Marketplace APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest-release
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace cbdesk\Mirakl\Model;

use \ArrayAccess;
use \cbdesk\Mirakl\ObjectSerializer;

/**
 * OF24RequestOffers Class Doc Comment
 *
 * @category Class
 * @description Offers list
 * @package  cbdesk\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OF24RequestOffers implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OF24_Request_Offers';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'all_prices' => '\cbdesk\Mirakl\Model\OF24RequestOffersAllPrices[]',
        'allow_quote_requests' => 'bool',
        'available_ended' => 'string',
        'available_started' => 'string',
        'description' => 'string',
        'discount' => '\cbdesk\Mirakl\Model\OF24RequestOffersDiscount',
        'eco_contributions' => '\cbdesk\Mirakl\Model\OF24RequestOffersEcoContributions[]',
        'internal_description' => 'string',
        'leadtime_to_ship' => 'int',
        'logistic_class' => 'string',
        'max_order_quantity' => 'int',
        'min_order_quantity' => 'int',
        'min_quantity_alert' => 'int',
        'msrp' => 'float',
        'offer_additional_fields' => '\cbdesk\Mirakl\Model\OF24RequestOffersOfferAdditionalFields[]',
        'package_quantity' => 'int',
        'price' => 'float',
        'price_additional_info' => 'string',
        'pricing_unit' => 'string',
        'product_id' => 'string',
        'product_id_type' => 'string',
        'product_tax_code' => 'string',
        'quantity' => 'int',
        'retail_prices' => '\cbdesk\Mirakl\Model\OF24RequestOffersRetailPrices[]',
        'shop_sku' => 'string',
        'state_code' => 'string',
        'update_delete' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'all_prices' => null,
        'allow_quote_requests' => null,
        'available_ended' => null,
        'available_started' => null,
        'description' => null,
        'discount' => null,
        'eco_contributions' => null,
        'internal_description' => null,
        'leadtime_to_ship' => 'int32',
        'logistic_class' => null,
        'max_order_quantity' => 'int32',
        'min_order_quantity' => 'int32',
        'min_quantity_alert' => 'int32',
        'msrp' => null,
        'offer_additional_fields' => null,
        'package_quantity' => 'int32',
        'price' => null,
        'price_additional_info' => null,
        'pricing_unit' => null,
        'product_id' => null,
        'product_id_type' => null,
        'product_tax_code' => null,
        'quantity' => 'int32',
        'retail_prices' => null,
        'shop_sku' => null,
        'state_code' => null,
        'update_delete' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'all_prices' => false,
        'allow_quote_requests' => false,
        'available_ended' => false,
        'available_started' => false,
        'description' => false,
        'discount' => false,
        'eco_contributions' => false,
        'internal_description' => false,
        'leadtime_to_ship' => false,
        'logistic_class' => false,
        'max_order_quantity' => false,
        'min_order_quantity' => false,
        'min_quantity_alert' => false,
        'msrp' => false,
        'offer_additional_fields' => false,
        'package_quantity' => false,
        'price' => false,
        'price_additional_info' => false,
        'pricing_unit' => false,
        'product_id' => false,
        'product_id_type' => false,
        'product_tax_code' => false,
        'quantity' => false,
        'retail_prices' => false,
        'shop_sku' => false,
        'state_code' => false,
        'update_delete' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'all_prices' => 'all_prices',
        'allow_quote_requests' => 'allow_quote_requests',
        'available_ended' => 'available_ended',
        'available_started' => 'available_started',
        'description' => 'description',
        'discount' => 'discount',
        'eco_contributions' => 'eco_contributions',
        'internal_description' => 'internal_description',
        'leadtime_to_ship' => 'leadtime_to_ship',
        'logistic_class' => 'logistic_class',
        'max_order_quantity' => 'max_order_quantity',
        'min_order_quantity' => 'min_order_quantity',
        'min_quantity_alert' => 'min_quantity_alert',
        'msrp' => 'msrp',
        'offer_additional_fields' => 'offer_additional_fields',
        'package_quantity' => 'package_quantity',
        'price' => 'price',
        'price_additional_info' => 'price_additional_info',
        'pricing_unit' => 'pricing_unit',
        'product_id' => 'product_id',
        'product_id_type' => 'product_id_type',
        'product_tax_code' => 'product_tax_code',
        'quantity' => 'quantity',
        'retail_prices' => 'retail_prices',
        'shop_sku' => 'shop_sku',
        'state_code' => 'state_code',
        'update_delete' => 'update_delete'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'all_prices' => 'setAllPrices',
        'allow_quote_requests' => 'setAllowQuoteRequests',
        'available_ended' => 'setAvailableEnded',
        'available_started' => 'setAvailableStarted',
        'description' => 'setDescription',
        'discount' => 'setDiscount',
        'eco_contributions' => 'setEcoContributions',
        'internal_description' => 'setInternalDescription',
        'leadtime_to_ship' => 'setLeadtimeToShip',
        'logistic_class' => 'setLogisticClass',
        'max_order_quantity' => 'setMaxOrderQuantity',
        'min_order_quantity' => 'setMinOrderQuantity',
        'min_quantity_alert' => 'setMinQuantityAlert',
        'msrp' => 'setMsrp',
        'offer_additional_fields' => 'setOfferAdditionalFields',
        'package_quantity' => 'setPackageQuantity',
        'price' => 'setPrice',
        'price_additional_info' => 'setPriceAdditionalInfo',
        'pricing_unit' => 'setPricingUnit',
        'product_id' => 'setProductId',
        'product_id_type' => 'setProductIdType',
        'product_tax_code' => 'setProductTaxCode',
        'quantity' => 'setQuantity',
        'retail_prices' => 'setRetailPrices',
        'shop_sku' => 'setShopSku',
        'state_code' => 'setStateCode',
        'update_delete' => 'setUpdateDelete'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'all_prices' => 'getAllPrices',
        'allow_quote_requests' => 'getAllowQuoteRequests',
        'available_ended' => 'getAvailableEnded',
        'available_started' => 'getAvailableStarted',
        'description' => 'getDescription',
        'discount' => 'getDiscount',
        'eco_contributions' => 'getEcoContributions',
        'internal_description' => 'getInternalDescription',
        'leadtime_to_ship' => 'getLeadtimeToShip',
        'logistic_class' => 'getLogisticClass',
        'max_order_quantity' => 'getMaxOrderQuantity',
        'min_order_quantity' => 'getMinOrderQuantity',
        'min_quantity_alert' => 'getMinQuantityAlert',
        'msrp' => 'getMsrp',
        'offer_additional_fields' => 'getOfferAdditionalFields',
        'package_quantity' => 'getPackageQuantity',
        'price' => 'getPrice',
        'price_additional_info' => 'getPriceAdditionalInfo',
        'pricing_unit' => 'getPricingUnit',
        'product_id' => 'getProductId',
        'product_id_type' => 'getProductIdType',
        'product_tax_code' => 'getProductTaxCode',
        'quantity' => 'getQuantity',
        'retail_prices' => 'getRetailPrices',
        'shop_sku' => 'getShopSku',
        'state_code' => 'getStateCode',
        'update_delete' => 'getUpdateDelete'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('all_prices', $data ?? [], null);
        $this->setIfExists('allow_quote_requests', $data ?? [], null);
        $this->setIfExists('available_ended', $data ?? [], null);
        $this->setIfExists('available_started', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('discount', $data ?? [], null);
        $this->setIfExists('eco_contributions', $data ?? [], null);
        $this->setIfExists('internal_description', $data ?? [], null);
        $this->setIfExists('leadtime_to_ship', $data ?? [], null);
        $this->setIfExists('logistic_class', $data ?? [], null);
        $this->setIfExists('max_order_quantity', $data ?? [], null);
        $this->setIfExists('min_order_quantity', $data ?? [], null);
        $this->setIfExists('min_quantity_alert', $data ?? [], null);
        $this->setIfExists('msrp', $data ?? [], null);
        $this->setIfExists('offer_additional_fields', $data ?? [], null);
        $this->setIfExists('package_quantity', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('price_additional_info', $data ?? [], null);
        $this->setIfExists('pricing_unit', $data ?? [], null);
        $this->setIfExists('product_id', $data ?? [], null);
        $this->setIfExists('product_id_type', $data ?? [], null);
        $this->setIfExists('product_tax_code', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('retail_prices', $data ?? [], null);
        $this->setIfExists('shop_sku', $data ?? [], null);
        $this->setIfExists('state_code', $data ?? [], null);
        $this->setIfExists('update_delete', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets all_prices
     *
     * @return \cbdesk\Mirakl\Model\OF24RequestOffersAllPrices[]|null
     */
    public function getAllPrices()
    {
        return $this->container['all_prices'];
    }

    /**
     * Sets all_prices
     *
     * @param \cbdesk\Mirakl\Model\OF24RequestOffersAllPrices[]|null $all_prices The volume and channel prices.
     *
     * @return self
     */
    public function setAllPrices($all_prices)
    {
        if (is_null($all_prices)) {
            throw new \InvalidArgumentException('non-nullable all_prices cannot be null');
        }
        $this->container['all_prices'] = $all_prices;

        return $this;
    }

    /**
     * Gets allow_quote_requests
     *
     * @return bool|null
     */
    public function getAllowQuoteRequests()
    {
        return $this->container['allow_quote_requests'];
    }

    /**
     * Sets allow_quote_requests
     *
     * @param bool|null $allow_quote_requests Whether the offer is eligible for quotation. Offer update: if not provided, will be set to false.
     *
     * @return self
     */
    public function setAllowQuoteRequests($allow_quote_requests)
    {
        if (is_null($allow_quote_requests)) {
            throw new \InvalidArgumentException('non-nullable allow_quote_requests cannot be null');
        }
        $this->container['allow_quote_requests'] = $allow_quote_requests;

        return $this;
    }

    /**
     * Gets available_ended
     *
     * @return string|null
     */
    public function getAvailableEnded()
    {
        return $this->container['available_ended'];
    }

    /**
     * Sets available_ended
     *
     * @param string|null $available_ended End date of the period of availability. Offer update: if not provided, existing data will be deleted.
     *
     * @return self
     */
    public function setAvailableEnded($available_ended)
    {
        if (is_null($available_ended)) {
            throw new \InvalidArgumentException('non-nullable available_ended cannot be null');
        }
        $this->container['available_ended'] = $available_ended;

        return $this;
    }

    /**
     * Gets available_started
     *
     * @return string|null
     */
    public function getAvailableStarted()
    {
        return $this->container['available_started'];
    }

    /**
     * Sets available_started
     *
     * @param string|null $available_started Started date of the period of availability. Offer update: if not provided, existing data will be deleted.
     *
     * @return self
     */
    public function setAvailableStarted($available_started)
    {
        if (is_null($available_started)) {
            throw new \InvalidArgumentException('non-nullable available_started cannot be null');
        }
        $this->container['available_started'] = $available_started;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Description of the offer. Offer update: if not provided, existing data will be deleted.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets discount
     *
     * @return \cbdesk\Mirakl\Model\OF24RequestOffersDiscount|null
     */
    public function getDiscount()
    {
        return $this->container['discount'];
    }

    /**
     * Sets discount
     *
     * @param \cbdesk\Mirakl\Model\OF24RequestOffersDiscount|null $discount discount
     *
     * @return self
     */
    public function setDiscount($discount)
    {
        if (is_null($discount)) {
            throw new \InvalidArgumentException('non-nullable discount cannot be null');
        }
        $this->container['discount'] = $discount;

        return $this;
    }

    /**
     * Gets eco_contributions
     *
     * @return \cbdesk\Mirakl\Model\OF24RequestOffersEcoContributions[]|null
     */
    public function getEcoContributions()
    {
        return $this->container['eco_contributions'];
    }

    /**
     * Sets eco_contributions
     *
     * @param \cbdesk\Mirakl\Model\OF24RequestOffersEcoContributions[]|null $eco_contributions Eco-contributions of the offer - only available if the operator setting <em>Activate data collection related to circular economy regulations</em> has been enabled. Offer update: if not provided, existing data will be deleted.
     *
     * @return self
     */
    public function setEcoContributions($eco_contributions)
    {
        if (is_null($eco_contributions)) {
            throw new \InvalidArgumentException('non-nullable eco_contributions cannot be null');
        }
        $this->container['eco_contributions'] = $eco_contributions;

        return $this;
    }

    /**
     * Gets internal_description
     *
     * @return string|null
     */
    public function getInternalDescription()
    {
        return $this->container['internal_description'];
    }

    /**
     * Sets internal_description
     *
     * @param string|null $internal_description Internal description of the offer. Offer update: if not provided, existing data will be deleted.
     *
     * @return self
     */
    public function setInternalDescription($internal_description)
    {
        if (is_null($internal_description)) {
            throw new \InvalidArgumentException('non-nullable internal_description cannot be null');
        }
        $this->container['internal_description'] = $internal_description;

        return $this;
    }

    /**
     * Gets leadtime_to_ship
     *
     * @return int|null
     */
    public function getLeadtimeToShip()
    {
        return $this->container['leadtime_to_ship'];
    }

    /**
     * Sets leadtime_to_ship
     *
     * @param int|null $leadtime_to_ship Leadtime to ship of the offer, in days. Offer update: if not provided, existing data will be deleted.
     *
     * @return self
     */
    public function setLeadtimeToShip($leadtime_to_ship)
    {
        if (is_null($leadtime_to_ship)) {
            throw new \InvalidArgumentException('non-nullable leadtime_to_ship cannot be null');
        }
        $this->container['leadtime_to_ship'] = $leadtime_to_ship;

        return $this;
    }

    /**
     * Gets logistic_class
     *
     * @return string|null
     */
    public function getLogisticClass()
    {
        return $this->container['logistic_class'];
    }

    /**
     * Sets logistic_class
     *
     * @param string|null $logistic_class Offer logistic class. Offer update: if not provided, existing data will be deleted.
     *
     * @return self
     */
    public function setLogisticClass($logistic_class)
    {
        if (is_null($logistic_class)) {
            throw new \InvalidArgumentException('non-nullable logistic_class cannot be null');
        }
        $this->container['logistic_class'] = $logistic_class;

        return $this;
    }

    /**
     * Gets max_order_quantity
     *
     * @return int|null
     */
    public function getMaxOrderQuantity()
    {
        return $this->container['max_order_quantity'];
    }

    /**
     * Sets max_order_quantity
     *
     * @param int|null $max_order_quantity The maximum quantity of product items per order. Offer update: if not provided, existing data will be deleted.
     *
     * @return self
     */
    public function setMaxOrderQuantity($max_order_quantity)
    {
        if (is_null($max_order_quantity)) {
            throw new \InvalidArgumentException('non-nullable max_order_quantity cannot be null');
        }
        $this->container['max_order_quantity'] = $max_order_quantity;

        return $this;
    }

    /**
     * Gets min_order_quantity
     *
     * @return int|null
     */
    public function getMinOrderQuantity()
    {
        return $this->container['min_order_quantity'];
    }

    /**
     * Sets min_order_quantity
     *
     * @param int|null $min_order_quantity The minimum quantity of product items per order. Offer update: if not provided, existing data will be deleted.
     *
     * @return self
     */
    public function setMinOrderQuantity($min_order_quantity)
    {
        if (is_null($min_order_quantity)) {
            throw new \InvalidArgumentException('non-nullable min_order_quantity cannot be null');
        }
        $this->container['min_order_quantity'] = $min_order_quantity;

        return $this;
    }

    /**
     * Gets min_quantity_alert
     *
     * @return int|null
     */
    public function getMinQuantityAlert()
    {
        return $this->container['min_quantity_alert'];
    }

    /**
     * Sets min_quantity_alert
     *
     * @param int|null $min_quantity_alert The minimum stock level that triggers an email alert. No alerts are sent if this field is not specified. Offer update: if not provided, existing data will be deleted.
     *
     * @return self
     */
    public function setMinQuantityAlert($min_quantity_alert)
    {
        if (is_null($min_quantity_alert)) {
            throw new \InvalidArgumentException('non-nullable min_quantity_alert cannot be null');
        }
        $this->container['min_quantity_alert'] = $min_quantity_alert;

        return $this;
    }

    /**
     * Gets msrp
     *
     * @return float|null
     */
    public function getMsrp()
    {
        return $this->container['msrp'];
    }

    /**
     * Sets msrp
     *
     * @param float|null $msrp The retail price recommendation, also referred to as manufacturer's suggested retail price (MSRP) or recommended retail price (RRP). Only applicable for Dropship offers.
     *
     * @return self
     */
    public function setMsrp($msrp)
    {
        if (is_null($msrp)) {
            throw new \InvalidArgumentException('non-nullable msrp cannot be null');
        }
        $this->container['msrp'] = $msrp;

        return $this;
    }

    /**
     * Gets offer_additional_fields
     *
     * @return \cbdesk\Mirakl\Model\OF24RequestOffersOfferAdditionalFields[]|null
     */
    public function getOfferAdditionalFields()
    {
        return $this->container['offer_additional_fields'];
    }

    /**
     * Sets offer_additional_fields
     *
     * @param \cbdesk\Mirakl\Model\OF24RequestOffersOfferAdditionalFields[]|null $offer_additional_fields Custom fields of the offer
     *
     * @return self
     */
    public function setOfferAdditionalFields($offer_additional_fields)
    {
        if (is_null($offer_additional_fields)) {
            throw new \InvalidArgumentException('non-nullable offer_additional_fields cannot be null');
        }
        $this->container['offer_additional_fields'] = $offer_additional_fields;

        return $this;
    }

    /**
     * Gets package_quantity
     *
     * @return int|null
     */
    public function getPackageQuantity()
    {
        return $this->container['package_quantity'];
    }

    /**
     * Sets package_quantity
     *
     * @param int|null $package_quantity The indivisible selling quantity of the same product. Offer update: if not provided, existing data will be deleted.
     *
     * @return self
     */
    public function setPackageQuantity($package_quantity)
    {
        if (is_null($package_quantity)) {
            throw new \InvalidArgumentException('non-nullable package_quantity cannot be null');
        }
        $this->container['package_quantity'] = $package_quantity;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float|null $price Price of the offer. For Dropship specifically: the purchasing price of the offer, also referred to as cost or wholesale price.
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            throw new \InvalidArgumentException('non-nullable price cannot be null');
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets price_additional_info
     *
     * @return string|null
     */
    public function getPriceAdditionalInfo()
    {
        return $this->container['price_additional_info'];
    }

    /**
     * Sets price_additional_info
     *
     * @param string|null $price_additional_info Price additional information of the offer. Offer update: if not provided, existing data will be deleted.
     *
     * @return self
     */
    public function setPriceAdditionalInfo($price_additional_info)
    {
        if (is_null($price_additional_info)) {
            throw new \InvalidArgumentException('non-nullable price_additional_info cannot be null');
        }
        $this->container['price_additional_info'] = $price_additional_info;

        return $this;
    }

    /**
     * Gets pricing_unit
     *
     * @return string|null
     */
    public function getPricingUnit()
    {
        return $this->container['pricing_unit'];
    }

    /**
     * Sets pricing_unit
     *
     * @param string|null $pricing_unit The unit corresponding to the submitted price when the price per measurement unit feature is used.
     *
     * @return self
     */
    public function setPricingUnit($pricing_unit)
    {
        if (is_null($pricing_unit)) {
            throw new \InvalidArgumentException('non-nullable pricing_unit cannot be null');
        }
        $this->container['pricing_unit'] = $pricing_unit;

        return $this;
    }

    /**
     * Gets product_id
     *
     * @return string|null
     */
    public function getProductId()
    {
        return $this->container['product_id'];
    }

    /**
     * Sets product_id
     *
     * @param string|null $product_id Reference of the product associated with the offer. Required at offer creation. Optional at offer update.
     *
     * @return self
     */
    public function setProductId($product_id)
    {
        if (is_null($product_id)) {
            throw new \InvalidArgumentException('non-nullable product_id cannot be null');
        }
        $this->container['product_id'] = $product_id;

        return $this;
    }

    /**
     * Gets product_id_type
     *
     * @return string|null
     */
    public function getProductIdType()
    {
        return $this->container['product_id_type'];
    }

    /**
     * Sets product_id_type
     *
     * @param string|null $product_id_type Reference type of the product associated with the offer. Required at offer creation. Optional at offer update.
     *
     * @return self
     */
    public function setProductIdType($product_id_type)
    {
        if (is_null($product_id_type)) {
            throw new \InvalidArgumentException('non-nullable product_id_type cannot be null');
        }
        $this->container['product_id_type'] = $product_id_type;

        return $this;
    }

    /**
     * Gets product_tax_code
     *
     * @return string|null
     */
    public function getProductTaxCode()
    {
        return $this->container['product_tax_code'];
    }

    /**
     * Sets product_tax_code
     *
     * @param string|null $product_tax_code Product tax code associated to the offer. When Operator mandatorily collects product tax codes on offers, required at offer creation and update. When Operator optionally collects product tax codes on offers, if no value is provided at offer update, existing data will be deleted.
     *
     * @return self
     */
    public function setProductTaxCode($product_tax_code)
    {
        if (is_null($product_tax_code)) {
            throw new \InvalidArgumentException('non-nullable product_tax_code cannot be null');
        }
        $this->container['product_tax_code'] = $product_tax_code;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int|null $quantity Quantity available of the offer. Offer update: if not provided, will be set to 0.
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets retail_prices
     *
     * @return \cbdesk\Mirakl\Model\OF24RequestOffersRetailPrices[]|null
     */
    public function getRetailPrices()
    {
        return $this->container['retail_prices'];
    }

    /**
     * Sets retail_prices
     *
     * @param \cbdesk\Mirakl\Model\OF24RequestOffersRetailPrices[]|null $retail_prices The retail prices of the offer, also referred to as selling prices. Applicable only for Dropship offers.
     *
     * @return self
     */
    public function setRetailPrices($retail_prices)
    {
        if (is_null($retail_prices)) {
            throw new \InvalidArgumentException('non-nullable retail_prices cannot be null');
        }
        $this->container['retail_prices'] = $retail_prices;

        return $this;
    }

    /**
     * Gets shop_sku
     *
     * @return string|null
     */
    public function getShopSku()
    {
        return $this->container['shop_sku'];
    }

    /**
     * Sets shop_sku
     *
     * @param string|null $shop_sku Sku of the offer
     *
     * @return self
     */
    public function setShopSku($shop_sku)
    {
        if (is_null($shop_sku)) {
            throw new \InvalidArgumentException('non-nullable shop_sku cannot be null');
        }
        $this->container['shop_sku'] = $shop_sku;

        return $this;
    }

    /**
     * Gets state_code
     *
     * @return string|null
     */
    public function getStateCode()
    {
        return $this->container['state_code'];
    }

    /**
     * Sets state_code
     *
     * @param string|null $state_code State of the offer
     *
     * @return self
     */
    public function setStateCode($state_code)
    {
        if (is_null($state_code)) {
            throw new \InvalidArgumentException('non-nullable state_code cannot be null');
        }
        $this->container['state_code'] = $state_code;

        return $this;
    }

    /**
     * Gets update_delete
     *
     * @return string|null
     */
    public function getUpdateDelete()
    {
        return $this->container['update_delete'];
    }

    /**
     * Sets update_delete
     *
     * @param string|null $update_delete Update delete flag. Could be empty (means \"update\"), \"update\" or \"delete\".
     *
     * @return self
     */
    public function setUpdateDelete($update_delete)
    {
        if (is_null($update_delete)) {
            throw new \InvalidArgumentException('non-nullable update_delete cannot be null');
        }
        $this->container['update_delete'] = $update_delete;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


