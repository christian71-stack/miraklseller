<?php
/**
 * P51Response200ProductImportTrackingsIntegrationDetails
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  cbdesk\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mirakl Marketplace APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest-release
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace cbdesk\Mirakl\Model;

use \ArrayAccess;
use \cbdesk\Mirakl\ObjectSerializer;

/**
 * P51Response200ProductImportTrackingsIntegrationDetails Class Doc Comment
 *
 * @category Class
 * @package  cbdesk\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class P51Response200ProductImportTrackingsIntegrationDetails implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'P51_Response_200_ProductImportTrackings_IntegrationDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'invalid_products' => 'int',
        'products_not_accepted_in_time' => 'int',
        'products_not_synchronized_in_time' => 'int',
        'products_reimported' => 'int',
        'products_successfully_synchronized' => 'int',
        'products_with_synchronization_issues' => 'int',
        'products_with_wrong_identifiers' => 'int',
        'rejected_products' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'invalid_products' => 'int64',
        'products_not_accepted_in_time' => 'int64',
        'products_not_synchronized_in_time' => 'int64',
        'products_reimported' => 'int64',
        'products_successfully_synchronized' => 'int64',
        'products_with_synchronization_issues' => 'int64',
        'products_with_wrong_identifiers' => 'int64',
        'rejected_products' => 'int64'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'invalid_products' => false,
        'products_not_accepted_in_time' => false,
        'products_not_synchronized_in_time' => false,
        'products_reimported' => false,
        'products_successfully_synchronized' => false,
        'products_with_synchronization_issues' => false,
        'products_with_wrong_identifiers' => false,
        'rejected_products' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'invalid_products' => 'invalid_products',
        'products_not_accepted_in_time' => 'products_not_accepted_in_time',
        'products_not_synchronized_in_time' => 'products_not_synchronized_in_time',
        'products_reimported' => 'products_reimported',
        'products_successfully_synchronized' => 'products_successfully_synchronized',
        'products_with_synchronization_issues' => 'products_with_synchronization_issues',
        'products_with_wrong_identifiers' => 'products_with_wrong_identifiers',
        'rejected_products' => 'rejected_products'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'invalid_products' => 'setInvalidProducts',
        'products_not_accepted_in_time' => 'setProductsNotAcceptedInTime',
        'products_not_synchronized_in_time' => 'setProductsNotSynchronizedInTime',
        'products_reimported' => 'setProductsReimported',
        'products_successfully_synchronized' => 'setProductsSuccessfullySynchronized',
        'products_with_synchronization_issues' => 'setProductsWithSynchronizationIssues',
        'products_with_wrong_identifiers' => 'setProductsWithWrongIdentifiers',
        'rejected_products' => 'setRejectedProducts'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'invalid_products' => 'getInvalidProducts',
        'products_not_accepted_in_time' => 'getProductsNotAcceptedInTime',
        'products_not_synchronized_in_time' => 'getProductsNotSynchronizedInTime',
        'products_reimported' => 'getProductsReimported',
        'products_successfully_synchronized' => 'getProductsSuccessfullySynchronized',
        'products_with_synchronization_issues' => 'getProductsWithSynchronizationIssues',
        'products_with_wrong_identifiers' => 'getProductsWithWrongIdentifiers',
        'rejected_products' => 'getRejectedProducts'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('invalid_products', $data ?? [], null);
        $this->setIfExists('products_not_accepted_in_time', $data ?? [], null);
        $this->setIfExists('products_not_synchronized_in_time', $data ?? [], null);
        $this->setIfExists('products_reimported', $data ?? [], null);
        $this->setIfExists('products_successfully_synchronized', $data ?? [], null);
        $this->setIfExists('products_with_synchronization_issues', $data ?? [], null);
        $this->setIfExists('products_with_wrong_identifiers', $data ?? [], null);
        $this->setIfExists('rejected_products', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets invalid_products
     *
     * @return int|null
     */
    public function getInvalidProducts()
    {
        return $this->container['invalid_products'];
    }

    /**
     * Sets invalid_products
     *
     * @param int|null $invalid_products Number of invalid products
     *
     * @return self
     */
    public function setInvalidProducts($invalid_products)
    {
        if (is_null($invalid_products)) {
            throw new \InvalidArgumentException('non-nullable invalid_products cannot be null');
        }
        $this->container['invalid_products'] = $invalid_products;

        return $this;
    }

    /**
     * Gets products_not_accepted_in_time
     *
     * @return int|null
     */
    public function getProductsNotAcceptedInTime()
    {
        return $this->container['products_not_accepted_in_time'];
    }

    /**
     * Sets products_not_accepted_in_time
     *
     * @param int|null $products_not_accepted_in_time Number of products that haven't been accepted in the required time
     *
     * @return self
     */
    public function setProductsNotAcceptedInTime($products_not_accepted_in_time)
    {
        if (is_null($products_not_accepted_in_time)) {
            throw new \InvalidArgumentException('non-nullable products_not_accepted_in_time cannot be null');
        }
        $this->container['products_not_accepted_in_time'] = $products_not_accepted_in_time;

        return $this;
    }

    /**
     * Gets products_not_synchronized_in_time
     *
     * @return int|null
     */
    public function getProductsNotSynchronizedInTime()
    {
        return $this->container['products_not_synchronized_in_time'];
    }

    /**
     * Sets products_not_synchronized_in_time
     *
     * @param int|null $products_not_synchronized_in_time Number of products that haven't been synchronized in the required time
     *
     * @return self
     */
    public function setProductsNotSynchronizedInTime($products_not_synchronized_in_time)
    {
        if (is_null($products_not_synchronized_in_time)) {
            throw new \InvalidArgumentException('non-nullable products_not_synchronized_in_time cannot be null');
        }
        $this->container['products_not_synchronized_in_time'] = $products_not_synchronized_in_time;

        return $this;
    }

    /**
     * Gets products_reimported
     *
     * @return int|null
     */
    public function getProductsReimported()
    {
        return $this->container['products_reimported'];
    }

    /**
     * Sets products_reimported
     *
     * @param int|null $products_reimported Number of products that have been reimported in a more recent file
     *
     * @return self
     */
    public function setProductsReimported($products_reimported)
    {
        if (is_null($products_reimported)) {
            throw new \InvalidArgumentException('non-nullable products_reimported cannot be null');
        }
        $this->container['products_reimported'] = $products_reimported;

        return $this;
    }

    /**
     * Gets products_successfully_synchronized
     *
     * @return int|null
     */
    public function getProductsSuccessfullySynchronized()
    {
        return $this->container['products_successfully_synchronized'];
    }

    /**
     * Sets products_successfully_synchronized
     *
     * @param int|null $products_successfully_synchronized Number of products successfully synchronized on operator system
     *
     * @return self
     */
    public function setProductsSuccessfullySynchronized($products_successfully_synchronized)
    {
        if (is_null($products_successfully_synchronized)) {
            throw new \InvalidArgumentException('non-nullable products_successfully_synchronized cannot be null');
        }
        $this->container['products_successfully_synchronized'] = $products_successfully_synchronized;

        return $this;
    }

    /**
     * Gets products_with_synchronization_issues
     *
     * @return int|null
     */
    public function getProductsWithSynchronizationIssues()
    {
        return $this->container['products_with_synchronization_issues'];
    }

    /**
     * Sets products_with_synchronization_issues
     *
     * @param int|null $products_with_synchronization_issues Number of products having synchronization issues with operator system
     *
     * @return self
     */
    public function setProductsWithSynchronizationIssues($products_with_synchronization_issues)
    {
        if (is_null($products_with_synchronization_issues)) {
            throw new \InvalidArgumentException('non-nullable products_with_synchronization_issues cannot be null');
        }
        $this->container['products_with_synchronization_issues'] = $products_with_synchronization_issues;

        return $this;
    }

    /**
     * Gets products_with_wrong_identifiers
     *
     * @return int|null
     */
    public function getProductsWithWrongIdentifiers()
    {
        return $this->container['products_with_wrong_identifiers'];
    }

    /**
     * Sets products_with_wrong_identifiers
     *
     * @param int|null $products_with_wrong_identifiers Number of products having wrong identifiers
     *
     * @return self
     */
    public function setProductsWithWrongIdentifiers($products_with_wrong_identifiers)
    {
        if (is_null($products_with_wrong_identifiers)) {
            throw new \InvalidArgumentException('non-nullable products_with_wrong_identifiers cannot be null');
        }
        $this->container['products_with_wrong_identifiers'] = $products_with_wrong_identifiers;

        return $this;
    }

    /**
     * Gets rejected_products
     *
     * @return int|null
     */
    public function getRejectedProducts()
    {
        return $this->container['rejected_products'];
    }

    /**
     * Sets rejected_products
     *
     * @param int|null $rejected_products Number of rejected products by operator system
     *
     * @return self
     */
    public function setRejectedProducts($rejected_products)
    {
        if (is_null($rejected_products)) {
            throw new \InvalidArgumentException('non-nullable rejected_products cannot be null');
        }
        $this->container['rejected_products'] = $rejected_products;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


