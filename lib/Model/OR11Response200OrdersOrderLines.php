<?php
/**
 * OR11Response200OrdersOrderLines
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  cbdesk\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mirakl Marketplace APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest-release
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace cbdesk\Mirakl\Model;

use \ArrayAccess;
use \cbdesk\Mirakl\ObjectSerializer;

/**
 * OR11Response200OrdersOrderLines Class Doc Comment
 *
 * @category Class
 * @package  cbdesk\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OR11Response200OrdersOrderLines implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OR11_Response_200_Orders_OrderLines';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'can_refund' => 'bool',
        'cancelations' => '\cbdesk\Mirakl\Model\OR11Response200OrdersOrderLinesCancelations[]',
        'category_code' => 'string',
        'category_label' => 'string',
        'commission_fee' => 'float',
        'commission_taxes' => '\cbdesk\Mirakl\Model\OR11Response200OrdersOrderLinesCommissionTaxes[]',
        'created_date' => '\DateTime',
        'debited_date' => '\DateTime',
        'description' => 'string',
        'eco_contributions' => '\cbdesk\Mirakl\Model\OR11Response200OrdersOrderLinesEcoContributions[]',
        'fees' => '\cbdesk\Mirakl\Model\OR11Response200OrdersOrderLinesFees[]',
        'last_updated_date' => '\DateTime',
        'measurement' => '\cbdesk\Mirakl\Model\OR11Response200OrdersOrderLinesMeasurement',
        'offer_id' => 'int',
        'offer_sku' => 'string',
        'offer_state_code' => 'string',
        'order_line_additional_fields' => '\cbdesk\Mirakl\Model\OR11Response200OrdersOrderLinesOrderLineAdditionalFields[]',
        'order_line_id' => 'string',
        'order_line_index' => 'int',
        'order_line_state' => 'string',
        'order_line_state_reason_code' => 'string',
        'order_line_state_reason_label' => 'string',
        'origin_unit_price' => 'float',
        'price' => 'float',
        'price_additional_info' => 'string',
        'price_amount_breakdown' => '\cbdesk\Mirakl\Model\OR11Response200OrdersOrderLinesPriceAmountBreakdown',
        'price_unit' => 'float',
        'product_medias' => '\cbdesk\Mirakl\Model\OR11Response200OrdersOrderLinesProductMedias[]',
        'product_shop_sku' => 'string',
        'product_sku' => 'string',
        'product_title' => 'string',
        'promotions' => '\cbdesk\Mirakl\Model\OR11Response200OrdersOrderLinesPromotions[]',
        'purchase_information' => '\cbdesk\Mirakl\Model\OR11Response200OrdersOrderLinesPurchaseInformation',
        'quantity' => 'int',
        'received_date' => '\DateTime',
        'refunds' => '\cbdesk\Mirakl\Model\OR11Response200OrdersOrderLinesRefunds[]',
        'shipped_date' => '\DateTime',
        'shipping_from' => '\cbdesk\Mirakl\Model\OR11Response200OrdersOrderLinesShippingFrom',
        'shipping_price' => 'float',
        'shipping_price_amount_breakdown' => '\cbdesk\Mirakl\Model\OR11Response200OrdersOrderLinesShippingPriceAmountBreakdown',
        'shipping_taxes' => '\cbdesk\Mirakl\Model\OR11Response200OrdersOrderLinesShippingTaxes[]',
        'tax_legal_notice' => 'string',
        'taxes' => '\cbdesk\Mirakl\Model\OR11Response200OrdersOrderLinesTaxes[]',
        'total_commission' => 'float',
        'total_price' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'can_refund' => null,
        'cancelations' => null,
        'category_code' => null,
        'category_label' => null,
        'commission_fee' => null,
        'commission_taxes' => null,
        'created_date' => 'date-time',
        'debited_date' => 'date-time',
        'description' => null,
        'eco_contributions' => null,
        'fees' => null,
        'last_updated_date' => 'date-time',
        'measurement' => null,
        'offer_id' => 'int64',
        'offer_sku' => null,
        'offer_state_code' => null,
        'order_line_additional_fields' => null,
        'order_line_id' => null,
        'order_line_index' => 'int32',
        'order_line_state' => null,
        'order_line_state_reason_code' => null,
        'order_line_state_reason_label' => null,
        'origin_unit_price' => null,
        'price' => null,
        'price_additional_info' => null,
        'price_amount_breakdown' => null,
        'price_unit' => null,
        'product_medias' => null,
        'product_shop_sku' => null,
        'product_sku' => null,
        'product_title' => null,
        'promotions' => null,
        'purchase_information' => null,
        'quantity' => 'int32',
        'received_date' => 'date-time',
        'refunds' => null,
        'shipped_date' => 'date-time',
        'shipping_from' => null,
        'shipping_price' => null,
        'shipping_price_amount_breakdown' => null,
        'shipping_taxes' => null,
        'tax_legal_notice' => null,
        'taxes' => null,
        'total_commission' => null,
        'total_price' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'can_refund' => false,
        'cancelations' => false,
        'category_code' => false,
        'category_label' => false,
        'commission_fee' => false,
        'commission_taxes' => false,
        'created_date' => false,
        'debited_date' => false,
        'description' => false,
        'eco_contributions' => false,
        'fees' => false,
        'last_updated_date' => false,
        'measurement' => false,
        'offer_id' => false,
        'offer_sku' => false,
        'offer_state_code' => false,
        'order_line_additional_fields' => false,
        'order_line_id' => false,
        'order_line_index' => false,
        'order_line_state' => false,
        'order_line_state_reason_code' => false,
        'order_line_state_reason_label' => false,
        'origin_unit_price' => false,
        'price' => false,
        'price_additional_info' => false,
        'price_amount_breakdown' => false,
        'price_unit' => false,
        'product_medias' => false,
        'product_shop_sku' => false,
        'product_sku' => false,
        'product_title' => false,
        'promotions' => false,
        'purchase_information' => false,
        'quantity' => false,
        'received_date' => false,
        'refunds' => false,
        'shipped_date' => false,
        'shipping_from' => false,
        'shipping_price' => false,
        'shipping_price_amount_breakdown' => false,
        'shipping_taxes' => false,
        'tax_legal_notice' => false,
        'taxes' => false,
        'total_commission' => false,
        'total_price' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'can_refund' => 'can_refund',
        'cancelations' => 'cancelations',
        'category_code' => 'category_code',
        'category_label' => 'category_label',
        'commission_fee' => 'commission_fee',
        'commission_taxes' => 'commission_taxes',
        'created_date' => 'created_date',
        'debited_date' => 'debited_date',
        'description' => 'description',
        'eco_contributions' => 'eco_contributions',
        'fees' => 'fees',
        'last_updated_date' => 'last_updated_date',
        'measurement' => 'measurement',
        'offer_id' => 'offer_id',
        'offer_sku' => 'offer_sku',
        'offer_state_code' => 'offer_state_code',
        'order_line_additional_fields' => 'order_line_additional_fields',
        'order_line_id' => 'order_line_id',
        'order_line_index' => 'order_line_index',
        'order_line_state' => 'order_line_state',
        'order_line_state_reason_code' => 'order_line_state_reason_code',
        'order_line_state_reason_label' => 'order_line_state_reason_label',
        'origin_unit_price' => 'origin_unit_price',
        'price' => 'price',
        'price_additional_info' => 'price_additional_info',
        'price_amount_breakdown' => 'price_amount_breakdown',
        'price_unit' => 'price_unit',
        'product_medias' => 'product_medias',
        'product_shop_sku' => 'product_shop_sku',
        'product_sku' => 'product_sku',
        'product_title' => 'product_title',
        'promotions' => 'promotions',
        'purchase_information' => 'purchase_information',
        'quantity' => 'quantity',
        'received_date' => 'received_date',
        'refunds' => 'refunds',
        'shipped_date' => 'shipped_date',
        'shipping_from' => 'shipping_from',
        'shipping_price' => 'shipping_price',
        'shipping_price_amount_breakdown' => 'shipping_price_amount_breakdown',
        'shipping_taxes' => 'shipping_taxes',
        'tax_legal_notice' => 'tax_legal_notice',
        'taxes' => 'taxes',
        'total_commission' => 'total_commission',
        'total_price' => 'total_price'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'can_refund' => 'setCanRefund',
        'cancelations' => 'setCancelations',
        'category_code' => 'setCategoryCode',
        'category_label' => 'setCategoryLabel',
        'commission_fee' => 'setCommissionFee',
        'commission_taxes' => 'setCommissionTaxes',
        'created_date' => 'setCreatedDate',
        'debited_date' => 'setDebitedDate',
        'description' => 'setDescription',
        'eco_contributions' => 'setEcoContributions',
        'fees' => 'setFees',
        'last_updated_date' => 'setLastUpdatedDate',
        'measurement' => 'setMeasurement',
        'offer_id' => 'setOfferId',
        'offer_sku' => 'setOfferSku',
        'offer_state_code' => 'setOfferStateCode',
        'order_line_additional_fields' => 'setOrderLineAdditionalFields',
        'order_line_id' => 'setOrderLineId',
        'order_line_index' => 'setOrderLineIndex',
        'order_line_state' => 'setOrderLineState',
        'order_line_state_reason_code' => 'setOrderLineStateReasonCode',
        'order_line_state_reason_label' => 'setOrderLineStateReasonLabel',
        'origin_unit_price' => 'setOriginUnitPrice',
        'price' => 'setPrice',
        'price_additional_info' => 'setPriceAdditionalInfo',
        'price_amount_breakdown' => 'setPriceAmountBreakdown',
        'price_unit' => 'setPriceUnit',
        'product_medias' => 'setProductMedias',
        'product_shop_sku' => 'setProductShopSku',
        'product_sku' => 'setProductSku',
        'product_title' => 'setProductTitle',
        'promotions' => 'setPromotions',
        'purchase_information' => 'setPurchaseInformation',
        'quantity' => 'setQuantity',
        'received_date' => 'setReceivedDate',
        'refunds' => 'setRefunds',
        'shipped_date' => 'setShippedDate',
        'shipping_from' => 'setShippingFrom',
        'shipping_price' => 'setShippingPrice',
        'shipping_price_amount_breakdown' => 'setShippingPriceAmountBreakdown',
        'shipping_taxes' => 'setShippingTaxes',
        'tax_legal_notice' => 'setTaxLegalNotice',
        'taxes' => 'setTaxes',
        'total_commission' => 'setTotalCommission',
        'total_price' => 'setTotalPrice'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'can_refund' => 'getCanRefund',
        'cancelations' => 'getCancelations',
        'category_code' => 'getCategoryCode',
        'category_label' => 'getCategoryLabel',
        'commission_fee' => 'getCommissionFee',
        'commission_taxes' => 'getCommissionTaxes',
        'created_date' => 'getCreatedDate',
        'debited_date' => 'getDebitedDate',
        'description' => 'getDescription',
        'eco_contributions' => 'getEcoContributions',
        'fees' => 'getFees',
        'last_updated_date' => 'getLastUpdatedDate',
        'measurement' => 'getMeasurement',
        'offer_id' => 'getOfferId',
        'offer_sku' => 'getOfferSku',
        'offer_state_code' => 'getOfferStateCode',
        'order_line_additional_fields' => 'getOrderLineAdditionalFields',
        'order_line_id' => 'getOrderLineId',
        'order_line_index' => 'getOrderLineIndex',
        'order_line_state' => 'getOrderLineState',
        'order_line_state_reason_code' => 'getOrderLineStateReasonCode',
        'order_line_state_reason_label' => 'getOrderLineStateReasonLabel',
        'origin_unit_price' => 'getOriginUnitPrice',
        'price' => 'getPrice',
        'price_additional_info' => 'getPriceAdditionalInfo',
        'price_amount_breakdown' => 'getPriceAmountBreakdown',
        'price_unit' => 'getPriceUnit',
        'product_medias' => 'getProductMedias',
        'product_shop_sku' => 'getProductShopSku',
        'product_sku' => 'getProductSku',
        'product_title' => 'getProductTitle',
        'promotions' => 'getPromotions',
        'purchase_information' => 'getPurchaseInformation',
        'quantity' => 'getQuantity',
        'received_date' => 'getReceivedDate',
        'refunds' => 'getRefunds',
        'shipped_date' => 'getShippedDate',
        'shipping_from' => 'getShippingFrom',
        'shipping_price' => 'getShippingPrice',
        'shipping_price_amount_breakdown' => 'getShippingPriceAmountBreakdown',
        'shipping_taxes' => 'getShippingTaxes',
        'tax_legal_notice' => 'getTaxLegalNotice',
        'taxes' => 'getTaxes',
        'total_commission' => 'getTotalCommission',
        'total_price' => 'getTotalPrice'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('can_refund', $data ?? [], null);
        $this->setIfExists('cancelations', $data ?? [], null);
        $this->setIfExists('category_code', $data ?? [], null);
        $this->setIfExists('category_label', $data ?? [], null);
        $this->setIfExists('commission_fee', $data ?? [], null);
        $this->setIfExists('commission_taxes', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('debited_date', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('eco_contributions', $data ?? [], null);
        $this->setIfExists('fees', $data ?? [], null);
        $this->setIfExists('last_updated_date', $data ?? [], null);
        $this->setIfExists('measurement', $data ?? [], null);
        $this->setIfExists('offer_id', $data ?? [], null);
        $this->setIfExists('offer_sku', $data ?? [], null);
        $this->setIfExists('offer_state_code', $data ?? [], null);
        $this->setIfExists('order_line_additional_fields', $data ?? [], null);
        $this->setIfExists('order_line_id', $data ?? [], null);
        $this->setIfExists('order_line_index', $data ?? [], null);
        $this->setIfExists('order_line_state', $data ?? [], null);
        $this->setIfExists('order_line_state_reason_code', $data ?? [], null);
        $this->setIfExists('order_line_state_reason_label', $data ?? [], null);
        $this->setIfExists('origin_unit_price', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('price_additional_info', $data ?? [], null);
        $this->setIfExists('price_amount_breakdown', $data ?? [], null);
        $this->setIfExists('price_unit', $data ?? [], null);
        $this->setIfExists('product_medias', $data ?? [], null);
        $this->setIfExists('product_shop_sku', $data ?? [], null);
        $this->setIfExists('product_sku', $data ?? [], null);
        $this->setIfExists('product_title', $data ?? [], null);
        $this->setIfExists('promotions', $data ?? [], null);
        $this->setIfExists('purchase_information', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('received_date', $data ?? [], null);
        $this->setIfExists('refunds', $data ?? [], null);
        $this->setIfExists('shipped_date', $data ?? [], null);
        $this->setIfExists('shipping_from', $data ?? [], null);
        $this->setIfExists('shipping_price', $data ?? [], null);
        $this->setIfExists('shipping_price_amount_breakdown', $data ?? [], null);
        $this->setIfExists('shipping_taxes', $data ?? [], null);
        $this->setIfExists('tax_legal_notice', $data ?? [], null);
        $this->setIfExists('taxes', $data ?? [], null);
        $this->setIfExists('total_commission', $data ?? [], null);
        $this->setIfExists('total_price', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets can_refund
     *
     * @return bool|null
     */
    public function getCanRefund()
    {
        return $this->container['can_refund'];
    }

    /**
     * Sets can_refund
     *
     * @param bool|null $can_refund Indicate whether the order line full amount can be refunded
     *
     * @return self
     */
    public function setCanRefund($can_refund)
    {
        if (is_null($can_refund)) {
            throw new \InvalidArgumentException('non-nullable can_refund cannot be null');
        }
        $this->container['can_refund'] = $can_refund;

        return $this;
    }

    /**
     * Gets cancelations
     *
     * @return \cbdesk\Mirakl\Model\OR11Response200OrdersOrderLinesCancelations[]|null
     */
    public function getCancelations()
    {
        return $this->container['cancelations'];
    }

    /**
     * Sets cancelations
     *
     * @param \cbdesk\Mirakl\Model\OR11Response200OrdersOrderLinesCancelations[]|null $cancelations List of the cancellations
     *
     * @return self
     */
    public function setCancelations($cancelations)
    {
        if (is_null($cancelations)) {
            throw new \InvalidArgumentException('non-nullable cancelations cannot be null');
        }
        $this->container['cancelations'] = $cancelations;

        return $this;
    }

    /**
     * Gets category_code
     *
     * @return string|null
     */
    public function getCategoryCode()
    {
        return $this->container['category_code'];
    }

    /**
     * Sets category_code
     *
     * @param string|null $category_code Category code of the product associated with the order line
     *
     * @return self
     */
    public function setCategoryCode($category_code)
    {
        if (is_null($category_code)) {
            throw new \InvalidArgumentException('non-nullable category_code cannot be null');
        }
        $this->container['category_code'] = $category_code;

        return $this;
    }

    /**
     * Gets category_label
     *
     * @return string|null
     */
    public function getCategoryLabel()
    {
        return $this->container['category_label'];
    }

    /**
     * Sets category_label
     *
     * @param string|null $category_label Category label of the product associated with the order line
     *
     * @return self
     */
    public function setCategoryLabel($category_label)
    {
        if (is_null($category_label)) {
            throw new \InvalidArgumentException('non-nullable category_label cannot be null');
        }
        $this->container['category_label'] = $category_label;

        return $this;
    }

    /**
     * Gets commission_fee
     *
     * @return float|null
     */
    public function getCommissionFee()
    {
        return $this->container['commission_fee'];
    }

    /**
     * Sets commission_fee
     *
     * @param float|null $commission_fee Order line's commission fee
     *
     * @return self
     */
    public function setCommissionFee($commission_fee)
    {
        if (is_null($commission_fee)) {
            throw new \InvalidArgumentException('non-nullable commission_fee cannot be null');
        }
        $this->container['commission_fee'] = $commission_fee;

        return $this;
    }

    /**
     * Gets commission_taxes
     *
     * @return \cbdesk\Mirakl\Model\OR11Response200OrdersOrderLinesCommissionTaxes[]|null
     */
    public function getCommissionTaxes()
    {
        return $this->container['commission_taxes'];
    }

    /**
     * Sets commission_taxes
     *
     * @param \cbdesk\Mirakl\Model\OR11Response200OrdersOrderLinesCommissionTaxes[]|null $commission_taxes Commission taxes
     *
     * @return self
     */
    public function setCommissionTaxes($commission_taxes)
    {
        if (is_null($commission_taxes)) {
            throw new \InvalidArgumentException('non-nullable commission_taxes cannot be null');
        }
        $this->container['commission_taxes'] = $commission_taxes;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return \DateTime|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param \DateTime|null $created_date Order line's creation date
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets debited_date
     *
     * @return \DateTime|null
     */
    public function getDebitedDate()
    {
        return $this->container['debited_date'];
    }

    /**
     * Sets debited_date
     *
     * @param \DateTime|null $debited_date Order line's debited date
     *
     * @return self
     */
    public function setDebitedDate($debited_date)
    {
        if (is_null($debited_date)) {
            throw new \InvalidArgumentException('non-nullable debited_date cannot be null');
        }
        $this->container['debited_date'] = $debited_date;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Order line's description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets eco_contributions
     *
     * @return \cbdesk\Mirakl\Model\OR11Response200OrdersOrderLinesEcoContributions[]|null
     */
    public function getEcoContributions()
    {
        return $this->container['eco_contributions'];
    }

    /**
     * Sets eco_contributions
     *
     * @param \cbdesk\Mirakl\Model\OR11Response200OrdersOrderLinesEcoContributions[]|null $eco_contributions List of eco-contribution amounts and corresponding producer identifiers, if applicable<br/> Only available if the operator activates the circular economy information collection.
     *
     * @return self
     */
    public function setEcoContributions($eco_contributions)
    {
        if (is_null($eco_contributions)) {
            throw new \InvalidArgumentException('non-nullable eco_contributions cannot be null');
        }
        $this->container['eco_contributions'] = $eco_contributions;

        return $this;
    }

    /**
     * Gets fees
     *
     * @return \cbdesk\Mirakl\Model\OR11Response200OrdersOrderLinesFees[]|null
     */
    public function getFees()
    {
        return $this->container['fees'];
    }

    /**
     * Sets fees
     *
     * @param \cbdesk\Mirakl\Model\OR11Response200OrdersOrderLinesFees[]|null $fees List of fees applied on the order line
     *
     * @return self
     */
    public function setFees($fees)
    {
        if (is_null($fees)) {
            throw new \InvalidArgumentException('non-nullable fees cannot be null');
        }
        $this->container['fees'] = $fees;

        return $this;
    }

    /**
     * Gets last_updated_date
     *
     * @return \DateTime|null
     */
    public function getLastUpdatedDate()
    {
        return $this->container['last_updated_date'];
    }

    /**
     * Sets last_updated_date
     *
     * @param \DateTime|null $last_updated_date Order line's last updated date
     *
     * @return self
     */
    public function setLastUpdatedDate($last_updated_date)
    {
        if (is_null($last_updated_date)) {
            throw new \InvalidArgumentException('non-nullable last_updated_date cannot be null');
        }
        $this->container['last_updated_date'] = $last_updated_date;

        return $this;
    }

    /**
     * Gets measurement
     *
     * @return \cbdesk\Mirakl\Model\OR11Response200OrdersOrderLinesMeasurement|null
     */
    public function getMeasurement()
    {
        return $this->container['measurement'];
    }

    /**
     * Sets measurement
     *
     * @param \cbdesk\Mirakl\Model\OR11Response200OrdersOrderLinesMeasurement|null $measurement measurement
     *
     * @return self
     */
    public function setMeasurement($measurement)
    {
        if (is_null($measurement)) {
            throw new \InvalidArgumentException('non-nullable measurement cannot be null');
        }
        $this->container['measurement'] = $measurement;

        return $this;
    }

    /**
     * Gets offer_id
     *
     * @return int|null
     */
    public function getOfferId()
    {
        return $this->container['offer_id'];
    }

    /**
     * Sets offer_id
     *
     * @param int|null $offer_id Associated offer's id
     *
     * @return self
     */
    public function setOfferId($offer_id)
    {
        if (is_null($offer_id)) {
            throw new \InvalidArgumentException('non-nullable offer_id cannot be null');
        }
        $this->container['offer_id'] = $offer_id;

        return $this;
    }

    /**
     * Gets offer_sku
     *
     * @return string|null
     */
    public function getOfferSku()
    {
        return $this->container['offer_sku'];
    }

    /**
     * Sets offer_sku
     *
     * @param string|null $offer_sku Associated offer sku (this is the sku of the offer defined by the shop)
     *
     * @return self
     */
    public function setOfferSku($offer_sku)
    {
        if (is_null($offer_sku)) {
            throw new \InvalidArgumentException('non-nullable offer_sku cannot be null');
        }
        $this->container['offer_sku'] = $offer_sku;

        return $this;
    }

    /**
     * Gets offer_state_code
     *
     * @return string|null
     */
    public function getOfferStateCode()
    {
        return $this->container['offer_state_code'];
    }

    /**
     * Sets offer_state_code
     *
     * @param string|null $offer_state_code State of the offer associated with the order line
     *
     * @return self
     */
    public function setOfferStateCode($offer_state_code)
    {
        if (is_null($offer_state_code)) {
            throw new \InvalidArgumentException('non-nullable offer_state_code cannot be null');
        }
        $this->container['offer_state_code'] = $offer_state_code;

        return $this;
    }

    /**
     * Gets order_line_additional_fields
     *
     * @return \cbdesk\Mirakl\Model\OR11Response200OrdersOrderLinesOrderLineAdditionalFields[]|null
     */
    public function getOrderLineAdditionalFields()
    {
        return $this->container['order_line_additional_fields'];
    }

    /**
     * Sets order_line_additional_fields
     *
     * @param \cbdesk\Mirakl\Model\OR11Response200OrdersOrderLinesOrderLineAdditionalFields[]|null $order_line_additional_fields List of custom fields
     *
     * @return self
     */
    public function setOrderLineAdditionalFields($order_line_additional_fields)
    {
        if (is_null($order_line_additional_fields)) {
            throw new \InvalidArgumentException('non-nullable order_line_additional_fields cannot be null');
        }
        $this->container['order_line_additional_fields'] = $order_line_additional_fields;

        return $this;
    }

    /**
     * Gets order_line_id
     *
     * @return string|null
     */
    public function getOrderLineId()
    {
        return $this->container['order_line_id'];
    }

    /**
     * Sets order_line_id
     *
     * @param string|null $order_line_id Order line's identifier
     *
     * @return self
     */
    public function setOrderLineId($order_line_id)
    {
        if (is_null($order_line_id)) {
            throw new \InvalidArgumentException('non-nullable order_line_id cannot be null');
        }
        $this->container['order_line_id'] = $order_line_id;

        return $this;
    }

    /**
     * Gets order_line_index
     *
     * @return int|null
     */
    public function getOrderLineIndex()
    {
        return $this->container['order_line_index'];
    }

    /**
     * Sets order_line_index
     *
     * @param int|null $order_line_index Order line's index in the order
     *
     * @return self
     */
    public function setOrderLineIndex($order_line_index)
    {
        if (is_null($order_line_index)) {
            throw new \InvalidArgumentException('non-nullable order_line_index cannot be null');
        }
        $this->container['order_line_index'] = $order_line_index;

        return $this;
    }

    /**
     * Gets order_line_state
     *
     * @return string|null
     */
    public function getOrderLineState()
    {
        return $this->container['order_line_state'];
    }

    /**
     * Sets order_line_state
     *
     * @param string|null $order_line_state Order line's state
     *
     * @return self
     */
    public function setOrderLineState($order_line_state)
    {
        if (is_null($order_line_state)) {
            throw new \InvalidArgumentException('non-nullable order_line_state cannot be null');
        }
        $this->container['order_line_state'] = $order_line_state;

        return $this;
    }

    /**
     * Gets order_line_state_reason_code
     *
     * @return string|null
     */
    public function getOrderLineStateReasonCode()
    {
        return $this->container['order_line_state_reason_code'];
    }

    /**
     * Sets order_line_state_reason_code
     *
     * @param string|null $order_line_state_reason_code Reason's code of the order line's state
     *
     * @return self
     */
    public function setOrderLineStateReasonCode($order_line_state_reason_code)
    {
        if (is_null($order_line_state_reason_code)) {
            throw new \InvalidArgumentException('non-nullable order_line_state_reason_code cannot be null');
        }
        $this->container['order_line_state_reason_code'] = $order_line_state_reason_code;

        return $this;
    }

    /**
     * Gets order_line_state_reason_label
     *
     * @return string|null
     */
    public function getOrderLineStateReasonLabel()
    {
        return $this->container['order_line_state_reason_label'];
    }

    /**
     * Sets order_line_state_reason_label
     *
     * @param string|null $order_line_state_reason_label Reason's label of the order line's state
     *
     * @return self
     */
    public function setOrderLineStateReasonLabel($order_line_state_reason_label)
    {
        if (is_null($order_line_state_reason_label)) {
            throw new \InvalidArgumentException('non-nullable order_line_state_reason_label cannot be null');
        }
        $this->container['order_line_state_reason_label'] = $order_line_state_reason_label;

        return $this;
    }

    /**
     * Gets origin_unit_price
     *
     * @return float|null
     */
    public function getOriginUnitPrice()
    {
        return $this->container['origin_unit_price'];
    }

    /**
     * Sets origin_unit_price
     *
     * @param float|null $origin_unit_price The original unit price of the offer associated with the order line
     *
     * @return self
     */
    public function setOriginUnitPrice($origin_unit_price)
    {
        if (is_null($origin_unit_price)) {
            throw new \InvalidArgumentException('non-nullable origin_unit_price cannot be null');
        }
        $this->container['origin_unit_price'] = $origin_unit_price;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float|null $price Order line's price without shipping price
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            throw new \InvalidArgumentException('non-nullable price cannot be null');
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets price_additional_info
     *
     * @return string|null
     */
    public function getPriceAdditionalInfo()
    {
        return $this->container['price_additional_info'];
    }

    /**
     * Sets price_additional_info
     *
     * @param string|null $price_additional_info Price's additional information of the offer
     *
     * @return self
     */
    public function setPriceAdditionalInfo($price_additional_info)
    {
        if (is_null($price_additional_info)) {
            throw new \InvalidArgumentException('non-nullable price_additional_info cannot be null');
        }
        $this->container['price_additional_info'] = $price_additional_info;

        return $this;
    }

    /**
     * Gets price_amount_breakdown
     *
     * @return \cbdesk\Mirakl\Model\OR11Response200OrdersOrderLinesPriceAmountBreakdown|null
     */
    public function getPriceAmountBreakdown()
    {
        return $this->container['price_amount_breakdown'];
    }

    /**
     * Sets price_amount_breakdown
     *
     * @param \cbdesk\Mirakl\Model\OR11Response200OrdersOrderLinesPriceAmountBreakdown|null $price_amount_breakdown price_amount_breakdown
     *
     * @return self
     */
    public function setPriceAmountBreakdown($price_amount_breakdown)
    {
        if (is_null($price_amount_breakdown)) {
            throw new \InvalidArgumentException('non-nullable price_amount_breakdown cannot be null');
        }
        $this->container['price_amount_breakdown'] = $price_amount_breakdown;

        return $this;
    }

    /**
     * Gets price_unit
     *
     * @return float|null
     */
    public function getPriceUnit()
    {
        return $this->container['price_unit'];
    }

    /**
     * Sets price_unit
     *
     * @param float|null $price_unit Unit price for the offer associated with the order line
     *
     * @return self
     */
    public function setPriceUnit($price_unit)
    {
        if (is_null($price_unit)) {
            throw new \InvalidArgumentException('non-nullable price_unit cannot be null');
        }
        $this->container['price_unit'] = $price_unit;

        return $this;
    }

    /**
     * Gets product_medias
     *
     * @return \cbdesk\Mirakl\Model\OR11Response200OrdersOrderLinesProductMedias[]|null
     */
    public function getProductMedias()
    {
        return $this->container['product_medias'];
    }

    /**
     * Sets product_medias
     *
     * @param \cbdesk\Mirakl\Model\OR11Response200OrdersOrderLinesProductMedias[]|null $product_medias List of all product's media associated to the order line
     *
     * @return self
     */
    public function setProductMedias($product_medias)
    {
        if (is_null($product_medias)) {
            throw new \InvalidArgumentException('non-nullable product_medias cannot be null');
        }
        $this->container['product_medias'] = $product_medias;

        return $this;
    }

    /**
     * Gets product_shop_sku
     *
     * @return string|null
     */
    public function getProductShopSku()
    {
        return $this->container['product_shop_sku'];
    }

    /**
     * Sets product_shop_sku
     *
     * @param string|null $product_shop_sku Shop SKU of the product associated with the order line
     *
     * @return self
     */
    public function setProductShopSku($product_shop_sku)
    {
        if (is_null($product_shop_sku)) {
            throw new \InvalidArgumentException('non-nullable product_shop_sku cannot be null');
        }
        $this->container['product_shop_sku'] = $product_shop_sku;

        return $this;
    }

    /**
     * Gets product_sku
     *
     * @return string|null
     */
    public function getProductSku()
    {
        return $this->container['product_sku'];
    }

    /**
     * Sets product_sku
     *
     * @param string|null $product_sku SKU of the product associated with the order line
     *
     * @return self
     */
    public function setProductSku($product_sku)
    {
        if (is_null($product_sku)) {
            throw new \InvalidArgumentException('non-nullable product_sku cannot be null');
        }
        $this->container['product_sku'] = $product_sku;

        return $this;
    }

    /**
     * Gets product_title
     *
     * @return string|null
     */
    public function getProductTitle()
    {
        return $this->container['product_title'];
    }

    /**
     * Sets product_title
     *
     * @param string|null $product_title Title of the product associated with the order line
     *
     * @return self
     */
    public function setProductTitle($product_title)
    {
        if (is_null($product_title)) {
            throw new \InvalidArgumentException('non-nullable product_title cannot be null');
        }
        $this->container['product_title'] = $product_title;

        return $this;
    }

    /**
     * Gets promotions
     *
     * @return \cbdesk\Mirakl\Model\OR11Response200OrdersOrderLinesPromotions[]|null
     */
    public function getPromotions()
    {
        return $this->container['promotions'];
    }

    /**
     * Sets promotions
     *
     * @param \cbdesk\Mirakl\Model\OR11Response200OrdersOrderLinesPromotions[]|null $promotions List of promotions
     *
     * @return self
     */
    public function setPromotions($promotions)
    {
        if (is_null($promotions)) {
            throw new \InvalidArgumentException('non-nullable promotions cannot be null');
        }
        $this->container['promotions'] = $promotions;

        return $this;
    }

    /**
     * Gets purchase_information
     *
     * @return \cbdesk\Mirakl\Model\OR11Response200OrdersOrderLinesPurchaseInformation|null
     */
    public function getPurchaseInformation()
    {
        return $this->container['purchase_information'];
    }

    /**
     * Sets purchase_information
     *
     * @param \cbdesk\Mirakl\Model\OR11Response200OrdersOrderLinesPurchaseInformation|null $purchase_information purchase_information
     *
     * @return self
     */
    public function setPurchaseInformation($purchase_information)
    {
        if (is_null($purchase_information)) {
            throw new \InvalidArgumentException('non-nullable purchase_information cannot be null');
        }
        $this->container['purchase_information'] = $purchase_information;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int|null $quantity Product's quantity for the order line
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets received_date
     *
     * @return \DateTime|null
     */
    public function getReceivedDate()
    {
        return $this->container['received_date'];
    }

    /**
     * Sets received_date
     *
     * @param \DateTime|null $received_date Product's date of receipt
     *
     * @return self
     */
    public function setReceivedDate($received_date)
    {
        if (is_null($received_date)) {
            throw new \InvalidArgumentException('non-nullable received_date cannot be null');
        }
        $this->container['received_date'] = $received_date;

        return $this;
    }

    /**
     * Gets refunds
     *
     * @return \cbdesk\Mirakl\Model\OR11Response200OrdersOrderLinesRefunds[]|null
     */
    public function getRefunds()
    {
        return $this->container['refunds'];
    }

    /**
     * Sets refunds
     *
     * @param \cbdesk\Mirakl\Model\OR11Response200OrdersOrderLinesRefunds[]|null $refunds List of the refunds
     *
     * @return self
     */
    public function setRefunds($refunds)
    {
        if (is_null($refunds)) {
            throw new \InvalidArgumentException('non-nullable refunds cannot be null');
        }
        $this->container['refunds'] = $refunds;

        return $this;
    }

    /**
     * Gets shipped_date
     *
     * @return \DateTime|null
     */
    public function getShippedDate()
    {
        return $this->container['shipped_date'];
    }

    /**
     * Sets shipped_date
     *
     * @param \DateTime|null $shipped_date Order line's shipped date
     *
     * @return self
     */
    public function setShippedDate($shipped_date)
    {
        if (is_null($shipped_date)) {
            throw new \InvalidArgumentException('non-nullable shipped_date cannot be null');
        }
        $this->container['shipped_date'] = $shipped_date;

        return $this;
    }

    /**
     * Gets shipping_from
     *
     * @return \cbdesk\Mirakl\Model\OR11Response200OrdersOrderLinesShippingFrom|null
     */
    public function getShippingFrom()
    {
        return $this->container['shipping_from'];
    }

    /**
     * Sets shipping_from
     *
     * @param \cbdesk\Mirakl\Model\OR11Response200OrdersOrderLinesShippingFrom|null $shipping_from shipping_from
     *
     * @return self
     */
    public function setShippingFrom($shipping_from)
    {
        if (is_null($shipping_from)) {
            throw new \InvalidArgumentException('non-nullable shipping_from cannot be null');
        }
        $this->container['shipping_from'] = $shipping_from;

        return $this;
    }

    /**
     * Gets shipping_price
     *
     * @return float|null
     */
    public function getShippingPrice()
    {
        return $this->container['shipping_price'];
    }

    /**
     * Sets shipping_price
     *
     * @param float|null $shipping_price Total price of the order line's shipping price
     *
     * @return self
     */
    public function setShippingPrice($shipping_price)
    {
        if (is_null($shipping_price)) {
            throw new \InvalidArgumentException('non-nullable shipping_price cannot be null');
        }
        $this->container['shipping_price'] = $shipping_price;

        return $this;
    }

    /**
     * Gets shipping_price_amount_breakdown
     *
     * @return \cbdesk\Mirakl\Model\OR11Response200OrdersOrderLinesShippingPriceAmountBreakdown|null
     */
    public function getShippingPriceAmountBreakdown()
    {
        return $this->container['shipping_price_amount_breakdown'];
    }

    /**
     * Sets shipping_price_amount_breakdown
     *
     * @param \cbdesk\Mirakl\Model\OR11Response200OrdersOrderLinesShippingPriceAmountBreakdown|null $shipping_price_amount_breakdown shipping_price_amount_breakdown
     *
     * @return self
     */
    public function setShippingPriceAmountBreakdown($shipping_price_amount_breakdown)
    {
        if (is_null($shipping_price_amount_breakdown)) {
            throw new \InvalidArgumentException('non-nullable shipping_price_amount_breakdown cannot be null');
        }
        $this->container['shipping_price_amount_breakdown'] = $shipping_price_amount_breakdown;

        return $this;
    }

    /**
     * Gets shipping_taxes
     *
     * @return \cbdesk\Mirakl\Model\OR11Response200OrdersOrderLinesShippingTaxes[]|null
     */
    public function getShippingTaxes()
    {
        return $this->container['shipping_taxes'];
    }

    /**
     * Sets shipping_taxes
     *
     * @param \cbdesk\Mirakl\Model\OR11Response200OrdersOrderLinesShippingTaxes[]|null $shipping_taxes List of taxes applied on shipping charges
     *
     * @return self
     */
    public function setShippingTaxes($shipping_taxes)
    {
        if (is_null($shipping_taxes)) {
            throw new \InvalidArgumentException('non-nullable shipping_taxes cannot be null');
        }
        $this->container['shipping_taxes'] = $shipping_taxes;

        return $this;
    }

    /**
     * Gets tax_legal_notice
     *
     * @return string|null
     */
    public function getTaxLegalNotice()
    {
        return $this->container['tax_legal_notice'];
    }

    /**
     * Sets tax_legal_notice
     *
     * @param string|null $tax_legal_notice The legal notice applying to the order line’s taxes
     *
     * @return self
     */
    public function setTaxLegalNotice($tax_legal_notice)
    {
        if (is_null($tax_legal_notice)) {
            throw new \InvalidArgumentException('non-nullable tax_legal_notice cannot be null');
        }
        $this->container['tax_legal_notice'] = $tax_legal_notice;

        return $this;
    }

    /**
     * Gets taxes
     *
     * @return \cbdesk\Mirakl\Model\OR11Response200OrdersOrderLinesTaxes[]|null
     */
    public function getTaxes()
    {
        return $this->container['taxes'];
    }

    /**
     * Sets taxes
     *
     * @param \cbdesk\Mirakl\Model\OR11Response200OrdersOrderLinesTaxes[]|null $taxes List of taxes applied on product price
     *
     * @return self
     */
    public function setTaxes($taxes)
    {
        if (is_null($taxes)) {
            throw new \InvalidArgumentException('non-nullable taxes cannot be null');
        }
        $this->container['taxes'] = $taxes;

        return $this;
    }

    /**
     * Gets total_commission
     *
     * @return float|null
     */
    public function getTotalCommission()
    {
        return $this->container['total_commission'];
    }

    /**
     * Sets total_commission
     *
     * @param float|null $total_commission Order line's total commission (sum of the commission fee and the commission vat)
     *
     * @return self
     */
    public function setTotalCommission($total_commission)
    {
        if (is_null($total_commission)) {
            throw new \InvalidArgumentException('non-nullable total_commission cannot be null');
        }
        $this->container['total_commission'] = $total_commission;

        return $this;
    }

    /**
     * Gets total_price
     *
     * @return float|null
     */
    public function getTotalPrice()
    {
        return $this->container['total_price'];
    }

    /**
     * Sets total_price
     *
     * @param float|null $total_price Order line's price with shipping price and fees.
     *
     * @return self
     */
    public function setTotalPrice($total_price)
    {
        if (is_null($total_price)) {
            throw new \InvalidArgumentException('non-nullable total_price cannot be null');
        }
        $this->container['total_price'] = $total_price;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


