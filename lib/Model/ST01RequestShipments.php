<?php
/**
 * ST01RequestShipments
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  cbdesk\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mirakl Marketplace APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest-release
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace cbdesk\Mirakl\Model;

use \ArrayAccess;
use \cbdesk\Mirakl\ObjectSerializer;

/**
 * ST01RequestShipments Class Doc Comment
 *
 * @category Class
 * @description Shipments list
 * @package  cbdesk\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ST01RequestShipments implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ST01_Request_Shipments';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'invoice_reference' => 'string',
        'order_id' => 'string',
        'shipment_additional_information' => '\cbdesk\Mirakl\Model\ST01RequestShipmentsShipmentAdditionalInformation[]',
        'shipment_lines' => '\cbdesk\Mirakl\Model\ST01RequestShipmentsShipmentLines[]',
        'shipped' => 'bool',
        'shipping_from' => '\cbdesk\Mirakl\Model\ST01RequestShipmentsShippingFrom',
        'tracking' => '\cbdesk\Mirakl\Model\ST01RequestShipmentsTracking'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'invoice_reference' => null,
        'order_id' => null,
        'shipment_additional_information' => null,
        'shipment_lines' => null,
        'shipped' => null,
        'shipping_from' => null,
        'tracking' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'invoice_reference' => false,
        'order_id' => false,
        'shipment_additional_information' => false,
        'shipment_lines' => false,
        'shipped' => false,
        'shipping_from' => false,
        'tracking' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'invoice_reference' => 'invoice_reference',
        'order_id' => 'order_id',
        'shipment_additional_information' => 'shipment_additional_information',
        'shipment_lines' => 'shipment_lines',
        'shipped' => 'shipped',
        'shipping_from' => 'shipping_from',
        'tracking' => 'tracking'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'invoice_reference' => 'setInvoiceReference',
        'order_id' => 'setOrderId',
        'shipment_additional_information' => 'setShipmentAdditionalInformation',
        'shipment_lines' => 'setShipmentLines',
        'shipped' => 'setShipped',
        'shipping_from' => 'setShippingFrom',
        'tracking' => 'setTracking'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'invoice_reference' => 'getInvoiceReference',
        'order_id' => 'getOrderId',
        'shipment_additional_information' => 'getShipmentAdditionalInformation',
        'shipment_lines' => 'getShipmentLines',
        'shipped' => 'getShipped',
        'shipping_from' => 'getShippingFrom',
        'tracking' => 'getTracking'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('invoice_reference', $data ?? [], null);
        $this->setIfExists('order_id', $data ?? [], null);
        $this->setIfExists('shipment_additional_information', $data ?? [], null);
        $this->setIfExists('shipment_lines', $data ?? [], null);
        $this->setIfExists('shipped', $data ?? [], false);
        $this->setIfExists('shipping_from', $data ?? [], null);
        $this->setIfExists('tracking', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['invoice_reference']) && (mb_strlen($this->container['invoice_reference']) > 255)) {
            $invalidProperties[] = "invalid value for 'invoice_reference', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['invoice_reference']) && (mb_strlen($this->container['invoice_reference']) < 0)) {
            $invalidProperties[] = "invalid value for 'invoice_reference', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['invoice_reference']) && !preg_match("/[0-9a-zA-Z_-]*/", $this->container['invoice_reference'])) {
            $invalidProperties[] = "invalid value for 'invoice_reference', must be conform to the pattern /[0-9a-zA-Z_-]*/.";
        }

        if (!is_null($this->container['order_id']) && (mb_strlen($this->container['order_id']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'order_id', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['order_id']) && (mb_strlen($this->container['order_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'order_id', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['shipment_lines']) && (count($this->container['shipment_lines']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'shipment_lines', number of items must be less than or equal to 2147483647.";
        }

        if (!is_null($this->container['shipment_lines']) && (count($this->container['shipment_lines']) < 1)) {
            $invalidProperties[] = "invalid value for 'shipment_lines', number of items must be greater than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets invoice_reference
     *
     * @return string|null
     */
    public function getInvoiceReference()
    {
        return $this->container['invoice_reference'];
    }

    /**
     * Sets invoice_reference
     *
     * @param string|null $invoice_reference Shipment's invoice reference
     *
     * @return self
     */
    public function setInvoiceReference($invoice_reference)
    {
        if (is_null($invoice_reference)) {
            throw new \InvalidArgumentException('non-nullable invoice_reference cannot be null');
        }
        if ((mb_strlen($invoice_reference) > 255)) {
            throw new \InvalidArgumentException('invalid length for $invoice_reference when calling ST01RequestShipments., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($invoice_reference) < 0)) {
            throw new \InvalidArgumentException('invalid length for $invoice_reference when calling ST01RequestShipments., must be bigger than or equal to 0.');
        }
        if ((!preg_match("/[0-9a-zA-Z_-]*/", ObjectSerializer::toString($invoice_reference)))) {
            throw new \InvalidArgumentException("invalid value for \$invoice_reference when calling ST01RequestShipments., must conform to the pattern /[0-9a-zA-Z_-]*/.");
        }

        $this->container['invoice_reference'] = $invoice_reference;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return string|null
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param string|null $order_id Order identifier
     *
     * @return self
     */
    public function setOrderId($order_id)
    {
        if (is_null($order_id)) {
            throw new \InvalidArgumentException('non-nullable order_id cannot be null');
        }
        if ((mb_strlen($order_id) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $order_id when calling ST01RequestShipments., must be smaller than or equal to 2147483647.');
        }
        if ((mb_strlen($order_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $order_id when calling ST01RequestShipments., must be bigger than or equal to 1.');
        }

        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets shipment_additional_information
     *
     * @return \cbdesk\Mirakl\Model\ST01RequestShipmentsShipmentAdditionalInformation[]|null
     */
    public function getShipmentAdditionalInformation()
    {
        return $this->container['shipment_additional_information'];
    }

    /**
     * Sets shipment_additional_information
     *
     * @param \cbdesk\Mirakl\Model\ST01RequestShipmentsShipmentAdditionalInformation[]|null $shipment_additional_information Shipment's additional information
     *
     * @return self
     */
    public function setShipmentAdditionalInformation($shipment_additional_information)
    {
        if (is_null($shipment_additional_information)) {
            throw new \InvalidArgumentException('non-nullable shipment_additional_information cannot be null');
        }
        $this->container['shipment_additional_information'] = $shipment_additional_information;

        return $this;
    }

    /**
     * Gets shipment_lines
     *
     * @return \cbdesk\Mirakl\Model\ST01RequestShipmentsShipmentLines[]|null
     */
    public function getShipmentLines()
    {
        return $this->container['shipment_lines'];
    }

    /**
     * Sets shipment_lines
     *
     * @param \cbdesk\Mirakl\Model\ST01RequestShipmentsShipmentLines[]|null $shipment_lines Shipment lines
     *
     * @return self
     */
    public function setShipmentLines($shipment_lines)
    {
        if (is_null($shipment_lines)) {
            throw new \InvalidArgumentException('non-nullable shipment_lines cannot be null');
        }

        if ((count($shipment_lines) > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $shipment_lines when calling ST01RequestShipments., number of items must be less than or equal to 2147483647.');
        }
        if ((count($shipment_lines) < 1)) {
            throw new \InvalidArgumentException('invalid length for $shipment_lines when calling ST01RequestShipments., number of items must be greater than or equal to 1.');
        }
        $this->container['shipment_lines'] = $shipment_lines;

        return $this;
    }

    /**
     * Gets shipped
     *
     * @return bool|null
     */
    public function getShipped()
    {
        return $this->container['shipped'];
    }

    /**
     * Sets shipped
     *
     * @param bool|null $shipped If true, the shipment is shipped after its creation
     *
     * @return self
     */
    public function setShipped($shipped)
    {
        if (is_null($shipped)) {
            throw new \InvalidArgumentException('non-nullable shipped cannot be null');
        }
        $this->container['shipped'] = $shipped;

        return $this;
    }

    /**
     * Gets shipping_from
     *
     * @return \cbdesk\Mirakl\Model\ST01RequestShipmentsShippingFrom|null
     */
    public function getShippingFrom()
    {
        return $this->container['shipping_from'];
    }

    /**
     * Sets shipping_from
     *
     * @param \cbdesk\Mirakl\Model\ST01RequestShipmentsShippingFrom|null $shipping_from shipping_from
     *
     * @return self
     */
    public function setShippingFrom($shipping_from)
    {
        if (is_null($shipping_from)) {
            throw new \InvalidArgumentException('non-nullable shipping_from cannot be null');
        }
        $this->container['shipping_from'] = $shipping_from;

        return $this;
    }

    /**
     * Gets tracking
     *
     * @return \cbdesk\Mirakl\Model\ST01RequestShipmentsTracking|null
     */
    public function getTracking()
    {
        return $this->container['tracking'];
    }

    /**
     * Sets tracking
     *
     * @param \cbdesk\Mirakl\Model\ST01RequestShipmentsTracking|null $tracking tracking
     *
     * @return self
     */
    public function setTracking($tracking)
    {
        if (is_null($tracking)) {
            throw new \InvalidArgumentException('non-nullable tracking cannot be null');
        }
        $this->container['tracking'] = $tracking;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


