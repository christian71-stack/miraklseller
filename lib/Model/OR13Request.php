<?php
/**
 * OR13Request
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  cbdesk\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mirakl Marketplace APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest-release
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace cbdesk\Mirakl\Model;

use \ArrayAccess;
use \cbdesk\Mirakl\ObjectSerializer;

/**
 * OR13Request Class Doc Comment
 *
 * @category Class
 * @package  cbdesk\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OR13Request implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OR13_Request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'channel_codes' => 'string[]',
        'end_date' => '\DateTime',
        'end_update_date' => '\DateTime',
        'fulfillment_center_codes' => 'string',
        'items_per_chunk' => 'int',
        'megabytes_per_chunk' => 'int',
        'only_null_channel' => 'bool',
        'order_state_codes' => 'string[]',
        'order_tax_mode' => 'string',
        'start_date' => '\DateTime',
        'start_update_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'channel_codes' => null,
        'end_date' => 'date-time',
        'end_update_date' => 'date-time',
        'fulfillment_center_codes' => null,
        'items_per_chunk' => 'int64',
        'megabytes_per_chunk' => 'int64',
        'only_null_channel' => null,
        'order_state_codes' => null,
        'order_tax_mode' => null,
        'start_date' => 'date-time',
        'start_update_date' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'channel_codes' => false,
        'end_date' => false,
        'end_update_date' => false,
        'fulfillment_center_codes' => false,
        'items_per_chunk' => false,
        'megabytes_per_chunk' => false,
        'only_null_channel' => false,
        'order_state_codes' => false,
        'order_tax_mode' => false,
        'start_date' => false,
        'start_update_date' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'channel_codes' => 'channel_codes',
        'end_date' => 'end_date',
        'end_update_date' => 'end_update_date',
        'fulfillment_center_codes' => 'fulfillment_center_codes',
        'items_per_chunk' => 'items_per_chunk',
        'megabytes_per_chunk' => 'megabytes_per_chunk',
        'only_null_channel' => 'only_null_channel',
        'order_state_codes' => 'order_state_codes',
        'order_tax_mode' => 'order_tax_mode',
        'start_date' => 'start_date',
        'start_update_date' => 'start_update_date'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'channel_codes' => 'setChannelCodes',
        'end_date' => 'setEndDate',
        'end_update_date' => 'setEndUpdateDate',
        'fulfillment_center_codes' => 'setFulfillmentCenterCodes',
        'items_per_chunk' => 'setItemsPerChunk',
        'megabytes_per_chunk' => 'setMegabytesPerChunk',
        'only_null_channel' => 'setOnlyNullChannel',
        'order_state_codes' => 'setOrderStateCodes',
        'order_tax_mode' => 'setOrderTaxMode',
        'start_date' => 'setStartDate',
        'start_update_date' => 'setStartUpdateDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'channel_codes' => 'getChannelCodes',
        'end_date' => 'getEndDate',
        'end_update_date' => 'getEndUpdateDate',
        'fulfillment_center_codes' => 'getFulfillmentCenterCodes',
        'items_per_chunk' => 'getItemsPerChunk',
        'megabytes_per_chunk' => 'getMegabytesPerChunk',
        'only_null_channel' => 'getOnlyNullChannel',
        'order_state_codes' => 'getOrderStateCodes',
        'order_tax_mode' => 'getOrderTaxMode',
        'start_date' => 'getStartDate',
        'start_update_date' => 'getStartUpdateDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('channel_codes', $data ?? [], null);
        $this->setIfExists('end_date', $data ?? [], null);
        $this->setIfExists('end_update_date', $data ?? [], null);
        $this->setIfExists('fulfillment_center_codes', $data ?? [], null);
        $this->setIfExists('items_per_chunk', $data ?? [], 1000000);
        $this->setIfExists('megabytes_per_chunk', $data ?? [], 512);
        $this->setIfExists('only_null_channel', $data ?? [], false);
        $this->setIfExists('order_state_codes', $data ?? [], null);
        $this->setIfExists('order_tax_mode', $data ?? [], null);
        $this->setIfExists('start_date', $data ?? [], null);
        $this->setIfExists('start_update_date', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['channel_codes']) && (count($this->container['channel_codes']) > 100)) {
            $invalidProperties[] = "invalid value for 'channel_codes', number of items must be less than or equal to 100.";
        }

        if (!is_null($this->container['channel_codes']) && (count($this->container['channel_codes']) < 0)) {
            $invalidProperties[] = "invalid value for 'channel_codes', number of items must be greater than or equal to 0.";
        }

        if (!is_null($this->container['fulfillment_center_codes']) && (mb_strlen($this->container['fulfillment_center_codes']) > 100)) {
            $invalidProperties[] = "invalid value for 'fulfillment_center_codes', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['fulfillment_center_codes']) && (mb_strlen($this->container['fulfillment_center_codes']) < 0)) {
            $invalidProperties[] = "invalid value for 'fulfillment_center_codes', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['items_per_chunk']) && ($this->container['items_per_chunk'] > 1000000)) {
            $invalidProperties[] = "invalid value for 'items_per_chunk', must be smaller than or equal to 1000000.";
        }

        if (!is_null($this->container['items_per_chunk']) && ($this->container['items_per_chunk'] < 10000)) {
            $invalidProperties[] = "invalid value for 'items_per_chunk', must be bigger than or equal to 10000.";
        }

        if (!is_null($this->container['megabytes_per_chunk']) && ($this->container['megabytes_per_chunk'] > 1024)) {
            $invalidProperties[] = "invalid value for 'megabytes_per_chunk', must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['megabytes_per_chunk']) && ($this->container['megabytes_per_chunk'] < 10)) {
            $invalidProperties[] = "invalid value for 'megabytes_per_chunk', must be bigger than or equal to 10.";
        }

        if (!is_null($this->container['order_state_codes']) && (count($this->container['order_state_codes']) > 100)) {
            $invalidProperties[] = "invalid value for 'order_state_codes', number of items must be less than or equal to 100.";
        }

        if (!is_null($this->container['order_state_codes']) && (count($this->container['order_state_codes']) < 0)) {
            $invalidProperties[] = "invalid value for 'order_state_codes', number of items must be greater than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets channel_codes
     *
     * @return string[]|null
     */
    public function getChannelCodes()
    {
        return $this->container['channel_codes'];
    }

    /**
     * Sets channel_codes
     *
     * @param string[]|null $channel_codes A list of channel codes
     *
     * @return self
     */
    public function setChannelCodes($channel_codes)
    {
        if (is_null($channel_codes)) {
            throw new \InvalidArgumentException('non-nullable channel_codes cannot be null');
        }

        if ((count($channel_codes) > 100)) {
            throw new \InvalidArgumentException('invalid value for $channel_codes when calling OR13Request., number of items must be less than or equal to 100.');
        }
        if ((count($channel_codes) < 0)) {
            throw new \InvalidArgumentException('invalid length for $channel_codes when calling OR13Request., number of items must be greater than or equal to 0.');
        }
        $this->container['channel_codes'] = $channel_codes;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime|null
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime|null $end_date End order creation date for filtering. Must be used with <code>start_date</code>.
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        if (is_null($end_date)) {
            throw new \InvalidArgumentException('non-nullable end_date cannot be null');
        }
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets end_update_date
     *
     * @return \DateTime|null
     */
    public function getEndUpdateDate()
    {
        return $this->container['end_update_date'];
    }

    /**
     * Sets end_update_date
     *
     * @param \DateTime|null $end_update_date End order update date for filtering. Must be used with <code>start_update_date</code>.
     *
     * @return self
     */
    public function setEndUpdateDate($end_update_date)
    {
        if (is_null($end_update_date)) {
            throw new \InvalidArgumentException('non-nullable end_update_date cannot be null');
        }
        $this->container['end_update_date'] = $end_update_date;

        return $this;
    }

    /**
     * Gets fulfillment_center_codes
     *
     * @return string|null
     */
    public function getFulfillmentCenterCodes()
    {
        return $this->container['fulfillment_center_codes'];
    }

    /**
     * Sets fulfillment_center_codes
     *
     * @param string|null $fulfillment_center_codes Code of the fulfillment center
     *
     * @return self
     */
    public function setFulfillmentCenterCodes($fulfillment_center_codes)
    {
        if (is_null($fulfillment_center_codes)) {
            throw new \InvalidArgumentException('non-nullable fulfillment_center_codes cannot be null');
        }
        if ((mb_strlen($fulfillment_center_codes) > 100)) {
            throw new \InvalidArgumentException('invalid length for $fulfillment_center_codes when calling OR13Request., must be smaller than or equal to 100.');
        }
        if ((mb_strlen($fulfillment_center_codes) < 0)) {
            throw new \InvalidArgumentException('invalid length for $fulfillment_center_codes when calling OR13Request., must be bigger than or equal to 0.');
        }

        $this->container['fulfillment_center_codes'] = $fulfillment_center_codes;

        return $this;
    }

    /**
     * Gets items_per_chunk
     *
     * @return int|null
     */
    public function getItemsPerChunk()
    {
        return $this->container['items_per_chunk'];
    }

    /**
     * Sets items_per_chunk
     *
     * @param int|null $items_per_chunk Maximum number of items included in the generated files
     *
     * @return self
     */
    public function setItemsPerChunk($items_per_chunk)
    {
        if (is_null($items_per_chunk)) {
            throw new \InvalidArgumentException('non-nullable items_per_chunk cannot be null');
        }

        if (($items_per_chunk > 1000000)) {
            throw new \InvalidArgumentException('invalid value for $items_per_chunk when calling OR13Request., must be smaller than or equal to 1000000.');
        }
        if (($items_per_chunk < 10000)) {
            throw new \InvalidArgumentException('invalid value for $items_per_chunk when calling OR13Request., must be bigger than or equal to 10000.');
        }

        $this->container['items_per_chunk'] = $items_per_chunk;

        return $this;
    }

    /**
     * Gets megabytes_per_chunk
     *
     * @return int|null
     */
    public function getMegabytesPerChunk()
    {
        return $this->container['megabytes_per_chunk'];
    }

    /**
     * Sets megabytes_per_chunk
     *
     * @param int|null $megabytes_per_chunk Maximum mega bytes weight for generated files
     *
     * @return self
     */
    public function setMegabytesPerChunk($megabytes_per_chunk)
    {
        if (is_null($megabytes_per_chunk)) {
            throw new \InvalidArgumentException('non-nullable megabytes_per_chunk cannot be null');
        }

        if (($megabytes_per_chunk > 1024)) {
            throw new \InvalidArgumentException('invalid value for $megabytes_per_chunk when calling OR13Request., must be smaller than or equal to 1024.');
        }
        if (($megabytes_per_chunk < 10)) {
            throw new \InvalidArgumentException('invalid value for $megabytes_per_chunk when calling OR13Request., must be bigger than or equal to 10.');
        }

        $this->container['megabytes_per_chunk'] = $megabytes_per_chunk;

        return $this;
    }

    /**
     * Gets only_null_channel
     *
     * @return bool|null
     */
    public function getOnlyNullChannel()
    {
        return $this->container['only_null_channel'];
    }

    /**
     * Sets only_null_channel
     *
     * @param bool|null $only_null_channel Return only orders without channel. If <code>true</code>, ignore the <code>channel_codes</code>
     *
     * @return self
     */
    public function setOnlyNullChannel($only_null_channel)
    {
        if (is_null($only_null_channel)) {
            throw new \InvalidArgumentException('non-nullable only_null_channel cannot be null');
        }
        $this->container['only_null_channel'] = $only_null_channel;

        return $this;
    }

    /**
     * Gets order_state_codes
     *
     * @return string[]|null
     */
    public function getOrderStateCodes()
    {
        return $this->container['order_state_codes'];
    }

    /**
     * Sets order_state_codes
     *
     * @param string[]|null $order_state_codes A list of order state's codes
     *
     * @return self
     */
    public function setOrderStateCodes($order_state_codes)
    {
        if (is_null($order_state_codes)) {
            throw new \InvalidArgumentException('non-nullable order_state_codes cannot be null');
        }

        if ((count($order_state_codes) > 100)) {
            throw new \InvalidArgumentException('invalid value for $order_state_codes when calling OR13Request., number of items must be less than or equal to 100.');
        }
        if ((count($order_state_codes) < 0)) {
            throw new \InvalidArgumentException('invalid length for $order_state_codes when calling OR13Request., number of items must be greater than or equal to 0.');
        }
        $this->container['order_state_codes'] = $order_state_codes;

        return $this;
    }

    /**
     * Gets order_tax_mode
     *
     * @return string|null
     */
    public function getOrderTaxMode()
    {
        return $this->container['order_tax_mode'];
    }

    /**
     * Sets order_tax_mode
     *
     * @param string|null $order_tax_mode Please note: If the taxes are not specified, the prices with mode TAX_EXCLUDED and with mode TAX_INCLUDED will return the same amounts.<br>Possible values:<ul><li><code>TAX_EXCLUDED</code>: the price fields (price, unit price, shipping price, cancellation amount, refund amount and order total prices) do not include taxes.</li><li><code>TAX_INCLUDED</code>: the price fields include the tax amount. </li></ul><li>If this query parameter is not specified, the default order tax mode of the platform is used.</li>
     *
     * @return self
     */
    public function setOrderTaxMode($order_tax_mode)
    {
        if (is_null($order_tax_mode)) {
            throw new \InvalidArgumentException('non-nullable order_tax_mode cannot be null');
        }
        $this->container['order_tax_mode'] = $order_tax_mode;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime|null $start_date Start order creation date for filtering. Must be used with <code>end_date</code>.
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        if (is_null($start_date)) {
            throw new \InvalidArgumentException('non-nullable start_date cannot be null');
        }
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets start_update_date
     *
     * @return \DateTime|null
     */
    public function getStartUpdateDate()
    {
        return $this->container['start_update_date'];
    }

    /**
     * Sets start_update_date
     *
     * @param \DateTime|null $start_update_date Start order update date for filtering. Mirakl will subtract a time delta to ensure no orders are missed due to network and/or software latency. Must be used with <code>end_update_date</code>.
     *
     * @return self
     */
    public function setStartUpdateDate($start_update_date)
    {
        if (is_null($start_update_date)) {
            throw new \InvalidArgumentException('non-nullable start_update_date cannot be null');
        }
        $this->container['start_update_date'] = $start_update_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


