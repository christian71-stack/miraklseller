<?php
/**
 * A02RequestPaymentInfoSg
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  cbdesk\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mirakl Marketplace APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest-release
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace cbdesk\Mirakl\Model;

use \ArrayAccess;
use \cbdesk\Mirakl\ObjectSerializer;

/**
 * A02RequestPaymentInfoSg Class Doc Comment
 *
 * @category Class
 * @package  cbdesk\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class A02RequestPaymentInfoSg implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'A02_Request_PaymentInfo_Sg';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'bank_account_number' => 'string',
        'bank_city' => 'string',
        'bank_key' => 'string',
        'bank_name' => 'string',
        'bank_street' => 'string',
        'bank_zip' => 'string',
        'owner' => 'string',
        'swift_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'bank_account_number' => null,
        'bank_city' => null,
        'bank_key' => null,
        'bank_name' => null,
        'bank_street' => null,
        'bank_zip' => null,
        'owner' => null,
        'swift_code' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'bank_account_number' => false,
        'bank_city' => false,
        'bank_key' => false,
        'bank_name' => false,
        'bank_street' => false,
        'bank_zip' => false,
        'owner' => false,
        'swift_code' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bank_account_number' => 'bank_account_number',
        'bank_city' => 'bank_city',
        'bank_key' => 'bank_key',
        'bank_name' => 'bank_name',
        'bank_street' => 'bank_street',
        'bank_zip' => 'bank_zip',
        'owner' => 'owner',
        'swift_code' => 'swift_code'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bank_account_number' => 'setBankAccountNumber',
        'bank_city' => 'setBankCity',
        'bank_key' => 'setBankKey',
        'bank_name' => 'setBankName',
        'bank_street' => 'setBankStreet',
        'bank_zip' => 'setBankZip',
        'owner' => 'setOwner',
        'swift_code' => 'setSwiftCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bank_account_number' => 'getBankAccountNumber',
        'bank_city' => 'getBankCity',
        'bank_key' => 'getBankKey',
        'bank_name' => 'getBankName',
        'bank_street' => 'getBankStreet',
        'bank_zip' => 'getBankZip',
        'owner' => 'getOwner',
        'swift_code' => 'getSwiftCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('bank_account_number', $data ?? [], null);
        $this->setIfExists('bank_city', $data ?? [], null);
        $this->setIfExists('bank_key', $data ?? [], null);
        $this->setIfExists('bank_name', $data ?? [], null);
        $this->setIfExists('bank_street', $data ?? [], null);
        $this->setIfExists('bank_zip', $data ?? [], null);
        $this->setIfExists('owner', $data ?? [], null);
        $this->setIfExists('swift_code', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['bank_account_number']) && (mb_strlen($this->container['bank_account_number']) > 12)) {
            $invalidProperties[] = "invalid value for 'bank_account_number', the character length must be smaller than or equal to 12.";
        }

        if (!is_null($this->container['bank_account_number']) && (mb_strlen($this->container['bank_account_number']) < 9)) {
            $invalidProperties[] = "invalid value for 'bank_account_number', the character length must be bigger than or equal to 9.";
        }

        if (!is_null($this->container['bank_account_number']) && !preg_match("/[0-9]+/", $this->container['bank_account_number'])) {
            $invalidProperties[] = "invalid value for 'bank_account_number', must be conform to the pattern /[0-9]+/.";
        }

        if (!is_null($this->container['bank_city']) && (mb_strlen($this->container['bank_city']) > 100)) {
            $invalidProperties[] = "invalid value for 'bank_city', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['bank_city']) && (mb_strlen($this->container['bank_city']) < 3)) {
            $invalidProperties[] = "invalid value for 'bank_city', the character length must be bigger than or equal to 3.";
        }

        if (!is_null($this->container['bank_key']) && !preg_match("/[0-9]+/", $this->container['bank_key'])) {
            $invalidProperties[] = "invalid value for 'bank_key', must be conform to the pattern /[0-9]+/.";
        }

        if (!is_null($this->container['bank_name']) && (mb_strlen($this->container['bank_name']) > 255)) {
            $invalidProperties[] = "invalid value for 'bank_name', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['bank_name']) && (mb_strlen($this->container['bank_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'bank_name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['bank_street']) && (mb_strlen($this->container['bank_street']) > 100)) {
            $invalidProperties[] = "invalid value for 'bank_street', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['bank_street']) && (mb_strlen($this->container['bank_street']) < 3)) {
            $invalidProperties[] = "invalid value for 'bank_street', the character length must be bigger than or equal to 3.";
        }

        if (!is_null($this->container['bank_zip']) && (mb_strlen($this->container['bank_zip']) > 255)) {
            $invalidProperties[] = "invalid value for 'bank_zip', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['bank_zip']) && (mb_strlen($this->container['bank_zip']) < 0)) {
            $invalidProperties[] = "invalid value for 'bank_zip', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['owner']) && (mb_strlen($this->container['owner']) > 100)) {
            $invalidProperties[] = "invalid value for 'owner', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['owner']) && (mb_strlen($this->container['owner']) < 3)) {
            $invalidProperties[] = "invalid value for 'owner', the character length must be bigger than or equal to 3.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bank_account_number
     *
     * @return string|null
     */
    public function getBankAccountNumber()
    {
        return $this->container['bank_account_number'];
    }

    /**
     * Sets bank_account_number
     *
     * @param string|null $bank_account_number Bank Account Number
     *
     * @return self
     */
    public function setBankAccountNumber($bank_account_number)
    {
        if (is_null($bank_account_number)) {
            throw new \InvalidArgumentException('non-nullable bank_account_number cannot be null');
        }
        if ((mb_strlen($bank_account_number) > 12)) {
            throw new \InvalidArgumentException('invalid length for $bank_account_number when calling A02RequestPaymentInfoSg., must be smaller than or equal to 12.');
        }
        if ((mb_strlen($bank_account_number) < 9)) {
            throw new \InvalidArgumentException('invalid length for $bank_account_number when calling A02RequestPaymentInfoSg., must be bigger than or equal to 9.');
        }
        if ((!preg_match("/[0-9]+/", ObjectSerializer::toString($bank_account_number)))) {
            throw new \InvalidArgumentException("invalid value for \$bank_account_number when calling A02RequestPaymentInfoSg., must conform to the pattern /[0-9]+/.");
        }

        $this->container['bank_account_number'] = $bank_account_number;

        return $this;
    }

    /**
     * Gets bank_city
     *
     * @return string|null
     */
    public function getBankCity()
    {
        return $this->container['bank_city'];
    }

    /**
     * Sets bank_city
     *
     * @param string|null $bank_city Bank city
     *
     * @return self
     */
    public function setBankCity($bank_city)
    {
        if (is_null($bank_city)) {
            throw new \InvalidArgumentException('non-nullable bank_city cannot be null');
        }
        if ((mb_strlen($bank_city) > 100)) {
            throw new \InvalidArgumentException('invalid length for $bank_city when calling A02RequestPaymentInfoSg., must be smaller than or equal to 100.');
        }
        if ((mb_strlen($bank_city) < 3)) {
            throw new \InvalidArgumentException('invalid length for $bank_city when calling A02RequestPaymentInfoSg., must be bigger than or equal to 3.');
        }

        $this->container['bank_city'] = $bank_city;

        return $this;
    }

    /**
     * Gets bank_key
     *
     * @return string|null
     */
    public function getBankKey()
    {
        return $this->container['bank_key'];
    }

    /**
     * Sets bank_key
     *
     * @param string|null $bank_key Bank Key
     *
     * @return self
     */
    public function setBankKey($bank_key)
    {
        if (is_null($bank_key)) {
            throw new \InvalidArgumentException('non-nullable bank_key cannot be null');
        }

        if ((!preg_match("/[0-9]+/", ObjectSerializer::toString($bank_key)))) {
            throw new \InvalidArgumentException("invalid value for \$bank_key when calling A02RequestPaymentInfoSg., must conform to the pattern /[0-9]+/.");
        }

        $this->container['bank_key'] = $bank_key;

        return $this;
    }

    /**
     * Gets bank_name
     *
     * @return string|null
     */
    public function getBankName()
    {
        return $this->container['bank_name'];
    }

    /**
     * Sets bank_name
     *
     * @param string|null $bank_name Bank name
     *
     * @return self
     */
    public function setBankName($bank_name)
    {
        if (is_null($bank_name)) {
            throw new \InvalidArgumentException('non-nullable bank_name cannot be null');
        }
        if ((mb_strlen($bank_name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $bank_name when calling A02RequestPaymentInfoSg., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($bank_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $bank_name when calling A02RequestPaymentInfoSg., must be bigger than or equal to 0.');
        }

        $this->container['bank_name'] = $bank_name;

        return $this;
    }

    /**
     * Gets bank_street
     *
     * @return string|null
     */
    public function getBankStreet()
    {
        return $this->container['bank_street'];
    }

    /**
     * Sets bank_street
     *
     * @param string|null $bank_street Bank street name
     *
     * @return self
     */
    public function setBankStreet($bank_street)
    {
        if (is_null($bank_street)) {
            throw new \InvalidArgumentException('non-nullable bank_street cannot be null');
        }
        if ((mb_strlen($bank_street) > 100)) {
            throw new \InvalidArgumentException('invalid length for $bank_street when calling A02RequestPaymentInfoSg., must be smaller than or equal to 100.');
        }
        if ((mb_strlen($bank_street) < 3)) {
            throw new \InvalidArgumentException('invalid length for $bank_street when calling A02RequestPaymentInfoSg., must be bigger than or equal to 3.');
        }

        $this->container['bank_street'] = $bank_street;

        return $this;
    }

    /**
     * Gets bank_zip
     *
     * @return string|null
     */
    public function getBankZip()
    {
        return $this->container['bank_zip'];
    }

    /**
     * Sets bank_zip
     *
     * @param string|null $bank_zip Bank zip code
     *
     * @return self
     */
    public function setBankZip($bank_zip)
    {
        if (is_null($bank_zip)) {
            throw new \InvalidArgumentException('non-nullable bank_zip cannot be null');
        }
        if ((mb_strlen($bank_zip) > 255)) {
            throw new \InvalidArgumentException('invalid length for $bank_zip when calling A02RequestPaymentInfoSg., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($bank_zip) < 0)) {
            throw new \InvalidArgumentException('invalid length for $bank_zip when calling A02RequestPaymentInfoSg., must be bigger than or equal to 0.');
        }

        $this->container['bank_zip'] = $bank_zip;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return string|null
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param string|null $owner Name of the owner of the payment information
     *
     * @return self
     */
    public function setOwner($owner)
    {
        if (is_null($owner)) {
            throw new \InvalidArgumentException('non-nullable owner cannot be null');
        }
        if ((mb_strlen($owner) > 100)) {
            throw new \InvalidArgumentException('invalid length for $owner when calling A02RequestPaymentInfoSg., must be smaller than or equal to 100.');
        }
        if ((mb_strlen($owner) < 3)) {
            throw new \InvalidArgumentException('invalid length for $owner when calling A02RequestPaymentInfoSg., must be bigger than or equal to 3.');
        }

        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets swift_code
     *
     * @return string|null
     */
    public function getSwiftCode()
    {
        return $this->container['swift_code'];
    }

    /**
     * Sets swift_code
     *
     * @param string|null $swift_code Bank account swift code
     *
     * @return self
     */
    public function setSwiftCode($swift_code)
    {
        if (is_null($swift_code)) {
            throw new \InvalidArgumentException('non-nullable swift_code cannot be null');
        }
        $this->container['swift_code'] = $swift_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


