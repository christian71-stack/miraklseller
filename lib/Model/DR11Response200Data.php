<?php
/**
 * DR11Response200Data
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  cbdesk\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mirakl Marketplace APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest-release
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace cbdesk\Mirakl\Model;

use \ArrayAccess;
use \cbdesk\Mirakl\ObjectSerializer;

/**
 * DR11Response200Data Class Doc Comment
 *
 * @category Class
 * @package  cbdesk\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DR11Response200Data implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DR11_Response_200_Data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'currency_iso_code' => 'string',
        'date_created' => '\DateTime',
        'document_details' => '\cbdesk\Mirakl\Model\DR11Response200DataDocumentDetails[]',
        'document_number' => 'string',
        'document_upload_date' => '\DateTime',
        'due_date' => '\DateTime',
        'entities' => '\cbdesk\Mirakl\Model\DR11Response200DataEntities',
        'entity_date_created' => '\DateTime',
        'entity_id' => 'string',
        'entity_type' => 'string',
        'id' => 'string',
        'initial_documents' => '\cbdesk\Mirakl\Model\DR11Response200DataInitialDocuments[]',
        'initial_payment_state' => 'string',
        'issue_date' => '\DateTime',
        'issuer' => '\cbdesk\Mirakl\Model\DR11Response200DataIssuer',
        'last_updated' => '\DateTime',
        'payment' => '\cbdesk\Mirakl\Model\DR11Response200DataPayment',
        'payment_destination' => '\cbdesk\Mirakl\Model\DR11Response200DataPaymentDestination',
        'payment_terms' => '\cbdesk\Mirakl\Model\DR11Response200DataPaymentTerms',
        'recipient' => '\cbdesk\Mirakl\Model\DR11Response200DataRecipient',
        'state' => 'string',
        'taxes' => '\cbdesk\Mirakl\Model\DR11Response200DataTaxes[]',
        'total_amount_excluding_taxes' => 'float',
        'total_amount_including_taxes' => 'float',
        'total_tax_amount' => 'float',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'currency_iso_code' => null,
        'date_created' => 'date-time',
        'document_details' => null,
        'document_number' => null,
        'document_upload_date' => 'date-time',
        'due_date' => 'date-time',
        'entities' => null,
        'entity_date_created' => 'date-time',
        'entity_id' => null,
        'entity_type' => null,
        'id' => null,
        'initial_documents' => null,
        'initial_payment_state' => null,
        'issue_date' => 'date-time',
        'issuer' => null,
        'last_updated' => 'date-time',
        'payment' => null,
        'payment_destination' => null,
        'payment_terms' => null,
        'recipient' => null,
        'state' => null,
        'taxes' => null,
        'total_amount_excluding_taxes' => null,
        'total_amount_including_taxes' => null,
        'total_tax_amount' => null,
        'type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'currency_iso_code' => false,
        'date_created' => false,
        'document_details' => false,
        'document_number' => false,
        'document_upload_date' => false,
        'due_date' => false,
        'entities' => false,
        'entity_date_created' => false,
        'entity_id' => false,
        'entity_type' => false,
        'id' => false,
        'initial_documents' => false,
        'initial_payment_state' => false,
        'issue_date' => false,
        'issuer' => false,
        'last_updated' => false,
        'payment' => false,
        'payment_destination' => false,
        'payment_terms' => false,
        'recipient' => false,
        'state' => false,
        'taxes' => false,
        'total_amount_excluding_taxes' => false,
        'total_amount_including_taxes' => false,
        'total_tax_amount' => false,
        'type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'currency_iso_code' => 'currency_iso_code',
        'date_created' => 'date_created',
        'document_details' => 'document_details',
        'document_number' => 'document_number',
        'document_upload_date' => 'document_upload_date',
        'due_date' => 'due_date',
        'entities' => 'entities',
        'entity_date_created' => 'entity_date_created',
        'entity_id' => 'entity_id',
        'entity_type' => 'entity_type',
        'id' => 'id',
        'initial_documents' => 'initial_documents',
        'initial_payment_state' => 'initial_payment_state',
        'issue_date' => 'issue_date',
        'issuer' => 'issuer',
        'last_updated' => 'last_updated',
        'payment' => 'payment',
        'payment_destination' => 'payment_destination',
        'payment_terms' => 'payment_terms',
        'recipient' => 'recipient',
        'state' => 'state',
        'taxes' => 'taxes',
        'total_amount_excluding_taxes' => 'total_amount_excluding_taxes',
        'total_amount_including_taxes' => 'total_amount_including_taxes',
        'total_tax_amount' => 'total_tax_amount',
        'type' => 'type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'currency_iso_code' => 'setCurrencyIsoCode',
        'date_created' => 'setDateCreated',
        'document_details' => 'setDocumentDetails',
        'document_number' => 'setDocumentNumber',
        'document_upload_date' => 'setDocumentUploadDate',
        'due_date' => 'setDueDate',
        'entities' => 'setEntities',
        'entity_date_created' => 'setEntityDateCreated',
        'entity_id' => 'setEntityId',
        'entity_type' => 'setEntityType',
        'id' => 'setId',
        'initial_documents' => 'setInitialDocuments',
        'initial_payment_state' => 'setInitialPaymentState',
        'issue_date' => 'setIssueDate',
        'issuer' => 'setIssuer',
        'last_updated' => 'setLastUpdated',
        'payment' => 'setPayment',
        'payment_destination' => 'setPaymentDestination',
        'payment_terms' => 'setPaymentTerms',
        'recipient' => 'setRecipient',
        'state' => 'setState',
        'taxes' => 'setTaxes',
        'total_amount_excluding_taxes' => 'setTotalAmountExcludingTaxes',
        'total_amount_including_taxes' => 'setTotalAmountIncludingTaxes',
        'total_tax_amount' => 'setTotalTaxAmount',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'currency_iso_code' => 'getCurrencyIsoCode',
        'date_created' => 'getDateCreated',
        'document_details' => 'getDocumentDetails',
        'document_number' => 'getDocumentNumber',
        'document_upload_date' => 'getDocumentUploadDate',
        'due_date' => 'getDueDate',
        'entities' => 'getEntities',
        'entity_date_created' => 'getEntityDateCreated',
        'entity_id' => 'getEntityId',
        'entity_type' => 'getEntityType',
        'id' => 'getId',
        'initial_documents' => 'getInitialDocuments',
        'initial_payment_state' => 'getInitialPaymentState',
        'issue_date' => 'getIssueDate',
        'issuer' => 'getIssuer',
        'last_updated' => 'getLastUpdated',
        'payment' => 'getPayment',
        'payment_destination' => 'getPaymentDestination',
        'payment_terms' => 'getPaymentTerms',
        'recipient' => 'getRecipient',
        'state' => 'getState',
        'taxes' => 'getTaxes',
        'total_amount_excluding_taxes' => 'getTotalAmountExcludingTaxes',
        'total_amount_including_taxes' => 'getTotalAmountIncludingTaxes',
        'total_tax_amount' => 'getTotalTaxAmount',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('currency_iso_code', $data ?? [], null);
        $this->setIfExists('date_created', $data ?? [], null);
        $this->setIfExists('document_details', $data ?? [], null);
        $this->setIfExists('document_number', $data ?? [], null);
        $this->setIfExists('document_upload_date', $data ?? [], null);
        $this->setIfExists('due_date', $data ?? [], null);
        $this->setIfExists('entities', $data ?? [], null);
        $this->setIfExists('entity_date_created', $data ?? [], null);
        $this->setIfExists('entity_id', $data ?? [], null);
        $this->setIfExists('entity_type', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('initial_documents', $data ?? [], null);
        $this->setIfExists('initial_payment_state', $data ?? [], null);
        $this->setIfExists('issue_date', $data ?? [], null);
        $this->setIfExists('issuer', $data ?? [], null);
        $this->setIfExists('last_updated', $data ?? [], null);
        $this->setIfExists('payment', $data ?? [], null);
        $this->setIfExists('payment_destination', $data ?? [], null);
        $this->setIfExists('payment_terms', $data ?? [], null);
        $this->setIfExists('recipient', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('taxes', $data ?? [], null);
        $this->setIfExists('total_amount_excluding_taxes', $data ?? [], null);
        $this->setIfExists('total_amount_including_taxes', $data ?? [], null);
        $this->setIfExists('total_tax_amount', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets currency_iso_code
     *
     * @return string|null
     */
    public function getCurrencyIsoCode()
    {
        return $this->container['currency_iso_code'];
    }

    /**
     * Sets currency_iso_code
     *
     * @param string|null $currency_iso_code The currency of the document request
     *
     * @return self
     */
    public function setCurrencyIsoCode($currency_iso_code)
    {
        if (is_null($currency_iso_code)) {
            throw new \InvalidArgumentException('non-nullable currency_iso_code cannot be null');
        }
        $this->container['currency_iso_code'] = $currency_iso_code;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return \DateTime|null
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param \DateTime|null $date_created The document request creation date
     *
     * @return self
     */
    public function setDateCreated($date_created)
    {
        if (is_null($date_created)) {
            throw new \InvalidArgumentException('non-nullable date_created cannot be null');
        }
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets document_details
     *
     * @return \cbdesk\Mirakl\Model\DR11Response200DataDocumentDetails[]|null
     */
    public function getDocumentDetails()
    {
        return $this->container['document_details'];
    }

    /**
     * Sets document_details
     *
     * @param \cbdesk\Mirakl\Model\DR11Response200DataDocumentDetails[]|null $document_details The document details
     *
     * @return self
     */
    public function setDocumentDetails($document_details)
    {
        if (is_null($document_details)) {
            throw new \InvalidArgumentException('non-nullable document_details cannot be null');
        }
        $this->container['document_details'] = $document_details;

        return $this;
    }

    /**
     * Gets document_number
     *
     * @return string|null
     */
    public function getDocumentNumber()
    {
        return $this->container['document_number'];
    }

    /**
     * Sets document_number
     *
     * @param string|null $document_number The accounting document number
     *
     * @return self
     */
    public function setDocumentNumber($document_number)
    {
        if (is_null($document_number)) {
            throw new \InvalidArgumentException('non-nullable document_number cannot be null');
        }
        $this->container['document_number'] = $document_number;

        return $this;
    }

    /**
     * Gets document_upload_date
     *
     * @return \DateTime|null
     */
    public function getDocumentUploadDate()
    {
        return $this->container['document_upload_date'];
    }

    /**
     * Sets document_upload_date
     *
     * @param \DateTime|null $document_upload_date The last upload date of the accounting document
     *
     * @return self
     */
    public function setDocumentUploadDate($document_upload_date)
    {
        if (is_null($document_upload_date)) {
            throw new \InvalidArgumentException('non-nullable document_upload_date cannot be null');
        }
        $this->container['document_upload_date'] = $document_upload_date;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return \DateTime|null
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param \DateTime|null $due_date The document due date
     *
     * @return self
     */
    public function setDueDate($due_date)
    {
        if (is_null($due_date)) {
            throw new \InvalidArgumentException('non-nullable due_date cannot be null');
        }
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets entities
     *
     * @return \cbdesk\Mirakl\Model\DR11Response200DataEntities|null
     */
    public function getEntities()
    {
        return $this->container['entities'];
    }

    /**
     * Sets entities
     *
     * @param \cbdesk\Mirakl\Model\DR11Response200DataEntities|null $entities entities
     *
     * @return self
     */
    public function setEntities($entities)
    {
        if (is_null($entities)) {
            throw new \InvalidArgumentException('non-nullable entities cannot be null');
        }
        $this->container['entities'] = $entities;

        return $this;
    }

    /**
     * Gets entity_date_created
     *
     * @return \DateTime|null
     */
    public function getEntityDateCreated()
    {
        return $this->container['entity_date_created'];
    }

    /**
     * Sets entity_date_created
     *
     * @param \DateTime|null $entity_date_created The entity creation date, not applicable for entity_type=SHOP_BILLING_CYCLE_PURCHASE_ORDER
     *
     * @return self
     */
    public function setEntityDateCreated($entity_date_created)
    {
        if (is_null($entity_date_created)) {
            throw new \InvalidArgumentException('non-nullable entity_date_created cannot be null');
        }
        $this->container['entity_date_created'] = $entity_date_created;

        return $this;
    }

    /**
     * Gets entity_id
     *
     * @return string|null
     */
    public function getEntityId()
    {
        return $this->container['entity_id'];
    }

    /**
     * Sets entity_id
     *
     * @param string|null $entity_id The entity id the document request relates to
     *
     * @return self
     */
    public function setEntityId($entity_id)
    {
        if (is_null($entity_id)) {
            throw new \InvalidArgumentException('non-nullable entity_id cannot be null');
        }
        $this->container['entity_id'] = $entity_id;

        return $this;
    }

    /**
     * Gets entity_type
     *
     * @return string|null
     */
    public function getEntityType()
    {
        return $this->container['entity_type'];
    }

    /**
     * Sets entity_type
     *
     * @param string|null $entity_type The entity type the document request relates to
     *
     * @return self
     */
    public function setEntityType($entity_type)
    {
        if (is_null($entity_type)) {
            throw new \InvalidArgumentException('non-nullable entity_type cannot be null');
        }
        $this->container['entity_type'] = $entity_type;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The document request unique identifier
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets initial_documents
     *
     * @return \cbdesk\Mirakl\Model\DR11Response200DataInitialDocuments[]|null
     */
    public function getInitialDocuments()
    {
        return $this->container['initial_documents'];
    }

    /**
     * Sets initial_documents
     *
     * @param \cbdesk\Mirakl\Model\DR11Response200DataInitialDocuments[]|null $initial_documents In the case of <code>CREDIT_NOTE</code> or reissued <code>INVOICE</code>, information about the initial accounting documents
     *
     * @return self
     */
    public function setInitialDocuments($initial_documents)
    {
        if (is_null($initial_documents)) {
            throw new \InvalidArgumentException('non-nullable initial_documents cannot be null');
        }
        $this->container['initial_documents'] = $initial_documents;

        return $this;
    }

    /**
     * Gets initial_payment_state
     *
     * @return string|null
     */
    public function getInitialPaymentState()
    {
        return $this->container['initial_payment_state'];
    }

    /**
     * Sets initial_payment_state
     *
     * @param string|null $initial_payment_state The document request payment state at the time when the document request was created
     *
     * @return self
     */
    public function setInitialPaymentState($initial_payment_state)
    {
        if (is_null($initial_payment_state)) {
            throw new \InvalidArgumentException('non-nullable initial_payment_state cannot be null');
        }
        $this->container['initial_payment_state'] = $initial_payment_state;

        return $this;
    }

    /**
     * Gets issue_date
     *
     * @return \DateTime|null
     */
    public function getIssueDate()
    {
        return $this->container['issue_date'];
    }

    /**
     * Sets issue_date
     *
     * @param \DateTime|null $issue_date The document issue date
     *
     * @return self
     */
    public function setIssueDate($issue_date)
    {
        if (is_null($issue_date)) {
            throw new \InvalidArgumentException('non-nullable issue_date cannot be null');
        }
        $this->container['issue_date'] = $issue_date;

        return $this;
    }

    /**
     * Gets issuer
     *
     * @return \cbdesk\Mirakl\Model\DR11Response200DataIssuer|null
     */
    public function getIssuer()
    {
        return $this->container['issuer'];
    }

    /**
     * Sets issuer
     *
     * @param \cbdesk\Mirakl\Model\DR11Response200DataIssuer|null $issuer issuer
     *
     * @return self
     */
    public function setIssuer($issuer)
    {
        if (is_null($issuer)) {
            throw new \InvalidArgumentException('non-nullable issuer cannot be null');
        }
        $this->container['issuer'] = $issuer;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return \DateTime|null
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param \DateTime|null $last_updated The document request last update date
     *
     * @return self
     */
    public function setLastUpdated($last_updated)
    {
        if (is_null($last_updated)) {
            throw new \InvalidArgumentException('non-nullable last_updated cannot be null');
        }
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets payment
     *
     * @return \cbdesk\Mirakl\Model\DR11Response200DataPayment|null
     */
    public function getPayment()
    {
        return $this->container['payment'];
    }

    /**
     * Sets payment
     *
     * @param \cbdesk\Mirakl\Model\DR11Response200DataPayment|null $payment payment
     *
     * @return self
     */
    public function setPayment($payment)
    {
        if (is_null($payment)) {
            throw new \InvalidArgumentException('non-nullable payment cannot be null');
        }
        $this->container['payment'] = $payment;

        return $this;
    }

    /**
     * Gets payment_destination
     *
     * @return \cbdesk\Mirakl\Model\DR11Response200DataPaymentDestination|null
     */
    public function getPaymentDestination()
    {
        return $this->container['payment_destination'];
    }

    /**
     * Sets payment_destination
     *
     * @param \cbdesk\Mirakl\Model\DR11Response200DataPaymentDestination|null $payment_destination payment_destination
     *
     * @return self
     */
    public function setPaymentDestination($payment_destination)
    {
        if (is_null($payment_destination)) {
            throw new \InvalidArgumentException('non-nullable payment_destination cannot be null');
        }
        $this->container['payment_destination'] = $payment_destination;

        return $this;
    }

    /**
     * Gets payment_terms
     *
     * @return \cbdesk\Mirakl\Model\DR11Response200DataPaymentTerms|null
     */
    public function getPaymentTerms()
    {
        return $this->container['payment_terms'];
    }

    /**
     * Sets payment_terms
     *
     * @param \cbdesk\Mirakl\Model\DR11Response200DataPaymentTerms|null $payment_terms payment_terms
     *
     * @return self
     */
    public function setPaymentTerms($payment_terms)
    {
        if (is_null($payment_terms)) {
            throw new \InvalidArgumentException('non-nullable payment_terms cannot be null');
        }
        $this->container['payment_terms'] = $payment_terms;

        return $this;
    }

    /**
     * Gets recipient
     *
     * @return \cbdesk\Mirakl\Model\DR11Response200DataRecipient|null
     */
    public function getRecipient()
    {
        return $this->container['recipient'];
    }

    /**
     * Sets recipient
     *
     * @param \cbdesk\Mirakl\Model\DR11Response200DataRecipient|null $recipient recipient
     *
     * @return self
     */
    public function setRecipient($recipient)
    {
        if (is_null($recipient)) {
            throw new \InvalidArgumentException('non-nullable recipient cannot be null');
        }
        $this->container['recipient'] = $recipient;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state The document request state
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets taxes
     *
     * @return \cbdesk\Mirakl\Model\DR11Response200DataTaxes[]|null
     */
    public function getTaxes()
    {
        return $this->container['taxes'];
    }

    /**
     * Sets taxes
     *
     * @param \cbdesk\Mirakl\Model\DR11Response200DataTaxes[]|null $taxes Total amount of taxes aggregated per tax code and rate
     *
     * @return self
     */
    public function setTaxes($taxes)
    {
        if (is_null($taxes)) {
            throw new \InvalidArgumentException('non-nullable taxes cannot be null');
        }
        $this->container['taxes'] = $taxes;

        return $this;
    }

    /**
     * Gets total_amount_excluding_taxes
     *
     * @return float|null
     */
    public function getTotalAmountExcludingTaxes()
    {
        return $this->container['total_amount_excluding_taxes'];
    }

    /**
     * Sets total_amount_excluding_taxes
     *
     * @param float|null $total_amount_excluding_taxes The total document amount (excluding taxes)
     *
     * @return self
     */
    public function setTotalAmountExcludingTaxes($total_amount_excluding_taxes)
    {
        if (is_null($total_amount_excluding_taxes)) {
            throw new \InvalidArgumentException('non-nullable total_amount_excluding_taxes cannot be null');
        }
        $this->container['total_amount_excluding_taxes'] = $total_amount_excluding_taxes;

        return $this;
    }

    /**
     * Gets total_amount_including_taxes
     *
     * @return float|null
     */
    public function getTotalAmountIncludingTaxes()
    {
        return $this->container['total_amount_including_taxes'];
    }

    /**
     * Sets total_amount_including_taxes
     *
     * @param float|null $total_amount_including_taxes The total document amount (including taxes)
     *
     * @return self
     */
    public function setTotalAmountIncludingTaxes($total_amount_including_taxes)
    {
        if (is_null($total_amount_including_taxes)) {
            throw new \InvalidArgumentException('non-nullable total_amount_including_taxes cannot be null');
        }
        $this->container['total_amount_including_taxes'] = $total_amount_including_taxes;

        return $this;
    }

    /**
     * Gets total_tax_amount
     *
     * @return float|null
     */
    public function getTotalTaxAmount()
    {
        return $this->container['total_tax_amount'];
    }

    /**
     * Sets total_tax_amount
     *
     * @param float|null $total_tax_amount The total taxes amount of the document
     *
     * @return self
     */
    public function setTotalTaxAmount($total_tax_amount)
    {
        if (is_null($total_tax_amount)) {
            throw new \InvalidArgumentException('non-nullable total_tax_amount cannot be null');
        }
        $this->container['total_tax_amount'] = $total_tax_amount;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type The accounting document type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


