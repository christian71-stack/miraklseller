<?php
/**
 * PC01Response200Features
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  cbdesk\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mirakl Marketplace APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest-release
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace cbdesk\Mirakl\Model;

use \ArrayAccess;
use \cbdesk\Mirakl\ObjectSerializer;

/**
 * PC01Response200Features Class Doc Comment
 *
 * @category Class
 * @package  cbdesk\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PC01Response200Features implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PC01_Response_200_Features';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'catalog' => '\cbdesk\Mirakl\Model\PC01Response200FeaturesCatalog',
        'circular_economy_data_collection' => 'bool',
        'competitive_pricing_tool' => 'bool',
        'direct_payment_customer_store' => '\cbdesk\Mirakl\Model\PC01Response200FeaturesDirectPaymentCustomerStore',
        'disable_seller_alternative_carrier' => 'bool',
        'kyc_status_per_seller' => 'bool',
        'lead_time_to_ship_by_sellers_enabled' => 'string',
        'multi_currency' => 'bool',
        'multi_payout_psp_per_seller' => 'bool',
        'no_reply_needed' => 'bool',
        'offer_prices_decimals' => 'string',
        'operator_csv_delimiter' => 'string',
        'order_conditions' => '\cbdesk\Mirakl\Model\PC01Response200FeaturesOrderConditions',
        'order_tax_mode' => 'string',
        'order_workflows' => '\cbdesk\Mirakl\Model\PC01Response200FeaturesOrderWorkflows',
        'payment_confirmation' => 'bool',
        'pricing' => '\cbdesk\Mirakl\Model\PC01Response200FeaturesPricing',
        'product_data_validation_by_channel' => 'bool',
        'shipment' => '\cbdesk\Mirakl\Model\PC01Response200FeaturesShipment',
        'shop_tax_options' => '\cbdesk\Mirakl\Model\PC01Response200FeaturesShopTaxOptions',
        'tax_collection' => '\cbdesk\Mirakl\Model\PC01Response200FeaturesTaxCollection',
        'tax_id_number' => '\cbdesk\Mirakl\Model\PC01Response200FeaturesTaxIdNumber'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'catalog' => null,
        'circular_economy_data_collection' => null,
        'competitive_pricing_tool' => null,
        'direct_payment_customer_store' => null,
        'disable_seller_alternative_carrier' => null,
        'kyc_status_per_seller' => null,
        'lead_time_to_ship_by_sellers_enabled' => null,
        'multi_currency' => null,
        'multi_payout_psp_per_seller' => null,
        'no_reply_needed' => null,
        'offer_prices_decimals' => null,
        'operator_csv_delimiter' => null,
        'order_conditions' => null,
        'order_tax_mode' => null,
        'order_workflows' => null,
        'payment_confirmation' => null,
        'pricing' => null,
        'product_data_validation_by_channel' => null,
        'shipment' => null,
        'shop_tax_options' => null,
        'tax_collection' => null,
        'tax_id_number' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'catalog' => false,
        'circular_economy_data_collection' => false,
        'competitive_pricing_tool' => false,
        'direct_payment_customer_store' => false,
        'disable_seller_alternative_carrier' => false,
        'kyc_status_per_seller' => false,
        'lead_time_to_ship_by_sellers_enabled' => false,
        'multi_currency' => false,
        'multi_payout_psp_per_seller' => false,
        'no_reply_needed' => false,
        'offer_prices_decimals' => false,
        'operator_csv_delimiter' => false,
        'order_conditions' => false,
        'order_tax_mode' => false,
        'order_workflows' => false,
        'payment_confirmation' => false,
        'pricing' => false,
        'product_data_validation_by_channel' => false,
        'shipment' => false,
        'shop_tax_options' => false,
        'tax_collection' => false,
        'tax_id_number' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'catalog' => 'catalog',
        'circular_economy_data_collection' => 'circular_economy_data_collection',
        'competitive_pricing_tool' => 'competitive_pricing_tool',
        'direct_payment_customer_store' => 'direct_payment_customer_store',
        'disable_seller_alternative_carrier' => 'disable_seller_alternative_carrier',
        'kyc_status_per_seller' => 'kyc_status_per_seller',
        'lead_time_to_ship_by_sellers_enabled' => 'lead_time_to_ship_by_sellers_enabled',
        'multi_currency' => 'multi_currency',
        'multi_payout_psp_per_seller' => 'multi_payout_psp_per_seller',
        'no_reply_needed' => 'no_reply_needed',
        'offer_prices_decimals' => 'offer_prices_decimals',
        'operator_csv_delimiter' => 'operator_csv_delimiter',
        'order_conditions' => 'order_conditions',
        'order_tax_mode' => 'order_tax_mode',
        'order_workflows' => 'order_workflows',
        'payment_confirmation' => 'payment_confirmation',
        'pricing' => 'pricing',
        'product_data_validation_by_channel' => 'product_data_validation_by_channel',
        'shipment' => 'shipment',
        'shop_tax_options' => 'shop_tax_options',
        'tax_collection' => 'tax_collection',
        'tax_id_number' => 'tax_id_number'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'catalog' => 'setCatalog',
        'circular_economy_data_collection' => 'setCircularEconomyDataCollection',
        'competitive_pricing_tool' => 'setCompetitivePricingTool',
        'direct_payment_customer_store' => 'setDirectPaymentCustomerStore',
        'disable_seller_alternative_carrier' => 'setDisableSellerAlternativeCarrier',
        'kyc_status_per_seller' => 'setKycStatusPerSeller',
        'lead_time_to_ship_by_sellers_enabled' => 'setLeadTimeToShipBySellersEnabled',
        'multi_currency' => 'setMultiCurrency',
        'multi_payout_psp_per_seller' => 'setMultiPayoutPspPerSeller',
        'no_reply_needed' => 'setNoReplyNeeded',
        'offer_prices_decimals' => 'setOfferPricesDecimals',
        'operator_csv_delimiter' => 'setOperatorCsvDelimiter',
        'order_conditions' => 'setOrderConditions',
        'order_tax_mode' => 'setOrderTaxMode',
        'order_workflows' => 'setOrderWorkflows',
        'payment_confirmation' => 'setPaymentConfirmation',
        'pricing' => 'setPricing',
        'product_data_validation_by_channel' => 'setProductDataValidationByChannel',
        'shipment' => 'setShipment',
        'shop_tax_options' => 'setShopTaxOptions',
        'tax_collection' => 'setTaxCollection',
        'tax_id_number' => 'setTaxIdNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'catalog' => 'getCatalog',
        'circular_economy_data_collection' => 'getCircularEconomyDataCollection',
        'competitive_pricing_tool' => 'getCompetitivePricingTool',
        'direct_payment_customer_store' => 'getDirectPaymentCustomerStore',
        'disable_seller_alternative_carrier' => 'getDisableSellerAlternativeCarrier',
        'kyc_status_per_seller' => 'getKycStatusPerSeller',
        'lead_time_to_ship_by_sellers_enabled' => 'getLeadTimeToShipBySellersEnabled',
        'multi_currency' => 'getMultiCurrency',
        'multi_payout_psp_per_seller' => 'getMultiPayoutPspPerSeller',
        'no_reply_needed' => 'getNoReplyNeeded',
        'offer_prices_decimals' => 'getOfferPricesDecimals',
        'operator_csv_delimiter' => 'getOperatorCsvDelimiter',
        'order_conditions' => 'getOrderConditions',
        'order_tax_mode' => 'getOrderTaxMode',
        'order_workflows' => 'getOrderWorkflows',
        'payment_confirmation' => 'getPaymentConfirmation',
        'pricing' => 'getPricing',
        'product_data_validation_by_channel' => 'getProductDataValidationByChannel',
        'shipment' => 'getShipment',
        'shop_tax_options' => 'getShopTaxOptions',
        'tax_collection' => 'getTaxCollection',
        'tax_id_number' => 'getTaxIdNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('catalog', $data ?? [], null);
        $this->setIfExists('circular_economy_data_collection', $data ?? [], null);
        $this->setIfExists('competitive_pricing_tool', $data ?? [], null);
        $this->setIfExists('direct_payment_customer_store', $data ?? [], null);
        $this->setIfExists('disable_seller_alternative_carrier', $data ?? [], null);
        $this->setIfExists('kyc_status_per_seller', $data ?? [], null);
        $this->setIfExists('lead_time_to_ship_by_sellers_enabled', $data ?? [], null);
        $this->setIfExists('multi_currency', $data ?? [], null);
        $this->setIfExists('multi_payout_psp_per_seller', $data ?? [], null);
        $this->setIfExists('no_reply_needed', $data ?? [], null);
        $this->setIfExists('offer_prices_decimals', $data ?? [], null);
        $this->setIfExists('operator_csv_delimiter', $data ?? [], null);
        $this->setIfExists('order_conditions', $data ?? [], null);
        $this->setIfExists('order_tax_mode', $data ?? [], null);
        $this->setIfExists('order_workflows', $data ?? [], null);
        $this->setIfExists('payment_confirmation', $data ?? [], null);
        $this->setIfExists('pricing', $data ?? [], null);
        $this->setIfExists('product_data_validation_by_channel', $data ?? [], null);
        $this->setIfExists('shipment', $data ?? [], null);
        $this->setIfExists('shop_tax_options', $data ?? [], null);
        $this->setIfExists('tax_collection', $data ?? [], null);
        $this->setIfExists('tax_id_number', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets catalog
     *
     * @return \cbdesk\Mirakl\Model\PC01Response200FeaturesCatalog|null
     */
    public function getCatalog()
    {
        return $this->container['catalog'];
    }

    /**
     * Sets catalog
     *
     * @param \cbdesk\Mirakl\Model\PC01Response200FeaturesCatalog|null $catalog catalog
     *
     * @return self
     */
    public function setCatalog($catalog)
    {
        if (is_null($catalog)) {
            throw new \InvalidArgumentException('non-nullable catalog cannot be null');
        }
        $this->container['catalog'] = $catalog;

        return $this;
    }

    /**
     * Gets circular_economy_data_collection
     *
     * @return bool|null
     */
    public function getCircularEconomyDataCollection()
    {
        return $this->container['circular_economy_data_collection'];
    }

    /**
     * Sets circular_economy_data_collection
     *
     * @param bool|null $circular_economy_data_collection Allows operators to collect data related to the circular economy regulation
     *
     * @return self
     */
    public function setCircularEconomyDataCollection($circular_economy_data_collection)
    {
        if (is_null($circular_economy_data_collection)) {
            throw new \InvalidArgumentException('non-nullable circular_economy_data_collection cannot be null');
        }
        $this->container['circular_economy_data_collection'] = $circular_economy_data_collection;

        return $this;
    }

    /**
     * Gets competitive_pricing_tool
     *
     * @return bool|null
     */
    public function getCompetitivePricingTool()
    {
        return $this->container['competitive_pricing_tool'];
    }

    /**
     * Sets competitive_pricing_tool
     *
     * @param bool|null $competitive_pricing_tool The competitive pricing tool allows stores to view and possibly match competing Marketplace offers
     *
     * @return self
     */
    public function setCompetitivePricingTool($competitive_pricing_tool)
    {
        if (is_null($competitive_pricing_tool)) {
            throw new \InvalidArgumentException('non-nullable competitive_pricing_tool cannot be null');
        }
        $this->container['competitive_pricing_tool'] = $competitive_pricing_tool;

        return $this;
    }

    /**
     * Gets direct_payment_customer_store
     *
     * @return \cbdesk\Mirakl\Model\PC01Response200FeaturesDirectPaymentCustomerStore|null
     */
    public function getDirectPaymentCustomerStore()
    {
        return $this->container['direct_payment_customer_store'];
    }

    /**
     * Sets direct_payment_customer_store
     *
     * @param \cbdesk\Mirakl\Model\PC01Response200FeaturesDirectPaymentCustomerStore|null $direct_payment_customer_store direct_payment_customer_store
     *
     * @return self
     */
    public function setDirectPaymentCustomerStore($direct_payment_customer_store)
    {
        if (is_null($direct_payment_customer_store)) {
            throw new \InvalidArgumentException('non-nullable direct_payment_customer_store cannot be null');
        }
        $this->container['direct_payment_customer_store'] = $direct_payment_customer_store;

        return $this;
    }

    /**
     * Gets disable_seller_alternative_carrier
     *
     * @return bool|null
     */
    public function getDisableSellerAlternativeCarrier()
    {
        return $this->container['disable_seller_alternative_carrier'];
    }

    /**
     * Sets disable_seller_alternative_carrier
     *
     * @param bool|null $disable_seller_alternative_carrier Prevent stores from specifying alternatives carriers outside those predefined by the operator
     *
     * @return self
     */
    public function setDisableSellerAlternativeCarrier($disable_seller_alternative_carrier)
    {
        if (is_null($disable_seller_alternative_carrier)) {
            throw new \InvalidArgumentException('non-nullable disable_seller_alternative_carrier cannot be null');
        }
        $this->container['disable_seller_alternative_carrier'] = $disable_seller_alternative_carrier;

        return $this;
    }

    /**
     * Gets kyc_status_per_seller
     *
     * @return bool|null
     */
    public function getKycStatusPerSeller()
    {
        return $this->container['kyc_status_per_seller'];
    }

    /**
     * Sets kyc_status_per_seller
     *
     * @param bool|null $kyc_status_per_seller Allows PSPs to provide operators with seller KYC statuses
     *
     * @return self
     */
    public function setKycStatusPerSeller($kyc_status_per_seller)
    {
        if (is_null($kyc_status_per_seller)) {
            throw new \InvalidArgumentException('non-nullable kyc_status_per_seller cannot be null');
        }
        $this->container['kyc_status_per_seller'] = $kyc_status_per_seller;

        return $this;
    }

    /**
     * Gets lead_time_to_ship_by_sellers_enabled
     *
     * @return string|null
     */
    public function getLeadTimeToShipBySellersEnabled()
    {
        return $this->container['lead_time_to_ship_by_sellers_enabled'];
    }

    /**
     * Sets lead_time_to_ship_by_sellers_enabled
     *
     * @param string|null $lead_time_to_ship_by_sellers_enabled Allows sellers to override the default lead time to ship
     *
     * @return self
     */
    public function setLeadTimeToShipBySellersEnabled($lead_time_to_ship_by_sellers_enabled)
    {
        if (is_null($lead_time_to_ship_by_sellers_enabled)) {
            throw new \InvalidArgumentException('non-nullable lead_time_to_ship_by_sellers_enabled cannot be null');
        }
        $this->container['lead_time_to_ship_by_sellers_enabled'] = $lead_time_to_ship_by_sellers_enabled;

        return $this;
    }

    /**
     * Gets multi_currency
     *
     * @return bool|null
     */
    public function getMultiCurrency()
    {
        return $this->container['multi_currency'];
    }

    /**
     * Sets multi_currency
     *
     * @param bool|null $multi_currency Defines if platform support multi currencies
     *
     * @return self
     */
    public function setMultiCurrency($multi_currency)
    {
        if (is_null($multi_currency)) {
            throw new \InvalidArgumentException('non-nullable multi_currency cannot be null');
        }
        $this->container['multi_currency'] = $multi_currency;

        return $this;
    }

    /**
     * Gets multi_payout_psp_per_seller
     *
     * @return bool|null
     */
    public function getMultiPayoutPspPerSeller()
    {
        return $this->container['multi_payout_psp_per_seller'];
    }

    /**
     * Sets multi_payout_psp_per_seller
     *
     * @param bool|null $multi_payout_psp_per_seller Allows the operator to use Hybrid pay-out PSP feature
     *
     * @return self
     */
    public function setMultiPayoutPspPerSeller($multi_payout_psp_per_seller)
    {
        if (is_null($multi_payout_psp_per_seller)) {
            throw new \InvalidArgumentException('non-nullable multi_payout_psp_per_seller cannot be null');
        }
        $this->container['multi_payout_psp_per_seller'] = $multi_payout_psp_per_seller;

        return $this;
    }

    /**
     * Gets no_reply_needed
     *
     * @return bool|null
     */
    public function getNoReplyNeeded()
    {
        return $this->container['no_reply_needed'];
    }

    /**
     * Sets no_reply_needed
     *
     * @param bool|null $no_reply_needed Allows to end order-related conversations when the last message sent from customer does not specifically require a reply
     *
     * @return self
     */
    public function setNoReplyNeeded($no_reply_needed)
    {
        if (is_null($no_reply_needed)) {
            throw new \InvalidArgumentException('non-nullable no_reply_needed cannot be null');
        }
        $this->container['no_reply_needed'] = $no_reply_needed;

        return $this;
    }

    /**
     * Gets offer_prices_decimals
     *
     * @return string|null
     */
    public function getOfferPricesDecimals()
    {
        return $this->container['offer_prices_decimals'];
    }

    /**
     * Sets offer_prices_decimals
     *
     * @param string|null $offer_prices_decimals Defines maximum number of decimals in offer prices
     *
     * @return self
     */
    public function setOfferPricesDecimals($offer_prices_decimals)
    {
        if (is_null($offer_prices_decimals)) {
            throw new \InvalidArgumentException('non-nullable offer_prices_decimals cannot be null');
        }
        $this->container['offer_prices_decimals'] = $offer_prices_decimals;

        return $this;
    }

    /**
     * Gets operator_csv_delimiter
     *
     * @return string|null
     */
    public function getOperatorCsvDelimiter()
    {
        return $this->container['operator_csv_delimiter'];
    }

    /**
     * Sets operator_csv_delimiter
     *
     * @param string|null $operator_csv_delimiter The delimiter used in the CSV files exported from the back office. COMMA: ',' delimiter. SEMICOLON: ';' delimiter.
     *
     * @return self
     */
    public function setOperatorCsvDelimiter($operator_csv_delimiter)
    {
        if (is_null($operator_csv_delimiter)) {
            throw new \InvalidArgumentException('non-nullable operator_csv_delimiter cannot be null');
        }
        $this->container['operator_csv_delimiter'] = $operator_csv_delimiter;

        return $this;
    }

    /**
     * Gets order_conditions
     *
     * @return \cbdesk\Mirakl\Model\PC01Response200FeaturesOrderConditions|null
     */
    public function getOrderConditions()
    {
        return $this->container['order_conditions'];
    }

    /**
     * Sets order_conditions
     *
     * @param \cbdesk\Mirakl\Model\PC01Response200FeaturesOrderConditions|null $order_conditions order_conditions
     *
     * @return self
     */
    public function setOrderConditions($order_conditions)
    {
        if (is_null($order_conditions)) {
            throw new \InvalidArgumentException('non-nullable order_conditions cannot be null');
        }
        $this->container['order_conditions'] = $order_conditions;

        return $this;
    }

    /**
     * Gets order_tax_mode
     *
     * @return string|null
     */
    public function getOrderTaxMode()
    {
        return $this->container['order_tax_mode'];
    }

    /**
     * Sets order_tax_mode
     *
     * @param string|null $order_tax_mode Prices with tax included or excluded in order-related APIs. TAX_INCLUDED: Prices with tax included. TAX_EXCLUDED: Prices with tax excluded.
     *
     * @return self
     */
    public function setOrderTaxMode($order_tax_mode)
    {
        if (is_null($order_tax_mode)) {
            throw new \InvalidArgumentException('non-nullable order_tax_mode cannot be null');
        }
        $this->container['order_tax_mode'] = $order_tax_mode;

        return $this;
    }

    /**
     * Gets order_workflows
     *
     * @return \cbdesk\Mirakl\Model\PC01Response200FeaturesOrderWorkflows|null
     */
    public function getOrderWorkflows()
    {
        return $this->container['order_workflows'];
    }

    /**
     * Sets order_workflows
     *
     * @param \cbdesk\Mirakl\Model\PC01Response200FeaturesOrderWorkflows|null $order_workflows order_workflows
     *
     * @return self
     */
    public function setOrderWorkflows($order_workflows)
    {
        if (is_null($order_workflows)) {
            throw new \InvalidArgumentException('non-nullable order_workflows cannot be null');
        }
        $this->container['order_workflows'] = $order_workflows;

        return $this;
    }

    /**
     * Gets payment_confirmation
     *
     * @return bool|null
     */
    public function getPaymentConfirmation()
    {
        return $this->container['payment_confirmation'];
    }

    /**
     * Sets payment_confirmation
     *
     * @param bool|null $payment_confirmation Allows the operator to mark an accounting document as \"Paid\" when the corresponding amount is confirmed to be paid to the seller
     *
     * @return self
     */
    public function setPaymentConfirmation($payment_confirmation)
    {
        if (is_null($payment_confirmation)) {
            throw new \InvalidArgumentException('non-nullable payment_confirmation cannot be null');
        }
        $this->container['payment_confirmation'] = $payment_confirmation;

        return $this;
    }

    /**
     * Gets pricing
     *
     * @return \cbdesk\Mirakl\Model\PC01Response200FeaturesPricing|null
     */
    public function getPricing()
    {
        return $this->container['pricing'];
    }

    /**
     * Sets pricing
     *
     * @param \cbdesk\Mirakl\Model\PC01Response200FeaturesPricing|null $pricing pricing
     *
     * @return self
     */
    public function setPricing($pricing)
    {
        if (is_null($pricing)) {
            throw new \InvalidArgumentException('non-nullable pricing cannot be null');
        }
        $this->container['pricing'] = $pricing;

        return $this;
    }

    /**
     * Gets product_data_validation_by_channel
     *
     * @return bool|null
     * @deprecated
     */
    public function getProductDataValidationByChannel()
    {
        return $this->container['product_data_validation_by_channel'];
    }

    /**
     * Sets product_data_validation_by_channel
     *
     * @param bool|null $product_data_validation_by_channel Facilitates the management of attributes in a multilingual context
     *
     * @return self
     * @deprecated
     */
    public function setProductDataValidationByChannel($product_data_validation_by_channel)
    {
        if (is_null($product_data_validation_by_channel)) {
            throw new \InvalidArgumentException('non-nullable product_data_validation_by_channel cannot be null');
        }
        $this->container['product_data_validation_by_channel'] = $product_data_validation_by_channel;

        return $this;
    }

    /**
     * Gets shipment
     *
     * @return \cbdesk\Mirakl\Model\PC01Response200FeaturesShipment|null
     */
    public function getShipment()
    {
        return $this->container['shipment'];
    }

    /**
     * Sets shipment
     *
     * @param \cbdesk\Mirakl\Model\PC01Response200FeaturesShipment|null $shipment shipment
     *
     * @return self
     */
    public function setShipment($shipment)
    {
        if (is_null($shipment)) {
            throw new \InvalidArgumentException('non-nullable shipment cannot be null');
        }
        $this->container['shipment'] = $shipment;

        return $this;
    }

    /**
     * Gets shop_tax_options
     *
     * @return \cbdesk\Mirakl\Model\PC01Response200FeaturesShopTaxOptions|null
     */
    public function getShopTaxOptions()
    {
        return $this->container['shop_tax_options'];
    }

    /**
     * Sets shop_tax_options
     *
     * @param \cbdesk\Mirakl\Model\PC01Response200FeaturesShopTaxOptions|null $shop_tax_options shop_tax_options
     *
     * @return self
     */
    public function setShopTaxOptions($shop_tax_options)
    {
        if (is_null($shop_tax_options)) {
            throw new \InvalidArgumentException('non-nullable shop_tax_options cannot be null');
        }
        $this->container['shop_tax_options'] = $shop_tax_options;

        return $this;
    }

    /**
     * Gets tax_collection
     *
     * @return \cbdesk\Mirakl\Model\PC01Response200FeaturesTaxCollection|null
     */
    public function getTaxCollection()
    {
        return $this->container['tax_collection'];
    }

    /**
     * Sets tax_collection
     *
     * @param \cbdesk\Mirakl\Model\PC01Response200FeaturesTaxCollection|null $tax_collection tax_collection
     *
     * @return self
     */
    public function setTaxCollection($tax_collection)
    {
        if (is_null($tax_collection)) {
            throw new \InvalidArgumentException('non-nullable tax_collection cannot be null');
        }
        $this->container['tax_collection'] = $tax_collection;

        return $this;
    }

    /**
     * Gets tax_id_number
     *
     * @return \cbdesk\Mirakl\Model\PC01Response200FeaturesTaxIdNumber|null
     */
    public function getTaxIdNumber()
    {
        return $this->container['tax_id_number'];
    }

    /**
     * Sets tax_id_number
     *
     * @param \cbdesk\Mirakl\Model\PC01Response200FeaturesTaxIdNumber|null $tax_id_number tax_id_number
     *
     * @return self
     */
    public function setTaxIdNumber($tax_id_number)
    {
        if (is_null($tax_id_number)) {
            throw new \InvalidArgumentException('non-nullable tax_id_number cannot be null');
        }
        $this->container['tax_id_number'] = $tax_id_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


