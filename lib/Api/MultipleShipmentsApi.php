<?php
/**
 * MultipleShipmentsApi
 * PHP version 8.1
 *
 * @category Class
 * @package  cbdesk\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mirakl Marketplace APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest-release
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace cbdesk\Mirakl\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use cbdesk\Mirakl\ApiException;
use cbdesk\Mirakl\Configuration;
use cbdesk\Mirakl\FormDataProcessor;
use cbdesk\Mirakl\HeaderSelector;
use cbdesk\Mirakl\ObjectSerializer;

/**
 * MultipleShipmentsApi Class Doc Comment
 *
 * @category Class
 * @package  cbdesk\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class MultipleShipmentsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'sT01' => [
            'application/json',
        ],
        'sT06' => [
            'application/json',
        ],
        'sT07' => [
            'application/json',
        ],
        'sT11' => [
            'application/json',
        ],
        'sT12' => [
            'application/json',
        ],
        'sT23' => [
            'application/json',
        ],
        'sT24' => [
            'application/json',
        ],
        'sT26' => [
            'application/json',
        ],
        'sT31' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation sT01
     *
     * Create shipments
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\ST01Request|null $st01_request st01_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sT01'] to see the possible values for this operation
     *
     * @throws \cbdesk\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \cbdesk\Mirakl\Model\ST01Response201
     */
    public function sT01($associative_array)
    {
        list($response) = $this->sT01WithHttpInfo($associative_array);
        return $response;
    }

    /**
     * Operation sT01WithHttpInfo
     *
     * Create shipments
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\ST01Request|null $st01_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sT01'] to see the possible values for this operation
     *
     * @throws \cbdesk\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \cbdesk\Mirakl\Model\ST01Response201, HTTP status code, HTTP response headers (array of strings)
     */
    public function sT01WithHttpInfo($associative_array)
    {
        $request = $this->sT01Request($associative_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\cbdesk\Mirakl\Model\ST01Response201',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\cbdesk\Mirakl\Model\ST01Response201',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cbdesk\Mirakl\Model\ST01Response201',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation sT01Async
     *
     * Create shipments
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\ST01Request|null $st01_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sT01'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sT01Async($associative_array)
    {
        return $this->sT01AsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sT01AsyncWithHttpInfo
     *
     * Create shipments
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\ST01Request|null $st01_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sT01'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sT01AsyncWithHttpInfo($associative_array)
    {
        $returnType = '\cbdesk\Mirakl\Model\ST01Response201';
        $request = $this->sT01Request($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sT01'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\ST01Request|null $st01_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sT01'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sT01Request($associative_array)
    {
        // unbox the parameters from the associative array
        $shop_id = array_key_exists('shop_id', $associative_array) ? $associative_array['shop_id'] : null;
        $st01_request = array_key_exists('st01_request', $associative_array) ? $associative_array['st01_request'] : null;
        $contentType = $associative_array['contentType'] ?? self::contentTypes['sT01'][0];
        



        $resourcePath = '/api/shipments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shop_id,
            'shop_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($st01_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($st01_request));
            } else {
                $httpBody = $st01_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sT06
     *
     * Delete shipments
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\ST06Request|null $st06_request st06_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sT06'] to see the possible values for this operation
     *
     * @throws \cbdesk\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \cbdesk\Mirakl\Model\ST06Response200
     */
    public function sT06($associative_array)
    {
        list($response) = $this->sT06WithHttpInfo($associative_array);
        return $response;
    }

    /**
     * Operation sT06WithHttpInfo
     *
     * Delete shipments
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\ST06Request|null $st06_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sT06'] to see the possible values for this operation
     *
     * @throws \cbdesk\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \cbdesk\Mirakl\Model\ST06Response200, HTTP status code, HTTP response headers (array of strings)
     */
    public function sT06WithHttpInfo($associative_array)
    {
        $request = $this->sT06Request($associative_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\cbdesk\Mirakl\Model\ST06Response200',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\cbdesk\Mirakl\Model\ST06Response200',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cbdesk\Mirakl\Model\ST06Response200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation sT06Async
     *
     * Delete shipments
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\ST06Request|null $st06_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sT06'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sT06Async($associative_array)
    {
        return $this->sT06AsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sT06AsyncWithHttpInfo
     *
     * Delete shipments
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\ST06Request|null $st06_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sT06'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sT06AsyncWithHttpInfo($associative_array)
    {
        $returnType = '\cbdesk\Mirakl\Model\ST06Response200';
        $request = $this->sT06Request($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sT06'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\ST06Request|null $st06_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sT06'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sT06Request($associative_array)
    {
        // unbox the parameters from the associative array
        $shop_id = array_key_exists('shop_id', $associative_array) ? $associative_array['shop_id'] : null;
        $st06_request = array_key_exists('st06_request', $associative_array) ? $associative_array['st06_request'] : null;
        $contentType = $associative_array['contentType'] ?? self::contentTypes['sT06'][0];
        



        $resourcePath = '/api/shipments/delete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shop_id,
            'shop_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($st06_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($st06_request));
            } else {
                $httpBody = $st06_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sT07
     *
     * Update shipment shipping origin
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\ST07Request|null $st07_request st07_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sT07'] to see the possible values for this operation
     *
     * @throws \cbdesk\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \cbdesk\Mirakl\Model\ST07Response200
     */
    public function sT07($associative_array)
    {
        list($response) = $this->sT07WithHttpInfo($associative_array);
        return $response;
    }

    /**
     * Operation sT07WithHttpInfo
     *
     * Update shipment shipping origin
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\ST07Request|null $st07_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sT07'] to see the possible values for this operation
     *
     * @throws \cbdesk\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \cbdesk\Mirakl\Model\ST07Response200, HTTP status code, HTTP response headers (array of strings)
     */
    public function sT07WithHttpInfo($associative_array)
    {
        $request = $this->sT07Request($associative_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\cbdesk\Mirakl\Model\ST07Response200',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\cbdesk\Mirakl\Model\ST07Response200',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cbdesk\Mirakl\Model\ST07Response200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation sT07Async
     *
     * Update shipment shipping origin
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\ST07Request|null $st07_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sT07'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sT07Async($associative_array)
    {
        return $this->sT07AsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sT07AsyncWithHttpInfo
     *
     * Update shipment shipping origin
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\ST07Request|null $st07_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sT07'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sT07AsyncWithHttpInfo($associative_array)
    {
        $returnType = '\cbdesk\Mirakl\Model\ST07Response200';
        $request = $this->sT07Request($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sT07'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\ST07Request|null $st07_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sT07'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sT07Request($associative_array)
    {
        // unbox the parameters from the associative array
        $shop_id = array_key_exists('shop_id', $associative_array) ? $associative_array['shop_id'] : null;
        $st07_request = array_key_exists('st07_request', $associative_array) ? $associative_array['st07_request'] : null;
        $contentType = $associative_array['contentType'] ?? self::contentTypes['sT07'][0];
        



        $resourcePath = '/api/shipments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shop_id,
            'shop_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($st07_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($st07_request));
            } else {
                $httpBody = $st07_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sT11
     *
     * List shipments
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string[]|null $order_id Order id for filtering. This parameter can be supplied multiple times (order_id&#x3D;OR01-A&amp;order_id&#x3D;OR02-A...). (optional)
     * @param  string[]|null $shipment_state_code Shipment state code for filtering. This parameter can be supplied multiple times (shipment_state_code&#x3D;SHIPPING&amp;shipment_state_code&#x3D;SHIPPED...). (optional)
     * @param  string[]|null $shipment_customer_debit_state_code Shipment customer debit state code for filtering. This parameter can be supplied multiple times (shipment_customer_debit_state_code&#x3D;WAITING_TAX_CONFIRMATION&amp;shipment_customer_debit_state_code&#x3D;DEBIT_OK...). (optional)
     * @param  \DateTime|null $last_updated_from Filter shipments updated after the given date. (optional)
     * @param  \DateTime|null $last_updated_to Filter shipments updated before the given date. (optional)
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $page_token Token retrieved from next_page_token or previous_page_token to get to next (optional)
     * @param  string|null $sort How the results should be sorted. Must follow \&quot;sort&#x3D;criterion,direction\&quot; format as described in Mirakl API Documentation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sT11'] to see the possible values for this operation
     *
     * @throws \cbdesk\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \cbdesk\Mirakl\Model\ST11Response200
     */
    public function sT11($associative_array)
    {
        list($response) = $this->sT11WithHttpInfo($associative_array);
        return $response;
    }

    /**
     * Operation sT11WithHttpInfo
     *
     * List shipments
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string[]|null $order_id Order id for filtering. This parameter can be supplied multiple times (order_id&#x3D;OR01-A&amp;order_id&#x3D;OR02-A...). (optional)
     * @param  string[]|null $shipment_state_code Shipment state code for filtering. This parameter can be supplied multiple times (shipment_state_code&#x3D;SHIPPING&amp;shipment_state_code&#x3D;SHIPPED...). (optional)
     * @param  string[]|null $shipment_customer_debit_state_code Shipment customer debit state code for filtering. This parameter can be supplied multiple times (shipment_customer_debit_state_code&#x3D;WAITING_TAX_CONFIRMATION&amp;shipment_customer_debit_state_code&#x3D;DEBIT_OK...). (optional)
     * @param  \DateTime|null $last_updated_from Filter shipments updated after the given date. (optional)
     * @param  \DateTime|null $last_updated_to Filter shipments updated before the given date. (optional)
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $page_token Token retrieved from next_page_token or previous_page_token to get to next (optional)
     * @param  string|null $sort How the results should be sorted. Must follow \&quot;sort&#x3D;criterion,direction\&quot; format as described in Mirakl API Documentation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sT11'] to see the possible values for this operation
     *
     * @throws \cbdesk\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \cbdesk\Mirakl\Model\ST11Response200, HTTP status code, HTTP response headers (array of strings)
     */
    public function sT11WithHttpInfo($associative_array)
    {
        $request = $this->sT11Request($associative_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\cbdesk\Mirakl\Model\ST11Response200',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\cbdesk\Mirakl\Model\ST11Response200',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cbdesk\Mirakl\Model\ST11Response200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation sT11Async
     *
     * List shipments
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string[]|null $order_id Order id for filtering. This parameter can be supplied multiple times (order_id&#x3D;OR01-A&amp;order_id&#x3D;OR02-A...). (optional)
     * @param  string[]|null $shipment_state_code Shipment state code for filtering. This parameter can be supplied multiple times (shipment_state_code&#x3D;SHIPPING&amp;shipment_state_code&#x3D;SHIPPED...). (optional)
     * @param  string[]|null $shipment_customer_debit_state_code Shipment customer debit state code for filtering. This parameter can be supplied multiple times (shipment_customer_debit_state_code&#x3D;WAITING_TAX_CONFIRMATION&amp;shipment_customer_debit_state_code&#x3D;DEBIT_OK...). (optional)
     * @param  \DateTime|null $last_updated_from Filter shipments updated after the given date. (optional)
     * @param  \DateTime|null $last_updated_to Filter shipments updated before the given date. (optional)
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $page_token Token retrieved from next_page_token or previous_page_token to get to next (optional)
     * @param  string|null $sort How the results should be sorted. Must follow \&quot;sort&#x3D;criterion,direction\&quot; format as described in Mirakl API Documentation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sT11'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sT11Async($associative_array)
    {
        return $this->sT11AsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sT11AsyncWithHttpInfo
     *
     * List shipments
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string[]|null $order_id Order id for filtering. This parameter can be supplied multiple times (order_id&#x3D;OR01-A&amp;order_id&#x3D;OR02-A...). (optional)
     * @param  string[]|null $shipment_state_code Shipment state code for filtering. This parameter can be supplied multiple times (shipment_state_code&#x3D;SHIPPING&amp;shipment_state_code&#x3D;SHIPPED...). (optional)
     * @param  string[]|null $shipment_customer_debit_state_code Shipment customer debit state code for filtering. This parameter can be supplied multiple times (shipment_customer_debit_state_code&#x3D;WAITING_TAX_CONFIRMATION&amp;shipment_customer_debit_state_code&#x3D;DEBIT_OK...). (optional)
     * @param  \DateTime|null $last_updated_from Filter shipments updated after the given date. (optional)
     * @param  \DateTime|null $last_updated_to Filter shipments updated before the given date. (optional)
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $page_token Token retrieved from next_page_token or previous_page_token to get to next (optional)
     * @param  string|null $sort How the results should be sorted. Must follow \&quot;sort&#x3D;criterion,direction\&quot; format as described in Mirakl API Documentation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sT11'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sT11AsyncWithHttpInfo($associative_array)
    {
        $returnType = '\cbdesk\Mirakl\Model\ST11Response200';
        $request = $this->sT11Request($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sT11'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string[]|null $order_id Order id for filtering. This parameter can be supplied multiple times (order_id&#x3D;OR01-A&amp;order_id&#x3D;OR02-A...). (optional)
     * @param  string[]|null $shipment_state_code Shipment state code for filtering. This parameter can be supplied multiple times (shipment_state_code&#x3D;SHIPPING&amp;shipment_state_code&#x3D;SHIPPED...). (optional)
     * @param  string[]|null $shipment_customer_debit_state_code Shipment customer debit state code for filtering. This parameter can be supplied multiple times (shipment_customer_debit_state_code&#x3D;WAITING_TAX_CONFIRMATION&amp;shipment_customer_debit_state_code&#x3D;DEBIT_OK...). (optional)
     * @param  \DateTime|null $last_updated_from Filter shipments updated after the given date. (optional)
     * @param  \DateTime|null $last_updated_to Filter shipments updated before the given date. (optional)
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $page_token Token retrieved from next_page_token or previous_page_token to get to next (optional)
     * @param  string|null $sort How the results should be sorted. Must follow \&quot;sort&#x3D;criterion,direction\&quot; format as described in Mirakl API Documentation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sT11'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sT11Request($associative_array)
    {
        // unbox the parameters from the associative array
        $order_id = array_key_exists('order_id', $associative_array) ? $associative_array['order_id'] : null;
        $shipment_state_code = array_key_exists('shipment_state_code', $associative_array) ? $associative_array['shipment_state_code'] : null;
        $shipment_customer_debit_state_code = array_key_exists('shipment_customer_debit_state_code', $associative_array) ? $associative_array['shipment_customer_debit_state_code'] : null;
        $last_updated_from = array_key_exists('last_updated_from', $associative_array) ? $associative_array['last_updated_from'] : null;
        $last_updated_to = array_key_exists('last_updated_to', $associative_array) ? $associative_array['last_updated_to'] : null;
        $shop_id = array_key_exists('shop_id', $associative_array) ? $associative_array['shop_id'] : null;
        $page_token = array_key_exists('page_token', $associative_array) ? $associative_array['page_token'] : null;
        $sort = array_key_exists('sort', $associative_array) ? $associative_array['sort'] : null;
        $contentType = $associative_array['contentType'] ?? self::contentTypes['sT11'][0];
        









        $resourcePath = '/api/shipments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_id,
            'order_id', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shipment_state_code,
            'shipment_state_code', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shipment_customer_debit_state_code,
            'shipment_customer_debit_state_code', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $last_updated_from,
            'last_updated_from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $last_updated_to,
            'last_updated_to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shop_id,
            'shop_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_token,
            'page_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sT12
     *
     * List items to ship
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string[]|null $order_id Order id for filtering. This parameter can be supplied multiple times (order_id&#x3D;OR01-A&amp;order_id&#x3D;OR02-A...). (optional)
     * @param  string[]|null $fulfillment_center_code Fulfillment center code for filtering. This parameter can be supplied multiple times (fulfillment_center_code&#x3D;ABC&amp;fulfillment_center_code&#x3D;DEF...). (optional)
     * @param  \DateTime|null $shipping_date_from Filter items that moved to shipping status after the given date. (optional)
     * @param  \DateTime|null $shipping_date_to Filter items that moved to shipping status before the given date. (optional)
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $page_token Token retrieved from next_page_token or previous_page_token to get to next (optional)
     * @param  string|null $sort How the results should be sorted. Must follow \&quot;sort&#x3D;criterion,direction\&quot; format as described in Mirakl API Documentation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sT12'] to see the possible values for this operation
     *
     * @throws \cbdesk\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \cbdesk\Mirakl\Model\ST12Response200
     */
    public function sT12($associative_array)
    {
        list($response) = $this->sT12WithHttpInfo($associative_array);
        return $response;
    }

    /**
     * Operation sT12WithHttpInfo
     *
     * List items to ship
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string[]|null $order_id Order id for filtering. This parameter can be supplied multiple times (order_id&#x3D;OR01-A&amp;order_id&#x3D;OR02-A...). (optional)
     * @param  string[]|null $fulfillment_center_code Fulfillment center code for filtering. This parameter can be supplied multiple times (fulfillment_center_code&#x3D;ABC&amp;fulfillment_center_code&#x3D;DEF...). (optional)
     * @param  \DateTime|null $shipping_date_from Filter items that moved to shipping status after the given date. (optional)
     * @param  \DateTime|null $shipping_date_to Filter items that moved to shipping status before the given date. (optional)
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $page_token Token retrieved from next_page_token or previous_page_token to get to next (optional)
     * @param  string|null $sort How the results should be sorted. Must follow \&quot;sort&#x3D;criterion,direction\&quot; format as described in Mirakl API Documentation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sT12'] to see the possible values for this operation
     *
     * @throws \cbdesk\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \cbdesk\Mirakl\Model\ST12Response200, HTTP status code, HTTP response headers (array of strings)
     */
    public function sT12WithHttpInfo($associative_array)
    {
        $request = $this->sT12Request($associative_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\cbdesk\Mirakl\Model\ST12Response200',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\cbdesk\Mirakl\Model\ST12Response200',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cbdesk\Mirakl\Model\ST12Response200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation sT12Async
     *
     * List items to ship
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string[]|null $order_id Order id for filtering. This parameter can be supplied multiple times (order_id&#x3D;OR01-A&amp;order_id&#x3D;OR02-A...). (optional)
     * @param  string[]|null $fulfillment_center_code Fulfillment center code for filtering. This parameter can be supplied multiple times (fulfillment_center_code&#x3D;ABC&amp;fulfillment_center_code&#x3D;DEF...). (optional)
     * @param  \DateTime|null $shipping_date_from Filter items that moved to shipping status after the given date. (optional)
     * @param  \DateTime|null $shipping_date_to Filter items that moved to shipping status before the given date. (optional)
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $page_token Token retrieved from next_page_token or previous_page_token to get to next (optional)
     * @param  string|null $sort How the results should be sorted. Must follow \&quot;sort&#x3D;criterion,direction\&quot; format as described in Mirakl API Documentation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sT12'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sT12Async($associative_array)
    {
        return $this->sT12AsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sT12AsyncWithHttpInfo
     *
     * List items to ship
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string[]|null $order_id Order id for filtering. This parameter can be supplied multiple times (order_id&#x3D;OR01-A&amp;order_id&#x3D;OR02-A...). (optional)
     * @param  string[]|null $fulfillment_center_code Fulfillment center code for filtering. This parameter can be supplied multiple times (fulfillment_center_code&#x3D;ABC&amp;fulfillment_center_code&#x3D;DEF...). (optional)
     * @param  \DateTime|null $shipping_date_from Filter items that moved to shipping status after the given date. (optional)
     * @param  \DateTime|null $shipping_date_to Filter items that moved to shipping status before the given date. (optional)
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $page_token Token retrieved from next_page_token or previous_page_token to get to next (optional)
     * @param  string|null $sort How the results should be sorted. Must follow \&quot;sort&#x3D;criterion,direction\&quot; format as described in Mirakl API Documentation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sT12'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sT12AsyncWithHttpInfo($associative_array)
    {
        $returnType = '\cbdesk\Mirakl\Model\ST12Response200';
        $request = $this->sT12Request($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sT12'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string[]|null $order_id Order id for filtering. This parameter can be supplied multiple times (order_id&#x3D;OR01-A&amp;order_id&#x3D;OR02-A...). (optional)
     * @param  string[]|null $fulfillment_center_code Fulfillment center code for filtering. This parameter can be supplied multiple times (fulfillment_center_code&#x3D;ABC&amp;fulfillment_center_code&#x3D;DEF...). (optional)
     * @param  \DateTime|null $shipping_date_from Filter items that moved to shipping status after the given date. (optional)
     * @param  \DateTime|null $shipping_date_to Filter items that moved to shipping status before the given date. (optional)
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $page_token Token retrieved from next_page_token or previous_page_token to get to next (optional)
     * @param  string|null $sort How the results should be sorted. Must follow \&quot;sort&#x3D;criterion,direction\&quot; format as described in Mirakl API Documentation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sT12'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sT12Request($associative_array)
    {
        // unbox the parameters from the associative array
        $order_id = array_key_exists('order_id', $associative_array) ? $associative_array['order_id'] : null;
        $fulfillment_center_code = array_key_exists('fulfillment_center_code', $associative_array) ? $associative_array['fulfillment_center_code'] : null;
        $shipping_date_from = array_key_exists('shipping_date_from', $associative_array) ? $associative_array['shipping_date_from'] : null;
        $shipping_date_to = array_key_exists('shipping_date_to', $associative_array) ? $associative_array['shipping_date_to'] : null;
        $shop_id = array_key_exists('shop_id', $associative_array) ? $associative_array['shop_id'] : null;
        $page_token = array_key_exists('page_token', $associative_array) ? $associative_array['page_token'] : null;
        $sort = array_key_exists('sort', $associative_array) ? $associative_array['sort'] : null;
        $contentType = $associative_array['contentType'] ?? self::contentTypes['sT12'][0];
        








        $resourcePath = '/api/shipments/items_to_ship';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_id,
            'order_id', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fulfillment_center_code,
            'fulfillment_center_code', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shipping_date_from,
            'shipping_date_from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shipping_date_to,
            'shipping_date_to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shop_id,
            'shop_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_token,
            'page_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sT23
     *
     * Update carrier tracking information for shipments
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\ST23Request|null $st23_request st23_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sT23'] to see the possible values for this operation
     *
     * @throws \cbdesk\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \cbdesk\Mirakl\Model\ST23Response200
     */
    public function sT23($associative_array)
    {
        list($response) = $this->sT23WithHttpInfo($associative_array);
        return $response;
    }

    /**
     * Operation sT23WithHttpInfo
     *
     * Update carrier tracking information for shipments
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\ST23Request|null $st23_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sT23'] to see the possible values for this operation
     *
     * @throws \cbdesk\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \cbdesk\Mirakl\Model\ST23Response200, HTTP status code, HTTP response headers (array of strings)
     */
    public function sT23WithHttpInfo($associative_array)
    {
        $request = $this->sT23Request($associative_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\cbdesk\Mirakl\Model\ST23Response200',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\cbdesk\Mirakl\Model\ST23Response200',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cbdesk\Mirakl\Model\ST23Response200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation sT23Async
     *
     * Update carrier tracking information for shipments
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\ST23Request|null $st23_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sT23'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sT23Async($associative_array)
    {
        return $this->sT23AsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sT23AsyncWithHttpInfo
     *
     * Update carrier tracking information for shipments
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\ST23Request|null $st23_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sT23'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sT23AsyncWithHttpInfo($associative_array)
    {
        $returnType = '\cbdesk\Mirakl\Model\ST23Response200';
        $request = $this->sT23Request($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sT23'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\ST23Request|null $st23_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sT23'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sT23Request($associative_array)
    {
        // unbox the parameters from the associative array
        $shop_id = array_key_exists('shop_id', $associative_array) ? $associative_array['shop_id'] : null;
        $st23_request = array_key_exists('st23_request', $associative_array) ? $associative_array['st23_request'] : null;
        $contentType = $associative_array['contentType'] ?? self::contentTypes['sT23'][0];
        



        $resourcePath = '/api/shipments/tracking';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shop_id,
            'shop_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($st23_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($st23_request));
            } else {
                $httpBody = $st23_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sT24
     *
     * Validate shipments as shipped
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\ST24Request|null $st24_request st24_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sT24'] to see the possible values for this operation
     *
     * @throws \cbdesk\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \cbdesk\Mirakl\Model\ST24Response200
     */
    public function sT24($associative_array)
    {
        list($response) = $this->sT24WithHttpInfo($associative_array);
        return $response;
    }

    /**
     * Operation sT24WithHttpInfo
     *
     * Validate shipments as shipped
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\ST24Request|null $st24_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sT24'] to see the possible values for this operation
     *
     * @throws \cbdesk\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \cbdesk\Mirakl\Model\ST24Response200, HTTP status code, HTTP response headers (array of strings)
     */
    public function sT24WithHttpInfo($associative_array)
    {
        $request = $this->sT24Request($associative_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\cbdesk\Mirakl\Model\ST24Response200',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\cbdesk\Mirakl\Model\ST24Response200',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cbdesk\Mirakl\Model\ST24Response200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation sT24Async
     *
     * Validate shipments as shipped
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\ST24Request|null $st24_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sT24'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sT24Async($associative_array)
    {
        return $this->sT24AsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sT24AsyncWithHttpInfo
     *
     * Validate shipments as shipped
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\ST24Request|null $st24_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sT24'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sT24AsyncWithHttpInfo($associative_array)
    {
        $returnType = '\cbdesk\Mirakl\Model\ST24Response200';
        $request = $this->sT24Request($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sT24'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\ST24Request|null $st24_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sT24'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sT24Request($associative_array)
    {
        // unbox the parameters from the associative array
        $shop_id = array_key_exists('shop_id', $associative_array) ? $associative_array['shop_id'] : null;
        $st24_request = array_key_exists('st24_request', $associative_array) ? $associative_array['st24_request'] : null;
        $contentType = $associative_array['contentType'] ?? self::contentTypes['sT24'][0];
        



        $resourcePath = '/api/shipments/ship';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shop_id,
            'shop_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($st24_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($st24_request));
            } else {
                $httpBody = $st24_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sT26
     *
     * Validate shipments as ready to pick up
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\ST26Request|null $st26_request st26_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sT26'] to see the possible values for this operation
     *
     * @throws \cbdesk\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \cbdesk\Mirakl\Model\ST26Response200
     */
    public function sT26($associative_array)
    {
        list($response) = $this->sT26WithHttpInfo($associative_array);
        return $response;
    }

    /**
     * Operation sT26WithHttpInfo
     *
     * Validate shipments as ready to pick up
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\ST26Request|null $st26_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sT26'] to see the possible values for this operation
     *
     * @throws \cbdesk\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \cbdesk\Mirakl\Model\ST26Response200, HTTP status code, HTTP response headers (array of strings)
     */
    public function sT26WithHttpInfo($associative_array)
    {
        $request = $this->sT26Request($associative_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\cbdesk\Mirakl\Model\ST26Response200',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\cbdesk\Mirakl\Model\ST26Response200',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cbdesk\Mirakl\Model\ST26Response200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation sT26Async
     *
     * Validate shipments as ready to pick up
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\ST26Request|null $st26_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sT26'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sT26Async($associative_array)
    {
        return $this->sT26AsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sT26AsyncWithHttpInfo
     *
     * Validate shipments as ready to pick up
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\ST26Request|null $st26_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sT26'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sT26AsyncWithHttpInfo($associative_array)
    {
        $returnType = '\cbdesk\Mirakl\Model\ST26Response200';
        $request = $this->sT26Request($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sT26'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\ST26Request|null $st26_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sT26'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sT26Request($associative_array)
    {
        // unbox the parameters from the associative array
        $shop_id = array_key_exists('shop_id', $associative_array) ? $associative_array['shop_id'] : null;
        $st26_request = array_key_exists('st26_request', $associative_array) ? $associative_array['st26_request'] : null;
        $contentType = $associative_array['contentType'] ?? self::contentTypes['sT26'][0];
        



        $resourcePath = '/api/shipments/ready_for_pick_up';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shop_id,
            'shop_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($st26_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($st26_request));
            } else {
                $httpBody = $st26_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sT31
     *
     * Update shipment additional information
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\ST31Request|null $st31_request st31_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sT31'] to see the possible values for this operation
     *
     * @throws \cbdesk\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \cbdesk\Mirakl\Model\ST31Response200
     */
    public function sT31($associative_array)
    {
        list($response) = $this->sT31WithHttpInfo($associative_array);
        return $response;
    }

    /**
     * Operation sT31WithHttpInfo
     *
     * Update shipment additional information
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\ST31Request|null $st31_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sT31'] to see the possible values for this operation
     *
     * @throws \cbdesk\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \cbdesk\Mirakl\Model\ST31Response200, HTTP status code, HTTP response headers (array of strings)
     */
    public function sT31WithHttpInfo($associative_array)
    {
        $request = $this->sT31Request($associative_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\cbdesk\Mirakl\Model\ST31Response200',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\cbdesk\Mirakl\Model\ST31Response200',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cbdesk\Mirakl\Model\ST31Response200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation sT31Async
     *
     * Update shipment additional information
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\ST31Request|null $st31_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sT31'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sT31Async($associative_array)
    {
        return $this->sT31AsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sT31AsyncWithHttpInfo
     *
     * Update shipment additional information
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\ST31Request|null $st31_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sT31'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sT31AsyncWithHttpInfo($associative_array)
    {
        $returnType = '\cbdesk\Mirakl\Model\ST31Response200';
        $request = $this->sT31Request($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sT31'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\ST31Request|null $st31_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sT31'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sT31Request($associative_array)
    {
        // unbox the parameters from the associative array
        $shop_id = array_key_exists('shop_id', $associative_array) ? $associative_array['shop_id'] : null;
        $st31_request = array_key_exists('st31_request', $associative_array) ? $associative_array['st31_request'] : null;
        $contentType = $associative_array['contentType'] ?? self::contentTypes['sT31'][0];
        



        $resourcePath = '/api/shipments/additional_information';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shop_id,
            'shop_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($st31_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($st31_request));
            } else {
                $httpBody = $st31_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        if ($this->config->getCertFile()) {
            $options[RequestOptions::CERT] = $this->config->getCertFile();
        }

        if ($this->config->getKeyFile()) {
            $options[RequestOptions::SSL_KEY] = $this->config->getKeyFile();
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
