<?php
/**
 * OrdersApi
 * PHP version 8.1
 *
 * @category Class
 * @package  cbdesk\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mirakl Marketplace APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest-release
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace cbdesk\Mirakl\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use cbdesk\Mirakl\ApiException;
use cbdesk\Mirakl\Configuration;
use cbdesk\Mirakl\FormDataProcessor;
use cbdesk\Mirakl\HeaderSelector;
use cbdesk\Mirakl\ObjectSerializer;

/**
 * OrdersApi Class Doc Comment
 *
 * @category Class
 * @package  cbdesk\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OrdersApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'oR04' => [
            'application/json',
        ],
        'oR07' => [
            'application/json',
        ],
        'oR11' => [
            'application/json',
        ],
        'oR13' => [
            'application/json',
        ],
        'oR14' => [
            'application/json',
        ],
        'oR21' => [
            'application/json',
        ],
        'oR23' => [
            'application/json',
        ],
        'oR24' => [
            'application/json',
        ],
        'oR28' => [
            'application/json',
        ],
        'oR29' => [
            'application/json',
        ],
        'oR30' => [
            'application/json',
        ],
        'oR31' => [
            'application/json',
        ],
        'oR32' => [
            'application/json',
        ],
        'oR51' => [
            'application/json',
        ],
        'oR72' => [
            'application/json',
        ],
        'oR73' => [
            'application/json',
        ],
        'oR75' => [
            'application/json',
        ],
        'oR76' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation oR04
     *
     * Patch update orders
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\OR04Request|null $or04_request or04_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR04'] to see the possible values for this operation
     *
     * @throws \cbdesk\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \cbdesk\Mirakl\Model\OR04Response200
     */
    public function oR04($associative_array)
    {
        list($response) = $this->oR04WithHttpInfo($associative_array);
        return $response;
    }

    /**
     * Operation oR04WithHttpInfo
     *
     * Patch update orders
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\OR04Request|null $or04_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR04'] to see the possible values for this operation
     *
     * @throws \cbdesk\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \cbdesk\Mirakl\Model\OR04Response200, HTTP status code, HTTP response headers (array of strings)
     */
    public function oR04WithHttpInfo($associative_array)
    {
        $request = $this->oR04Request($associative_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\cbdesk\Mirakl\Model\OR04Response200',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\cbdesk\Mirakl\Model\OR04Response200',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cbdesk\Mirakl\Model\OR04Response200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation oR04Async
     *
     * Patch update orders
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\OR04Request|null $or04_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR04'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oR04Async($associative_array)
    {
        return $this->oR04AsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation oR04AsyncWithHttpInfo
     *
     * Patch update orders
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\OR04Request|null $or04_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR04'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oR04AsyncWithHttpInfo($associative_array)
    {
        $returnType = '\cbdesk\Mirakl\Model\OR04Response200';
        $request = $this->oR04Request($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'oR04'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\OR04Request|null $or04_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR04'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function oR04Request($associative_array)
    {
        // unbox the parameters from the associative array
        $shop_id = array_key_exists('shop_id', $associative_array) ? $associative_array['shop_id'] : null;
        $or04_request = array_key_exists('or04_request', $associative_array) ? $associative_array['or04_request'] : null;
        $contentType = $associative_array['contentType'] ?? self::contentTypes['oR04'][0];
        



        $resourcePath = '/api/orders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shop_id,
            'shop_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($or04_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($or04_request));
            } else {
                $httpBody = $or04_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation oR07
     *
     * Update order line shipping origin
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\OR07Request|null $or07_request or07_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR07'] to see the possible values for this operation
     *
     * @throws \cbdesk\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \cbdesk\Mirakl\Model\OR07Response200
     */
    public function oR07($associative_array)
    {
        list($response) = $this->oR07WithHttpInfo($associative_array);
        return $response;
    }

    /**
     * Operation oR07WithHttpInfo
     *
     * Update order line shipping origin
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\OR07Request|null $or07_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR07'] to see the possible values for this operation
     *
     * @throws \cbdesk\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \cbdesk\Mirakl\Model\OR07Response200, HTTP status code, HTTP response headers (array of strings)
     */
    public function oR07WithHttpInfo($associative_array)
    {
        $request = $this->oR07Request($associative_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\cbdesk\Mirakl\Model\OR07Response200',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\cbdesk\Mirakl\Model\OR07Response200',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cbdesk\Mirakl\Model\OR07Response200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation oR07Async
     *
     * Update order line shipping origin
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\OR07Request|null $or07_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR07'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oR07Async($associative_array)
    {
        return $this->oR07AsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation oR07AsyncWithHttpInfo
     *
     * Update order line shipping origin
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\OR07Request|null $or07_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR07'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oR07AsyncWithHttpInfo($associative_array)
    {
        $returnType = '\cbdesk\Mirakl\Model\OR07Response200';
        $request = $this->oR07Request($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'oR07'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\OR07Request|null $or07_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR07'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function oR07Request($associative_array)
    {
        // unbox the parameters from the associative array
        $shop_id = array_key_exists('shop_id', $associative_array) ? $associative_array['shop_id'] : null;
        $or07_request = array_key_exists('or07_request', $associative_array) ? $associative_array['or07_request'] : null;
        $contentType = $associative_array['contentType'] ?? self::contentTypes['oR07'][0];
        



        $resourcePath = '/api/orders/shipping_from';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shop_id,
            'shop_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($or07_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($or07_request));
            } else {
                $httpBody = $or07_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation oR11
     *
     * List orders with pagination
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string|null $order_ids A comma-separated list of order&#39;s identifiers (optional)
     * @param  string|null $order_references_for_customer A comma-separated list of order references for customer (optional)
     * @param  string|null $order_references_for_seller A comma-separated list of order references for seller (optional)
     * @param  string|null $order_state_codes A comma-separated list of order state&#39;s codes (optional)
     * @param  string|null $channel_codes A comma-separated list of channel codes (optional)
     * @param  bool|null $only_null_channel Return only orders without channel. If &lt;code&gt;true&lt;/code&gt;, ignore the &lt;code&gt;channel_codes&lt;/code&gt; (optional, default to false)
     * @param  \DateTime|null $start_date Start creation date for filtering (optional)
     * @param  \DateTime|null $end_date End creation date for filtering (optional)
     * @param  \DateTime|null $start_update_date Start update date for filtering. Mirakl will subtract a time delta to ensure no orders are missed due to network and/or software latency. (optional)
     * @param  \DateTime|null $end_update_date End update date for filtering (optional)
     * @param  bool|null $customer_debited Order paid by customer (optional)
     * @param  string|null $payment_workflow Payment workflow of an order (optional)
     * @param  bool|null $has_incident If &lt;code&gt;true&lt;/code&gt; returns only orders with incidents in progress, if &lt;code&gt;false&lt;/code&gt; returns orders without incidents in progress. If not provided, all orders with or without incident will be returned (optional)
     * @param  string[]|null $fulfillment_center_code Code of the fulfillment center (optional)
     * @param  string|null $order_tax_mode Please note: If the taxes are not specified, the prices with mode TAX_EXCLUDED and with mode TAX_INCLUDED will return the same amounts.&lt;br&gt;Possible values:&lt;ul&gt;&lt;li&gt;&lt;code&gt;TAX_EXCLUDED&lt;/code&gt;: the price fields (price, unit price, shipping price, cancellation amount, refund amount and order total prices) do not include taxes.&lt;/li&gt;&lt;li&gt;&lt;code&gt;TAX_INCLUDED&lt;/code&gt;: the price fields include the tax amount. &lt;/li&gt;&lt;/ul&gt;&lt;li&gt;If this query parameter is not specified, the default order tax mode of the platform is used.&lt;/li&gt; (optional)
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $locale &amp;lt;ISO-639&amp;gt;_&amp;lt;ISO-3166&amp;gt; (\&quot;en_US\&quot;) or &amp;lt;ISO-639&amp;gt; (\&quot;en\&quot;) locale for internationalized data translation. The APIs only accept locales that are equivalent to the languages activated in the back-office. (optional)
     * @param  int|null $max Maximum number of items returned per page (optional)
     * @param  int|null $offset Index of the first item (among all the results) in the returned page (optional)
     * @param  string|null $sort How the results should be sorted (optional)
     * @param  string|null $order Sort direction (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR11'] to see the possible values for this operation
     *
     * @throws \cbdesk\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \cbdesk\Mirakl\Model\OR11Response200
     */
    public function oR11($associative_array)
    {
        list($response) = $this->oR11WithHttpInfo($associative_array);
        return $response;
    }

    /**
     * Operation oR11WithHttpInfo
     *
     * List orders with pagination
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string|null $order_ids A comma-separated list of order&#39;s identifiers (optional)
     * @param  string|null $order_references_for_customer A comma-separated list of order references for customer (optional)
     * @param  string|null $order_references_for_seller A comma-separated list of order references for seller (optional)
     * @param  string|null $order_state_codes A comma-separated list of order state&#39;s codes (optional)
     * @param  string|null $channel_codes A comma-separated list of channel codes (optional)
     * @param  bool|null $only_null_channel Return only orders without channel. If &lt;code&gt;true&lt;/code&gt;, ignore the &lt;code&gt;channel_codes&lt;/code&gt; (optional, default to false)
     * @param  \DateTime|null $start_date Start creation date for filtering (optional)
     * @param  \DateTime|null $end_date End creation date for filtering (optional)
     * @param  \DateTime|null $start_update_date Start update date for filtering. Mirakl will subtract a time delta to ensure no orders are missed due to network and/or software latency. (optional)
     * @param  \DateTime|null $end_update_date End update date for filtering (optional)
     * @param  bool|null $customer_debited Order paid by customer (optional)
     * @param  string|null $payment_workflow Payment workflow of an order (optional)
     * @param  bool|null $has_incident If &lt;code&gt;true&lt;/code&gt; returns only orders with incidents in progress, if &lt;code&gt;false&lt;/code&gt; returns orders without incidents in progress. If not provided, all orders with or without incident will be returned (optional)
     * @param  string[]|null $fulfillment_center_code Code of the fulfillment center (optional)
     * @param  string|null $order_tax_mode Please note: If the taxes are not specified, the prices with mode TAX_EXCLUDED and with mode TAX_INCLUDED will return the same amounts.&lt;br&gt;Possible values:&lt;ul&gt;&lt;li&gt;&lt;code&gt;TAX_EXCLUDED&lt;/code&gt;: the price fields (price, unit price, shipping price, cancellation amount, refund amount and order total prices) do not include taxes.&lt;/li&gt;&lt;li&gt;&lt;code&gt;TAX_INCLUDED&lt;/code&gt;: the price fields include the tax amount. &lt;/li&gt;&lt;/ul&gt;&lt;li&gt;If this query parameter is not specified, the default order tax mode of the platform is used.&lt;/li&gt; (optional)
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $locale &amp;lt;ISO-639&amp;gt;_&amp;lt;ISO-3166&amp;gt; (\&quot;en_US\&quot;) or &amp;lt;ISO-639&amp;gt; (\&quot;en\&quot;) locale for internationalized data translation. The APIs only accept locales that are equivalent to the languages activated in the back-office. (optional)
     * @param  int|null $max Maximum number of items returned per page (optional)
     * @param  int|null $offset Index of the first item (among all the results) in the returned page (optional)
     * @param  string|null $sort How the results should be sorted (optional)
     * @param  string|null $order Sort direction (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR11'] to see the possible values for this operation
     *
     * @throws \cbdesk\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \cbdesk\Mirakl\Model\OR11Response200, HTTP status code, HTTP response headers (array of strings)
     */
    public function oR11WithHttpInfo($associative_array)
    {
        $request = $this->oR11Request($associative_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\cbdesk\Mirakl\Model\OR11Response200',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\cbdesk\Mirakl\Model\OR11Response200',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cbdesk\Mirakl\Model\OR11Response200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation oR11Async
     *
     * List orders with pagination
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string|null $order_ids A comma-separated list of order&#39;s identifiers (optional)
     * @param  string|null $order_references_for_customer A comma-separated list of order references for customer (optional)
     * @param  string|null $order_references_for_seller A comma-separated list of order references for seller (optional)
     * @param  string|null $order_state_codes A comma-separated list of order state&#39;s codes (optional)
     * @param  string|null $channel_codes A comma-separated list of channel codes (optional)
     * @param  bool|null $only_null_channel Return only orders without channel. If &lt;code&gt;true&lt;/code&gt;, ignore the &lt;code&gt;channel_codes&lt;/code&gt; (optional, default to false)
     * @param  \DateTime|null $start_date Start creation date for filtering (optional)
     * @param  \DateTime|null $end_date End creation date for filtering (optional)
     * @param  \DateTime|null $start_update_date Start update date for filtering. Mirakl will subtract a time delta to ensure no orders are missed due to network and/or software latency. (optional)
     * @param  \DateTime|null $end_update_date End update date for filtering (optional)
     * @param  bool|null $customer_debited Order paid by customer (optional)
     * @param  string|null $payment_workflow Payment workflow of an order (optional)
     * @param  bool|null $has_incident If &lt;code&gt;true&lt;/code&gt; returns only orders with incidents in progress, if &lt;code&gt;false&lt;/code&gt; returns orders without incidents in progress. If not provided, all orders with or without incident will be returned (optional)
     * @param  string[]|null $fulfillment_center_code Code of the fulfillment center (optional)
     * @param  string|null $order_tax_mode Please note: If the taxes are not specified, the prices with mode TAX_EXCLUDED and with mode TAX_INCLUDED will return the same amounts.&lt;br&gt;Possible values:&lt;ul&gt;&lt;li&gt;&lt;code&gt;TAX_EXCLUDED&lt;/code&gt;: the price fields (price, unit price, shipping price, cancellation amount, refund amount and order total prices) do not include taxes.&lt;/li&gt;&lt;li&gt;&lt;code&gt;TAX_INCLUDED&lt;/code&gt;: the price fields include the tax amount. &lt;/li&gt;&lt;/ul&gt;&lt;li&gt;If this query parameter is not specified, the default order tax mode of the platform is used.&lt;/li&gt; (optional)
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $locale &amp;lt;ISO-639&amp;gt;_&amp;lt;ISO-3166&amp;gt; (\&quot;en_US\&quot;) or &amp;lt;ISO-639&amp;gt; (\&quot;en\&quot;) locale for internationalized data translation. The APIs only accept locales that are equivalent to the languages activated in the back-office. (optional)
     * @param  int|null $max Maximum number of items returned per page (optional)
     * @param  int|null $offset Index of the first item (among all the results) in the returned page (optional)
     * @param  string|null $sort How the results should be sorted (optional)
     * @param  string|null $order Sort direction (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR11'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oR11Async($associative_array)
    {
        return $this->oR11AsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation oR11AsyncWithHttpInfo
     *
     * List orders with pagination
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string|null $order_ids A comma-separated list of order&#39;s identifiers (optional)
     * @param  string|null $order_references_for_customer A comma-separated list of order references for customer (optional)
     * @param  string|null $order_references_for_seller A comma-separated list of order references for seller (optional)
     * @param  string|null $order_state_codes A comma-separated list of order state&#39;s codes (optional)
     * @param  string|null $channel_codes A comma-separated list of channel codes (optional)
     * @param  bool|null $only_null_channel Return only orders without channel. If &lt;code&gt;true&lt;/code&gt;, ignore the &lt;code&gt;channel_codes&lt;/code&gt; (optional, default to false)
     * @param  \DateTime|null $start_date Start creation date for filtering (optional)
     * @param  \DateTime|null $end_date End creation date for filtering (optional)
     * @param  \DateTime|null $start_update_date Start update date for filtering. Mirakl will subtract a time delta to ensure no orders are missed due to network and/or software latency. (optional)
     * @param  \DateTime|null $end_update_date End update date for filtering (optional)
     * @param  bool|null $customer_debited Order paid by customer (optional)
     * @param  string|null $payment_workflow Payment workflow of an order (optional)
     * @param  bool|null $has_incident If &lt;code&gt;true&lt;/code&gt; returns only orders with incidents in progress, if &lt;code&gt;false&lt;/code&gt; returns orders without incidents in progress. If not provided, all orders with or without incident will be returned (optional)
     * @param  string[]|null $fulfillment_center_code Code of the fulfillment center (optional)
     * @param  string|null $order_tax_mode Please note: If the taxes are not specified, the prices with mode TAX_EXCLUDED and with mode TAX_INCLUDED will return the same amounts.&lt;br&gt;Possible values:&lt;ul&gt;&lt;li&gt;&lt;code&gt;TAX_EXCLUDED&lt;/code&gt;: the price fields (price, unit price, shipping price, cancellation amount, refund amount and order total prices) do not include taxes.&lt;/li&gt;&lt;li&gt;&lt;code&gt;TAX_INCLUDED&lt;/code&gt;: the price fields include the tax amount. &lt;/li&gt;&lt;/ul&gt;&lt;li&gt;If this query parameter is not specified, the default order tax mode of the platform is used.&lt;/li&gt; (optional)
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $locale &amp;lt;ISO-639&amp;gt;_&amp;lt;ISO-3166&amp;gt; (\&quot;en_US\&quot;) or &amp;lt;ISO-639&amp;gt; (\&quot;en\&quot;) locale for internationalized data translation. The APIs only accept locales that are equivalent to the languages activated in the back-office. (optional)
     * @param  int|null $max Maximum number of items returned per page (optional)
     * @param  int|null $offset Index of the first item (among all the results) in the returned page (optional)
     * @param  string|null $sort How the results should be sorted (optional)
     * @param  string|null $order Sort direction (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR11'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oR11AsyncWithHttpInfo($associative_array)
    {
        $returnType = '\cbdesk\Mirakl\Model\OR11Response200';
        $request = $this->oR11Request($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'oR11'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string|null $order_ids A comma-separated list of order&#39;s identifiers (optional)
     * @param  string|null $order_references_for_customer A comma-separated list of order references for customer (optional)
     * @param  string|null $order_references_for_seller A comma-separated list of order references for seller (optional)
     * @param  string|null $order_state_codes A comma-separated list of order state&#39;s codes (optional)
     * @param  string|null $channel_codes A comma-separated list of channel codes (optional)
     * @param  bool|null $only_null_channel Return only orders without channel. If &lt;code&gt;true&lt;/code&gt;, ignore the &lt;code&gt;channel_codes&lt;/code&gt; (optional, default to false)
     * @param  \DateTime|null $start_date Start creation date for filtering (optional)
     * @param  \DateTime|null $end_date End creation date for filtering (optional)
     * @param  \DateTime|null $start_update_date Start update date for filtering. Mirakl will subtract a time delta to ensure no orders are missed due to network and/or software latency. (optional)
     * @param  \DateTime|null $end_update_date End update date for filtering (optional)
     * @param  bool|null $customer_debited Order paid by customer (optional)
     * @param  string|null $payment_workflow Payment workflow of an order (optional)
     * @param  bool|null $has_incident If &lt;code&gt;true&lt;/code&gt; returns only orders with incidents in progress, if &lt;code&gt;false&lt;/code&gt; returns orders without incidents in progress. If not provided, all orders with or without incident will be returned (optional)
     * @param  string[]|null $fulfillment_center_code Code of the fulfillment center (optional)
     * @param  string|null $order_tax_mode Please note: If the taxes are not specified, the prices with mode TAX_EXCLUDED and with mode TAX_INCLUDED will return the same amounts.&lt;br&gt;Possible values:&lt;ul&gt;&lt;li&gt;&lt;code&gt;TAX_EXCLUDED&lt;/code&gt;: the price fields (price, unit price, shipping price, cancellation amount, refund amount and order total prices) do not include taxes.&lt;/li&gt;&lt;li&gt;&lt;code&gt;TAX_INCLUDED&lt;/code&gt;: the price fields include the tax amount. &lt;/li&gt;&lt;/ul&gt;&lt;li&gt;If this query parameter is not specified, the default order tax mode of the platform is used.&lt;/li&gt; (optional)
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $locale &amp;lt;ISO-639&amp;gt;_&amp;lt;ISO-3166&amp;gt; (\&quot;en_US\&quot;) or &amp;lt;ISO-639&amp;gt; (\&quot;en\&quot;) locale for internationalized data translation. The APIs only accept locales that are equivalent to the languages activated in the back-office. (optional)
     * @param  int|null $max Maximum number of items returned per page (optional)
     * @param  int|null $offset Index of the first item (among all the results) in the returned page (optional)
     * @param  string|null $sort How the results should be sorted (optional)
     * @param  string|null $order Sort direction (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR11'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function oR11Request($associative_array)
    {
        // unbox the parameters from the associative array
        $order_ids = array_key_exists('order_ids', $associative_array) ? $associative_array['order_ids'] : null;
        $order_references_for_customer = array_key_exists('order_references_for_customer', $associative_array) ? $associative_array['order_references_for_customer'] : null;
        $order_references_for_seller = array_key_exists('order_references_for_seller', $associative_array) ? $associative_array['order_references_for_seller'] : null;
        $order_state_codes = array_key_exists('order_state_codes', $associative_array) ? $associative_array['order_state_codes'] : null;
        $channel_codes = array_key_exists('channel_codes', $associative_array) ? $associative_array['channel_codes'] : null;
        $only_null_channel = array_key_exists('only_null_channel', $associative_array) ? $associative_array['only_null_channel'] : false;
        $start_date = array_key_exists('start_date', $associative_array) ? $associative_array['start_date'] : null;
        $end_date = array_key_exists('end_date', $associative_array) ? $associative_array['end_date'] : null;
        $start_update_date = array_key_exists('start_update_date', $associative_array) ? $associative_array['start_update_date'] : null;
        $end_update_date = array_key_exists('end_update_date', $associative_array) ? $associative_array['end_update_date'] : null;
        $customer_debited = array_key_exists('customer_debited', $associative_array) ? $associative_array['customer_debited'] : null;
        $payment_workflow = array_key_exists('payment_workflow', $associative_array) ? $associative_array['payment_workflow'] : null;
        $has_incident = array_key_exists('has_incident', $associative_array) ? $associative_array['has_incident'] : null;
        $fulfillment_center_code = array_key_exists('fulfillment_center_code', $associative_array) ? $associative_array['fulfillment_center_code'] : null;
        $order_tax_mode = array_key_exists('order_tax_mode', $associative_array) ? $associative_array['order_tax_mode'] : null;
        $shop_id = array_key_exists('shop_id', $associative_array) ? $associative_array['shop_id'] : null;
        $locale = array_key_exists('locale', $associative_array) ? $associative_array['locale'] : null;
        $max = array_key_exists('max', $associative_array) ? $associative_array['max'] : null;
        $offset = array_key_exists('offset', $associative_array) ? $associative_array['offset'] : null;
        $sort = array_key_exists('sort', $associative_array) ? $associative_array['sort'] : null;
        $order = array_key_exists('order', $associative_array) ? $associative_array['order'] : null;
        $contentType = $associative_array['contentType'] ?? self::contentTypes['oR11'][0];
        
        
        
        

        








        








        $resourcePath = '/api/orders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_ids,
            'order_ids', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_references_for_customer,
            'order_references_for_customer', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_references_for_seller,
            'order_references_for_seller', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_state_codes,
            'order_state_codes', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $channel_codes,
            'channel_codes', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $only_null_channel,
            'only_null_channel', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_date,
            'start_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end_date,
            'end_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_update_date,
            'start_update_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end_update_date,
            'end_update_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $customer_debited,
            'customer_debited', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $payment_workflow,
            'payment_workflow', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $has_incident,
            'has_incident', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fulfillment_center_code,
            'fulfillment_center_code', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_tax_mode,
            'order_tax_mode', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shop_id,
            'shop_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $locale,
            'locale', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max,
            'max', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order,
            'order', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation oR13
     *
     * Export orders asynchronously
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $locale &amp;lt;ISO-639&amp;gt;_&amp;lt;ISO-3166&amp;gt; (\&quot;en_US\&quot;) or &amp;lt;ISO-639&amp;gt; (\&quot;en\&quot;) locale for internationalized data translation. The APIs only accept locales that are equivalent to the languages activated in the back-office. (optional)
     * @param  \cbdesk\Mirakl\Model\OR13Request|null $or13_request or13_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR13'] to see the possible values for this operation
     *
     * @throws \cbdesk\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \cbdesk\Mirakl\Model\OR13Response200
     */
    public function oR13($associative_array)
    {
        list($response) = $this->oR13WithHttpInfo($associative_array);
        return $response;
    }

    /**
     * Operation oR13WithHttpInfo
     *
     * Export orders asynchronously
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $locale &amp;lt;ISO-639&amp;gt;_&amp;lt;ISO-3166&amp;gt; (\&quot;en_US\&quot;) or &amp;lt;ISO-639&amp;gt; (\&quot;en\&quot;) locale for internationalized data translation. The APIs only accept locales that are equivalent to the languages activated in the back-office. (optional)
     * @param  \cbdesk\Mirakl\Model\OR13Request|null $or13_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR13'] to see the possible values for this operation
     *
     * @throws \cbdesk\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \cbdesk\Mirakl\Model\OR13Response200, HTTP status code, HTTP response headers (array of strings)
     */
    public function oR13WithHttpInfo($associative_array)
    {
        $request = $this->oR13Request($associative_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\cbdesk\Mirakl\Model\OR13Response200',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\cbdesk\Mirakl\Model\OR13Response200',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cbdesk\Mirakl\Model\OR13Response200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation oR13Async
     *
     * Export orders asynchronously
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $locale &amp;lt;ISO-639&amp;gt;_&amp;lt;ISO-3166&amp;gt; (\&quot;en_US\&quot;) or &amp;lt;ISO-639&amp;gt; (\&quot;en\&quot;) locale for internationalized data translation. The APIs only accept locales that are equivalent to the languages activated in the back-office. (optional)
     * @param  \cbdesk\Mirakl\Model\OR13Request|null $or13_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR13'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oR13Async($associative_array)
    {
        return $this->oR13AsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation oR13AsyncWithHttpInfo
     *
     * Export orders asynchronously
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $locale &amp;lt;ISO-639&amp;gt;_&amp;lt;ISO-3166&amp;gt; (\&quot;en_US\&quot;) or &amp;lt;ISO-639&amp;gt; (\&quot;en\&quot;) locale for internationalized data translation. The APIs only accept locales that are equivalent to the languages activated in the back-office. (optional)
     * @param  \cbdesk\Mirakl\Model\OR13Request|null $or13_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR13'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oR13AsyncWithHttpInfo($associative_array)
    {
        $returnType = '\cbdesk\Mirakl\Model\OR13Response200';
        $request = $this->oR13Request($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'oR13'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $locale &amp;lt;ISO-639&amp;gt;_&amp;lt;ISO-3166&amp;gt; (\&quot;en_US\&quot;) or &amp;lt;ISO-639&amp;gt; (\&quot;en\&quot;) locale for internationalized data translation. The APIs only accept locales that are equivalent to the languages activated in the back-office. (optional)
     * @param  \cbdesk\Mirakl\Model\OR13Request|null $or13_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR13'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function oR13Request($associative_array)
    {
        // unbox the parameters from the associative array
        $shop_id = array_key_exists('shop_id', $associative_array) ? $associative_array['shop_id'] : null;
        $locale = array_key_exists('locale', $associative_array) ? $associative_array['locale'] : null;
        $or13_request = array_key_exists('or13_request', $associative_array) ? $associative_array['or13_request'] : null;
        $contentType = $associative_array['contentType'] ?? self::contentTypes['oR13'][0];
        




        $resourcePath = '/api/orders/async-export';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shop_id,
            'shop_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $locale,
            'locale', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($or13_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($or13_request));
            } else {
                $httpBody = $or13_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation oR14
     *
     * Get the status of an asynchronous order export.
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $tracking_id Id of the previously created asynchronous order export (required)
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR14'] to see the possible values for this operation
     *
     * @throws \cbdesk\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \cbdesk\Mirakl\Model\OR14Response200
     */
    public function oR14($associative_array)
    {
        list($response) = $this->oR14WithHttpInfo($associative_array);
        return $response;
    }

    /**
     * Operation oR14WithHttpInfo
     *
     * Get the status of an asynchronous order export.
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $tracking_id Id of the previously created asynchronous order export (required)
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR14'] to see the possible values for this operation
     *
     * @throws \cbdesk\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \cbdesk\Mirakl\Model\OR14Response200, HTTP status code, HTTP response headers (array of strings)
     */
    public function oR14WithHttpInfo($associative_array)
    {
        $request = $this->oR14Request($associative_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\cbdesk\Mirakl\Model\OR14Response200',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\cbdesk\Mirakl\Model\OR14Response200',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cbdesk\Mirakl\Model\OR14Response200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation oR14Async
     *
     * Get the status of an asynchronous order export.
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $tracking_id Id of the previously created asynchronous order export (required)
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR14'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oR14Async($associative_array)
    {
        return $this->oR14AsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation oR14AsyncWithHttpInfo
     *
     * Get the status of an asynchronous order export.
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $tracking_id Id of the previously created asynchronous order export (required)
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR14'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oR14AsyncWithHttpInfo($associative_array)
    {
        $returnType = '\cbdesk\Mirakl\Model\OR14Response200';
        $request = $this->oR14Request($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'oR14'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $tracking_id Id of the previously created asynchronous order export (required)
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR14'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function oR14Request($associative_array)
    {
        // unbox the parameters from the associative array
        $tracking_id = array_key_exists('tracking_id', $associative_array) ? $associative_array['tracking_id'] : null;
        $shop_id = array_key_exists('shop_id', $associative_array) ? $associative_array['shop_id'] : null;
        $contentType = $associative_array['contentType'] ?? self::contentTypes['oR14'][0];
        
        // verify the required parameter 'tracking_id' is set
        if ($tracking_id === null || (is_array($tracking_id) && count($tracking_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tracking_id when calling oR14'
            );
        }



        $resourcePath = '/api/orders/async-export/status/{tracking_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shop_id,
            'shop_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($tracking_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tracking_id' . '}',
                ObjectSerializer::toPathValue($tracking_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation oR21
     *
     * Accept or refuse order lines
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $order_id Order&#39;s identifier (required)
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\OR21Request|null $or21_request or21_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR21'] to see the possible values for this operation
     *
     * @throws \cbdesk\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function oR21($associative_array)
    {
        $this->oR21WithHttpInfo($associative_array);
    }

    /**
     * Operation oR21WithHttpInfo
     *
     * Accept or refuse order lines
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $order_id Order&#39;s identifier (required)
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\OR21Request|null $or21_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR21'] to see the possible values for this operation
     *
     * @throws \cbdesk\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function oR21WithHttpInfo($associative_array)
    {
        $request = $this->oR21Request($associative_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation oR21Async
     *
     * Accept or refuse order lines
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $order_id Order&#39;s identifier (required)
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\OR21Request|null $or21_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR21'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oR21Async($associative_array)
    {
        return $this->oR21AsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation oR21AsyncWithHttpInfo
     *
     * Accept or refuse order lines
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $order_id Order&#39;s identifier (required)
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\OR21Request|null $or21_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR21'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oR21AsyncWithHttpInfo($associative_array)
    {
        $returnType = '';
        $request = $this->oR21Request($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'oR21'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $order_id Order&#39;s identifier (required)
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\OR21Request|null $or21_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR21'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function oR21Request($associative_array)
    {
        // unbox the parameters from the associative array
        $order_id = array_key_exists('order_id', $associative_array) ? $associative_array['order_id'] : null;
        $shop_id = array_key_exists('shop_id', $associative_array) ? $associative_array['shop_id'] : null;
        $or21_request = array_key_exists('or21_request', $associative_array) ? $associative_array['or21_request'] : null;
        $contentType = $associative_array['contentType'] ?? self::contentTypes['oR21'][0];
        
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling oR21'
            );
        }




        $resourcePath = '/api/orders/{order_id}/accept';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shop_id,
            'shop_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'order_id' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($or21_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($or21_request));
            } else {
                $httpBody = $or21_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation oR23
     *
     * Update carrier tracking information for a specific order
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $order_id Order identifier (required)
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\OR23Request|null $or23_request or23_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR23'] to see the possible values for this operation
     *
     * @throws \cbdesk\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function oR23($associative_array)
    {
        $this->oR23WithHttpInfo($associative_array);
    }

    /**
     * Operation oR23WithHttpInfo
     *
     * Update carrier tracking information for a specific order
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $order_id Order identifier (required)
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\OR23Request|null $or23_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR23'] to see the possible values for this operation
     *
     * @throws \cbdesk\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function oR23WithHttpInfo($associative_array)
    {
        $request = $this->oR23Request($associative_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation oR23Async
     *
     * Update carrier tracking information for a specific order
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $order_id Order identifier (required)
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\OR23Request|null $or23_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR23'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oR23Async($associative_array)
    {
        return $this->oR23AsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation oR23AsyncWithHttpInfo
     *
     * Update carrier tracking information for a specific order
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $order_id Order identifier (required)
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\OR23Request|null $or23_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR23'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oR23AsyncWithHttpInfo($associative_array)
    {
        $returnType = '';
        $request = $this->oR23Request($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'oR23'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $order_id Order identifier (required)
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\OR23Request|null $or23_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR23'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function oR23Request($associative_array)
    {
        // unbox the parameters from the associative array
        $order_id = array_key_exists('order_id', $associative_array) ? $associative_array['order_id'] : null;
        $shop_id = array_key_exists('shop_id', $associative_array) ? $associative_array['shop_id'] : null;
        $or23_request = array_key_exists('or23_request', $associative_array) ? $associative_array['or23_request'] : null;
        $contentType = $associative_array['contentType'] ?? self::contentTypes['oR23'][0];
        
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling oR23'
            );
        }




        $resourcePath = '/api/orders/{order_id}/tracking';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shop_id,
            'shop_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'order_id' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($or23_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($or23_request));
            } else {
                $httpBody = $or23_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation oR24
     *
     * Validate the shipment of an order
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $order_id Order&#39;s identifier (required)
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR24'] to see the possible values for this operation
     *
     * @throws \cbdesk\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function oR24($associative_array)
    {
        $this->oR24WithHttpInfo($associative_array);
    }

    /**
     * Operation oR24WithHttpInfo
     *
     * Validate the shipment of an order
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $order_id Order&#39;s identifier (required)
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR24'] to see the possible values for this operation
     *
     * @throws \cbdesk\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function oR24WithHttpInfo($associative_array)
    {
        $request = $this->oR24Request($associative_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation oR24Async
     *
     * Validate the shipment of an order
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $order_id Order&#39;s identifier (required)
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR24'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oR24Async($associative_array)
    {
        return $this->oR24AsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation oR24AsyncWithHttpInfo
     *
     * Validate the shipment of an order
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $order_id Order&#39;s identifier (required)
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR24'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oR24AsyncWithHttpInfo($associative_array)
    {
        $returnType = '';
        $request = $this->oR24Request($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'oR24'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $order_id Order&#39;s identifier (required)
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR24'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function oR24Request($associative_array)
    {
        // unbox the parameters from the associative array
        $order_id = array_key_exists('order_id', $associative_array) ? $associative_array['order_id'] : null;
        $shop_id = array_key_exists('shop_id', $associative_array) ? $associative_array['shop_id'] : null;
        $contentType = $associative_array['contentType'] ?? self::contentTypes['oR24'][0];
        
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling oR24'
            );
        }



        $resourcePath = '/api/orders/{order_id}/ship';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shop_id,
            'shop_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'order_id' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation oR28
     *
     * Perform refunds on order lines
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\OR28Request|null $or28_request or28_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR28'] to see the possible values for this operation
     *
     * @throws \cbdesk\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \cbdesk\Mirakl\Model\OR28Response200
     */
    public function oR28($associative_array)
    {
        list($response) = $this->oR28WithHttpInfo($associative_array);
        return $response;
    }

    /**
     * Operation oR28WithHttpInfo
     *
     * Perform refunds on order lines
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\OR28Request|null $or28_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR28'] to see the possible values for this operation
     *
     * @throws \cbdesk\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \cbdesk\Mirakl\Model\OR28Response200, HTTP status code, HTTP response headers (array of strings)
     */
    public function oR28WithHttpInfo($associative_array)
    {
        $request = $this->oR28Request($associative_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\cbdesk\Mirakl\Model\OR28Response200',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\cbdesk\Mirakl\Model\OR28Response200',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cbdesk\Mirakl\Model\OR28Response200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation oR28Async
     *
     * Perform refunds on order lines
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\OR28Request|null $or28_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR28'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oR28Async($associative_array)
    {
        return $this->oR28AsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation oR28AsyncWithHttpInfo
     *
     * Perform refunds on order lines
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\OR28Request|null $or28_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR28'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oR28AsyncWithHttpInfo($associative_array)
    {
        $returnType = '\cbdesk\Mirakl\Model\OR28Response200';
        $request = $this->oR28Request($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'oR28'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\OR28Request|null $or28_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR28'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function oR28Request($associative_array)
    {
        // unbox the parameters from the associative array
        $shop_id = array_key_exists('shop_id', $associative_array) ? $associative_array['shop_id'] : null;
        $or28_request = array_key_exists('or28_request', $associative_array) ? $associative_array['or28_request'] : null;
        $contentType = $associative_array['contentType'] ?? self::contentTypes['oR28'][0];
        



        $resourcePath = '/api/orders/refund';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shop_id,
            'shop_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($or28_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($or28_request));
            } else {
                $httpBody = $or28_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation oR29
     *
     * Perform a full cancelation of an order
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $order_id Order&#39;s identifier (required)
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR29'] to see the possible values for this operation
     *
     * @throws \cbdesk\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function oR29($associative_array)
    {
        $this->oR29WithHttpInfo($associative_array);
    }

    /**
     * Operation oR29WithHttpInfo
     *
     * Perform a full cancelation of an order
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $order_id Order&#39;s identifier (required)
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR29'] to see the possible values for this operation
     *
     * @throws \cbdesk\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function oR29WithHttpInfo($associative_array)
    {
        $request = $this->oR29Request($associative_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation oR29Async
     *
     * Perform a full cancelation of an order
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $order_id Order&#39;s identifier (required)
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR29'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oR29Async($associative_array)
    {
        return $this->oR29AsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation oR29AsyncWithHttpInfo
     *
     * Perform a full cancelation of an order
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $order_id Order&#39;s identifier (required)
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR29'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oR29AsyncWithHttpInfo($associative_array)
    {
        $returnType = '';
        $request = $this->oR29Request($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'oR29'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $order_id Order&#39;s identifier (required)
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR29'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function oR29Request($associative_array)
    {
        // unbox the parameters from the associative array
        $order_id = array_key_exists('order_id', $associative_array) ? $associative_array['order_id'] : null;
        $shop_id = array_key_exists('shop_id', $associative_array) ? $associative_array['shop_id'] : null;
        $contentType = $associative_array['contentType'] ?? self::contentTypes['oR29'][0];
        
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling oR29'
            );
        }



        $resourcePath = '/api/orders/{order_id}/cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shop_id,
            'shop_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'order_id' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation oR30
     *
     * Perform cancelations on order lines
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\OR30Request|null $or30_request or30_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR30'] to see the possible values for this operation
     *
     * @throws \cbdesk\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \cbdesk\Mirakl\Model\OR30Response200
     */
    public function oR30($associative_array)
    {
        list($response) = $this->oR30WithHttpInfo($associative_array);
        return $response;
    }

    /**
     * Operation oR30WithHttpInfo
     *
     * Perform cancelations on order lines
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\OR30Request|null $or30_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR30'] to see the possible values for this operation
     *
     * @throws \cbdesk\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \cbdesk\Mirakl\Model\OR30Response200, HTTP status code, HTTP response headers (array of strings)
     */
    public function oR30WithHttpInfo($associative_array)
    {
        $request = $this->oR30Request($associative_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\cbdesk\Mirakl\Model\OR30Response200',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\cbdesk\Mirakl\Model\OR30Response200',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cbdesk\Mirakl\Model\OR30Response200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation oR30Async
     *
     * Perform cancelations on order lines
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\OR30Request|null $or30_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR30'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oR30Async($associative_array)
    {
        return $this->oR30AsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation oR30AsyncWithHttpInfo
     *
     * Perform cancelations on order lines
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\OR30Request|null $or30_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR30'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oR30AsyncWithHttpInfo($associative_array)
    {
        $returnType = '\cbdesk\Mirakl\Model\OR30Response200';
        $request = $this->oR30Request($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'oR30'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\OR30Request|null $or30_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR30'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function oR30Request($associative_array)
    {
        // unbox the parameters from the associative array
        $shop_id = array_key_exists('shop_id', $associative_array) ? $associative_array['shop_id'] : null;
        $or30_request = array_key_exists('or30_request', $associative_array) ? $associative_array['or30_request'] : null;
        $contentType = $associative_array['contentType'] ?? self::contentTypes['oR30'][0];
        



        $resourcePath = '/api/orders/cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shop_id,
            'shop_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($or30_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($or30_request));
            } else {
                $httpBody = $or30_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation oR31
     *
     * Update the custom fields of an order and its order lines
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $order_id Order identifier (required)
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\OR31Request|null $or31_request or31_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR31'] to see the possible values for this operation
     *
     * @throws \cbdesk\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \cbdesk\Mirakl\Model\OR31Response200
     */
    public function oR31($associative_array)
    {
        list($response) = $this->oR31WithHttpInfo($associative_array);
        return $response;
    }

    /**
     * Operation oR31WithHttpInfo
     *
     * Update the custom fields of an order and its order lines
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $order_id Order identifier (required)
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\OR31Request|null $or31_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR31'] to see the possible values for this operation
     *
     * @throws \cbdesk\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \cbdesk\Mirakl\Model\OR31Response200, HTTP status code, HTTP response headers (array of strings)
     */
    public function oR31WithHttpInfo($associative_array)
    {
        $request = $this->oR31Request($associative_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\cbdesk\Mirakl\Model\OR31Response200',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\cbdesk\Mirakl\Model\OR31Response200',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cbdesk\Mirakl\Model\OR31Response200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation oR31Async
     *
     * Update the custom fields of an order and its order lines
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $order_id Order identifier (required)
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\OR31Request|null $or31_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR31'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oR31Async($associative_array)
    {
        return $this->oR31AsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation oR31AsyncWithHttpInfo
     *
     * Update the custom fields of an order and its order lines
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $order_id Order identifier (required)
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\OR31Request|null $or31_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR31'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oR31AsyncWithHttpInfo($associative_array)
    {
        $returnType = '\cbdesk\Mirakl\Model\OR31Response200';
        $request = $this->oR31Request($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'oR31'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $order_id Order identifier (required)
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\OR31Request|null $or31_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR31'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function oR31Request($associative_array)
    {
        // unbox the parameters from the associative array
        $order_id = array_key_exists('order_id', $associative_array) ? $associative_array['order_id'] : null;
        $shop_id = array_key_exists('shop_id', $associative_array) ? $associative_array['shop_id'] : null;
        $or31_request = array_key_exists('or31_request', $associative_array) ? $associative_array['or31_request'] : null;
        $contentType = $associative_array['contentType'] ?? self::contentTypes['oR31'][0];
        
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling oR31'
            );
        }




        $resourcePath = '/api/orders/{order_id}/additional_fields';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shop_id,
            'shop_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'order_id' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($or31_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($or31_request));
            } else {
                $httpBody = $or31_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation oR32
     *
     * Adjust order line
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\OR32Request|null $or32_request or32_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR32'] to see the possible values for this operation
     *
     * @throws \cbdesk\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \cbdesk\Mirakl\Model\OR32Response200
     */
    public function oR32($associative_array)
    {
        list($response) = $this->oR32WithHttpInfo($associative_array);
        return $response;
    }

    /**
     * Operation oR32WithHttpInfo
     *
     * Adjust order line
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\OR32Request|null $or32_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR32'] to see the possible values for this operation
     *
     * @throws \cbdesk\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \cbdesk\Mirakl\Model\OR32Response200, HTTP status code, HTTP response headers (array of strings)
     */
    public function oR32WithHttpInfo($associative_array)
    {
        $request = $this->oR32Request($associative_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\cbdesk\Mirakl\Model\OR32Response200',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\cbdesk\Mirakl\Model\OR32Response200',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cbdesk\Mirakl\Model\OR32Response200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation oR32Async
     *
     * Adjust order line
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\OR32Request|null $or32_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR32'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oR32Async($associative_array)
    {
        return $this->oR32AsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation oR32AsyncWithHttpInfo
     *
     * Adjust order line
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\OR32Request|null $or32_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR32'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oR32AsyncWithHttpInfo($associative_array)
    {
        $returnType = '\cbdesk\Mirakl\Model\OR32Response200';
        $request = $this->oR32Request($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'oR32'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\OR32Request|null $or32_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR32'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function oR32Request($associative_array)
    {
        // unbox the parameters from the associative array
        $shop_id = array_key_exists('shop_id', $associative_array) ? $associative_array['shop_id'] : null;
        $or32_request = array_key_exists('or32_request', $associative_array) ? $associative_array['or32_request'] : null;
        $contentType = $associative_array['contentType'] ?? self::contentTypes['oR32'][0];
        



        $resourcePath = '/api/orders/adjust';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shop_id,
            'shop_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($or32_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($or32_request));
            } else {
                $httpBody = $or32_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation oR51
     *
     * Get the evaluation of an order
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $order_id order_id (required)
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $locale &amp;lt;ISO-639&amp;gt;_&amp;lt;ISO-3166&amp;gt; (\&quot;en_US\&quot;) or &amp;lt;ISO-639&amp;gt; (\&quot;en\&quot;) locale for internationalized data translation. The APIs only accept locales that are equivalent to the languages activated in the back-office. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR51'] to see the possible values for this operation
     *
     * @throws \cbdesk\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \cbdesk\Mirakl\Model\OR51Response200
     */
    public function oR51($associative_array)
    {
        list($response) = $this->oR51WithHttpInfo($associative_array);
        return $response;
    }

    /**
     * Operation oR51WithHttpInfo
     *
     * Get the evaluation of an order
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $order_id (required)
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $locale &amp;lt;ISO-639&amp;gt;_&amp;lt;ISO-3166&amp;gt; (\&quot;en_US\&quot;) or &amp;lt;ISO-639&amp;gt; (\&quot;en\&quot;) locale for internationalized data translation. The APIs only accept locales that are equivalent to the languages activated in the back-office. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR51'] to see the possible values for this operation
     *
     * @throws \cbdesk\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \cbdesk\Mirakl\Model\OR51Response200, HTTP status code, HTTP response headers (array of strings)
     */
    public function oR51WithHttpInfo($associative_array)
    {
        $request = $this->oR51Request($associative_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\cbdesk\Mirakl\Model\OR51Response200',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\cbdesk\Mirakl\Model\OR51Response200',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cbdesk\Mirakl\Model\OR51Response200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation oR51Async
     *
     * Get the evaluation of an order
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $order_id (required)
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $locale &amp;lt;ISO-639&amp;gt;_&amp;lt;ISO-3166&amp;gt; (\&quot;en_US\&quot;) or &amp;lt;ISO-639&amp;gt; (\&quot;en\&quot;) locale for internationalized data translation. The APIs only accept locales that are equivalent to the languages activated in the back-office. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR51'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oR51Async($associative_array)
    {
        return $this->oR51AsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation oR51AsyncWithHttpInfo
     *
     * Get the evaluation of an order
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $order_id (required)
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $locale &amp;lt;ISO-639&amp;gt;_&amp;lt;ISO-3166&amp;gt; (\&quot;en_US\&quot;) or &amp;lt;ISO-639&amp;gt; (\&quot;en\&quot;) locale for internationalized data translation. The APIs only accept locales that are equivalent to the languages activated in the back-office. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR51'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oR51AsyncWithHttpInfo($associative_array)
    {
        $returnType = '\cbdesk\Mirakl\Model\OR51Response200';
        $request = $this->oR51Request($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'oR51'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $order_id (required)
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $locale &amp;lt;ISO-639&amp;gt;_&amp;lt;ISO-3166&amp;gt; (\&quot;en_US\&quot;) or &amp;lt;ISO-639&amp;gt; (\&quot;en\&quot;) locale for internationalized data translation. The APIs only accept locales that are equivalent to the languages activated in the back-office. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR51'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function oR51Request($associative_array)
    {
        // unbox the parameters from the associative array
        $order_id = array_key_exists('order_id', $associative_array) ? $associative_array['order_id'] : null;
        $shop_id = array_key_exists('shop_id', $associative_array) ? $associative_array['shop_id'] : null;
        $locale = array_key_exists('locale', $associative_array) ? $associative_array['locale'] : null;
        $contentType = $associative_array['contentType'] ?? self::contentTypes['oR51'][0];
        
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling oR51'
            );
        }




        $resourcePath = '/api/orders/{order_id}/evaluation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shop_id,
            'shop_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $locale,
            'locale', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'order_id' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation oR72
     *
     * Lists order&#39;s documents
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string|null $order_ids the orders&#39; identifiers, using comma as separator (optional)
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR72'] to see the possible values for this operation
     *
     * @throws \cbdesk\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \cbdesk\Mirakl\Model\OR72Response200
     */
    public function oR72($associative_array)
    {
        list($response) = $this->oR72WithHttpInfo($associative_array);
        return $response;
    }

    /**
     * Operation oR72WithHttpInfo
     *
     * Lists order&#39;s documents
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string|null $order_ids the orders&#39; identifiers, using comma as separator (optional)
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR72'] to see the possible values for this operation
     *
     * @throws \cbdesk\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \cbdesk\Mirakl\Model\OR72Response200, HTTP status code, HTTP response headers (array of strings)
     */
    public function oR72WithHttpInfo($associative_array)
    {
        $request = $this->oR72Request($associative_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\cbdesk\Mirakl\Model\OR72Response200',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\cbdesk\Mirakl\Model\OR72Response200',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cbdesk\Mirakl\Model\OR72Response200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation oR72Async
     *
     * Lists order&#39;s documents
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string|null $order_ids the orders&#39; identifiers, using comma as separator (optional)
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR72'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oR72Async($associative_array)
    {
        return $this->oR72AsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation oR72AsyncWithHttpInfo
     *
     * Lists order&#39;s documents
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string|null $order_ids the orders&#39; identifiers, using comma as separator (optional)
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR72'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oR72AsyncWithHttpInfo($associative_array)
    {
        $returnType = '\cbdesk\Mirakl\Model\OR72Response200';
        $request = $this->oR72Request($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'oR72'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string|null $order_ids the orders&#39; identifiers, using comma as separator (optional)
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR72'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function oR72Request($associative_array)
    {
        // unbox the parameters from the associative array
        $order_ids = array_key_exists('order_ids', $associative_array) ? $associative_array['order_ids'] : null;
        $shop_id = array_key_exists('shop_id', $associative_array) ? $associative_array['shop_id'] : null;
        $contentType = $associative_array['contentType'] ?? self::contentTypes['oR72'][0];
        
        


        $resourcePath = '/api/orders/documents';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_ids,
            'order_ids', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shop_id,
            'shop_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation oR73
     *
     * Download one or multiple documents attached to one or multiple orders
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string|null $order_ids A list of identifiers of the orders (separated by a comma) (optional)
     * @param  string|null $document_ids A list of document identifiers (separated by a comma) (optional)
     * @param  string|null $document_codes A list of document type codes (separated by a comma) (optional)
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR73'] to see the possible values for this operation
     *
     * @throws \cbdesk\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function oR73($associative_array)
    {
        list($response) = $this->oR73WithHttpInfo($associative_array);
        return $response;
    }

    /**
     * Operation oR73WithHttpInfo
     *
     * Download one or multiple documents attached to one or multiple orders
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string|null $order_ids A list of identifiers of the orders (separated by a comma) (optional)
     * @param  string|null $document_ids A list of document identifiers (separated by a comma) (optional)
     * @param  string|null $document_codes A list of document type codes (separated by a comma) (optional)
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR73'] to see the possible values for this operation
     *
     * @throws \cbdesk\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function oR73WithHttpInfo($associative_array)
    {
        $request = $this->oR73Request($associative_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\SplFileObject',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\SplFileObject',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation oR73Async
     *
     * Download one or multiple documents attached to one or multiple orders
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string|null $order_ids A list of identifiers of the orders (separated by a comma) (optional)
     * @param  string|null $document_ids A list of document identifiers (separated by a comma) (optional)
     * @param  string|null $document_codes A list of document type codes (separated by a comma) (optional)
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR73'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oR73Async($associative_array)
    {
        return $this->oR73AsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation oR73AsyncWithHttpInfo
     *
     * Download one or multiple documents attached to one or multiple orders
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string|null $order_ids A list of identifiers of the orders (separated by a comma) (optional)
     * @param  string|null $document_ids A list of document identifiers (separated by a comma) (optional)
     * @param  string|null $document_codes A list of document type codes (separated by a comma) (optional)
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR73'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oR73AsyncWithHttpInfo($associative_array)
    {
        $returnType = '\SplFileObject';
        $request = $this->oR73Request($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'oR73'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string|null $order_ids A list of identifiers of the orders (separated by a comma) (optional)
     * @param  string|null $document_ids A list of document identifiers (separated by a comma) (optional)
     * @param  string|null $document_codes A list of document type codes (separated by a comma) (optional)
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR73'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function oR73Request($associative_array)
    {
        // unbox the parameters from the associative array
        $order_ids = array_key_exists('order_ids', $associative_array) ? $associative_array['order_ids'] : null;
        $document_ids = array_key_exists('document_ids', $associative_array) ? $associative_array['document_ids'] : null;
        $document_codes = array_key_exists('document_codes', $associative_array) ? $associative_array['document_codes'] : null;
        $shop_id = array_key_exists('shop_id', $associative_array) ? $associative_array['shop_id'] : null;
        $contentType = $associative_array['contentType'] ?? self::contentTypes['oR73'][0];
        
        
        
        


        $resourcePath = '/api/orders/documents/download';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_ids,
            'order_ids', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $document_ids,
            'document_ids', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $document_codes,
            'document_codes', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shop_id,
            'shop_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/octet-stream', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation oR75
     *
     * List all the order taxes available on the platform
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $locale &amp;lt;ISO-639&amp;gt;_&amp;lt;ISO-3166&amp;gt; (\&quot;en_US\&quot;) or &amp;lt;ISO-639&amp;gt; (\&quot;en\&quot;) locale for internationalized data translation. The APIs only accept locales that are equivalent to the languages activated in the back-office. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR75'] to see the possible values for this operation
     *
     * @throws \cbdesk\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \cbdesk\Mirakl\Model\OR75Response200
     */
    public function oR75($associative_array)
    {
        list($response) = $this->oR75WithHttpInfo($associative_array);
        return $response;
    }

    /**
     * Operation oR75WithHttpInfo
     *
     * List all the order taxes available on the platform
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $locale &amp;lt;ISO-639&amp;gt;_&amp;lt;ISO-3166&amp;gt; (\&quot;en_US\&quot;) or &amp;lt;ISO-639&amp;gt; (\&quot;en\&quot;) locale for internationalized data translation. The APIs only accept locales that are equivalent to the languages activated in the back-office. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR75'] to see the possible values for this operation
     *
     * @throws \cbdesk\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \cbdesk\Mirakl\Model\OR75Response200, HTTP status code, HTTP response headers (array of strings)
     */
    public function oR75WithHttpInfo($associative_array)
    {
        $request = $this->oR75Request($associative_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\cbdesk\Mirakl\Model\OR75Response200',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\cbdesk\Mirakl\Model\OR75Response200',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cbdesk\Mirakl\Model\OR75Response200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation oR75Async
     *
     * List all the order taxes available on the platform
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $locale &amp;lt;ISO-639&amp;gt;_&amp;lt;ISO-3166&amp;gt; (\&quot;en_US\&quot;) or &amp;lt;ISO-639&amp;gt; (\&quot;en\&quot;) locale for internationalized data translation. The APIs only accept locales that are equivalent to the languages activated in the back-office. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR75'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oR75Async($associative_array)
    {
        return $this->oR75AsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation oR75AsyncWithHttpInfo
     *
     * List all the order taxes available on the platform
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $locale &amp;lt;ISO-639&amp;gt;_&amp;lt;ISO-3166&amp;gt; (\&quot;en_US\&quot;) or &amp;lt;ISO-639&amp;gt; (\&quot;en\&quot;) locale for internationalized data translation. The APIs only accept locales that are equivalent to the languages activated in the back-office. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR75'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oR75AsyncWithHttpInfo($associative_array)
    {
        $returnType = '\cbdesk\Mirakl\Model\OR75Response200';
        $request = $this->oR75Request($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'oR75'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $locale &amp;lt;ISO-639&amp;gt;_&amp;lt;ISO-3166&amp;gt; (\&quot;en_US\&quot;) or &amp;lt;ISO-639&amp;gt; (\&quot;en\&quot;) locale for internationalized data translation. The APIs only accept locales that are equivalent to the languages activated in the back-office. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR75'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function oR75Request($associative_array)
    {
        // unbox the parameters from the associative array
        $shop_id = array_key_exists('shop_id', $associative_array) ? $associative_array['shop_id'] : null;
        $locale = array_key_exists('locale', $associative_array) ? $associative_array['locale'] : null;
        $contentType = $associative_array['contentType'] ?? self::contentTypes['oR75'][0];
        



        $resourcePath = '/api/orders/taxes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shop_id,
            'shop_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $locale,
            'locale', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation oR76
     *
     * Delete an order document
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int $document_id Identifier of the document to delete (required)
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR76'] to see the possible values for this operation
     *
     * @throws \cbdesk\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function oR76($associative_array)
    {
        $this->oR76WithHttpInfo($associative_array);
    }

    /**
     * Operation oR76WithHttpInfo
     *
     * Delete an order document
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int $document_id Identifier of the document to delete (required)
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR76'] to see the possible values for this operation
     *
     * @throws \cbdesk\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function oR76WithHttpInfo($associative_array)
    {
        $request = $this->oR76Request($associative_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation oR76Async
     *
     * Delete an order document
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int $document_id Identifier of the document to delete (required)
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR76'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oR76Async($associative_array)
    {
        return $this->oR76AsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation oR76AsyncWithHttpInfo
     *
     * Delete an order document
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int $document_id Identifier of the document to delete (required)
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR76'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oR76AsyncWithHttpInfo($associative_array)
    {
        $returnType = '';
        $request = $this->oR76Request($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'oR76'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int $document_id Identifier of the document to delete (required)
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oR76'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function oR76Request($associative_array)
    {
        // unbox the parameters from the associative array
        $document_id = array_key_exists('document_id', $associative_array) ? $associative_array['document_id'] : null;
        $shop_id = array_key_exists('shop_id', $associative_array) ? $associative_array['shop_id'] : null;
        $contentType = $associative_array['contentType'] ?? self::contentTypes['oR76'][0];
        
        // verify the required parameter 'document_id' is set
        if ($document_id === null || (is_array($document_id) && count($document_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_id when calling oR76'
            );
        }



        $resourcePath = '/api/orders/documents/{document_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shop_id,
            'shop_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($document_id !== null) {
            $resourcePath = str_replace(
                '{' . 'document_id' . '}',
                ObjectSerializer::toPathValue($document_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        if ($this->config->getCertFile()) {
            $options[RequestOptions::CERT] = $this->config->getCertFile();
        }

        if ($this->config->getKeyFile()) {
            $options[RequestOptions::SSL_KEY] = $this->config->getKeyFile();
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
