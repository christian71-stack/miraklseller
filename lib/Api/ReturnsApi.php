<?php
/**
 * ReturnsApi
 * PHP version 8.1
 *
 * @category Class
 * @package  cbdesk\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mirakl Marketplace APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest-release
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace cbdesk\Mirakl\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use cbdesk\Mirakl\ApiException;
use cbdesk\Mirakl\Configuration;
use cbdesk\Mirakl\FormDataProcessor;
use cbdesk\Mirakl\HeaderSelector;
use cbdesk\Mirakl\ObjectSerializer;

/**
 * ReturnsApi Class Doc Comment
 *
 * @category Class
 * @package  cbdesk\Mirakl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ReturnsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'rT04' => [
            'application/json',
        ],
        'rT11' => [
            'application/json',
        ],
        'rT21' => [
            'application/json',
        ],
        'rT25' => [
            'application/json',
        ],
        'rT26' => [
            'application/json',
        ],
        'rT27' => [
            'application/json',
        ],
        'rT29' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation rT04
     *
     * Patch update returns
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\RT04Request|null $rt04_request rt04_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rT04'] to see the possible values for this operation
     *
     * @throws \cbdesk\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \cbdesk\Mirakl\Model\RT04Response200
     */
    public function rT04($associative_array)
    {
        list($response) = $this->rT04WithHttpInfo($associative_array);
        return $response;
    }

    /**
     * Operation rT04WithHttpInfo
     *
     * Patch update returns
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\RT04Request|null $rt04_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rT04'] to see the possible values for this operation
     *
     * @throws \cbdesk\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \cbdesk\Mirakl\Model\RT04Response200, HTTP status code, HTTP response headers (array of strings)
     */
    public function rT04WithHttpInfo($associative_array)
    {
        $request = $this->rT04Request($associative_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\cbdesk\Mirakl\Model\RT04Response200',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\cbdesk\Mirakl\Model\RT04Response200',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cbdesk\Mirakl\Model\RT04Response200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation rT04Async
     *
     * Patch update returns
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\RT04Request|null $rt04_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rT04'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rT04Async($associative_array)
    {
        return $this->rT04AsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation rT04AsyncWithHttpInfo
     *
     * Patch update returns
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\RT04Request|null $rt04_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rT04'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rT04AsyncWithHttpInfo($associative_array)
    {
        $returnType = '\cbdesk\Mirakl\Model\RT04Response200';
        $request = $this->rT04Request($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'rT04'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\RT04Request|null $rt04_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rT04'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function rT04Request($associative_array)
    {
        // unbox the parameters from the associative array
        $shop_id = array_key_exists('shop_id', $associative_array) ? $associative_array['shop_id'] : null;
        $rt04_request = array_key_exists('rt04_request', $associative_array) ? $associative_array['rt04_request'] : null;
        $contentType = $associative_array['contentType'] ?? self::contentTypes['rT04'][0];
        



        $resourcePath = '/api/returns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shop_id,
            'shop_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($rt04_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($rt04_request));
            } else {
                $httpBody = $rt04_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation rT11
     *
     * List returns
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string[]|null $return_id Return id for filtering. This parameter can be supplied multiple times (return_id&#x3D;58fd00d1-4ea4-453e-9a56-ec28c5c156ea&amp;return_id&#x3D;3071c162-dcd9-414b-a39d-ac3165f29453...). (optional)
     * @param  string[]|null $return_state Return state for filtering. This parameter can be supplied multiple times (return_state&#x3D;WAITING_ACCEPTANCE&amp;return_state&#x3D;IN_PROGRESS...). (optional)
     * @param  \DateTime|null $return_creation_date_from Filter returns with a creation date after the given date. (optional)
     * @param  \DateTime|null $return_creation_date_to Filter returns with a creation date before the given date. (optional)
     * @param  \DateTime|null $return_last_updated_from Filter returns updated after the given date. (optional)
     * @param  \DateTime|null $return_last_updated_to Filter returns updated before the given date. (optional)
     * @param  string[]|null $order_commercial_id Order commercial id for filtering. This parameter can be supplied multiple times (order_commercial_id&#x3D;OR01-A&amp;order_commercial_id&#x3D;OR02-A...). (optional)
     * @param  string[]|null $order_line_id Order line id for filtering. This parameter can be supplied multiple times (order_line_id&#x3D;OR01-A-1&amp;order_line_id&#x3D;OR02-A-1...). (optional)
     * @param  string[]|null $return_rma Return RMA for filtering. This parameter can be supplied multiple times (return_rma&#x3D;RMA-1&amp;return_rma&#x3D;RMA-2...). (optional)
     * @param  string[]|null $customer_id Customer id for filtering. This parameter can be supplied multiple times (customer_id&#x3D;id1&amp;customer_id&#x3D;id2...). (optional)
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $page_token Token retrieved from next_page_token or previous_page_token to get to next (optional)
     * @param  string|null $sort How the results should be sorted. Must follow \&quot;sort&#x3D;criterion,direction\&quot; format as described in Mirakl API Documentation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rT11'] to see the possible values for this operation
     *
     * @throws \cbdesk\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \cbdesk\Mirakl\Model\RT11Response200
     */
    public function rT11($associative_array)
    {
        list($response) = $this->rT11WithHttpInfo($associative_array);
        return $response;
    }

    /**
     * Operation rT11WithHttpInfo
     *
     * List returns
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string[]|null $return_id Return id for filtering. This parameter can be supplied multiple times (return_id&#x3D;58fd00d1-4ea4-453e-9a56-ec28c5c156ea&amp;return_id&#x3D;3071c162-dcd9-414b-a39d-ac3165f29453...). (optional)
     * @param  string[]|null $return_state Return state for filtering. This parameter can be supplied multiple times (return_state&#x3D;WAITING_ACCEPTANCE&amp;return_state&#x3D;IN_PROGRESS...). (optional)
     * @param  \DateTime|null $return_creation_date_from Filter returns with a creation date after the given date. (optional)
     * @param  \DateTime|null $return_creation_date_to Filter returns with a creation date before the given date. (optional)
     * @param  \DateTime|null $return_last_updated_from Filter returns updated after the given date. (optional)
     * @param  \DateTime|null $return_last_updated_to Filter returns updated before the given date. (optional)
     * @param  string[]|null $order_commercial_id Order commercial id for filtering. This parameter can be supplied multiple times (order_commercial_id&#x3D;OR01-A&amp;order_commercial_id&#x3D;OR02-A...). (optional)
     * @param  string[]|null $order_line_id Order line id for filtering. This parameter can be supplied multiple times (order_line_id&#x3D;OR01-A-1&amp;order_line_id&#x3D;OR02-A-1...). (optional)
     * @param  string[]|null $return_rma Return RMA for filtering. This parameter can be supplied multiple times (return_rma&#x3D;RMA-1&amp;return_rma&#x3D;RMA-2...). (optional)
     * @param  string[]|null $customer_id Customer id for filtering. This parameter can be supplied multiple times (customer_id&#x3D;id1&amp;customer_id&#x3D;id2...). (optional)
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $page_token Token retrieved from next_page_token or previous_page_token to get to next (optional)
     * @param  string|null $sort How the results should be sorted. Must follow \&quot;sort&#x3D;criterion,direction\&quot; format as described in Mirakl API Documentation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rT11'] to see the possible values for this operation
     *
     * @throws \cbdesk\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \cbdesk\Mirakl\Model\RT11Response200, HTTP status code, HTTP response headers (array of strings)
     */
    public function rT11WithHttpInfo($associative_array)
    {
        $request = $this->rT11Request($associative_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\cbdesk\Mirakl\Model\RT11Response200',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\cbdesk\Mirakl\Model\RT11Response200',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cbdesk\Mirakl\Model\RT11Response200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation rT11Async
     *
     * List returns
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string[]|null $return_id Return id for filtering. This parameter can be supplied multiple times (return_id&#x3D;58fd00d1-4ea4-453e-9a56-ec28c5c156ea&amp;return_id&#x3D;3071c162-dcd9-414b-a39d-ac3165f29453...). (optional)
     * @param  string[]|null $return_state Return state for filtering. This parameter can be supplied multiple times (return_state&#x3D;WAITING_ACCEPTANCE&amp;return_state&#x3D;IN_PROGRESS...). (optional)
     * @param  \DateTime|null $return_creation_date_from Filter returns with a creation date after the given date. (optional)
     * @param  \DateTime|null $return_creation_date_to Filter returns with a creation date before the given date. (optional)
     * @param  \DateTime|null $return_last_updated_from Filter returns updated after the given date. (optional)
     * @param  \DateTime|null $return_last_updated_to Filter returns updated before the given date. (optional)
     * @param  string[]|null $order_commercial_id Order commercial id for filtering. This parameter can be supplied multiple times (order_commercial_id&#x3D;OR01-A&amp;order_commercial_id&#x3D;OR02-A...). (optional)
     * @param  string[]|null $order_line_id Order line id for filtering. This parameter can be supplied multiple times (order_line_id&#x3D;OR01-A-1&amp;order_line_id&#x3D;OR02-A-1...). (optional)
     * @param  string[]|null $return_rma Return RMA for filtering. This parameter can be supplied multiple times (return_rma&#x3D;RMA-1&amp;return_rma&#x3D;RMA-2...). (optional)
     * @param  string[]|null $customer_id Customer id for filtering. This parameter can be supplied multiple times (customer_id&#x3D;id1&amp;customer_id&#x3D;id2...). (optional)
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $page_token Token retrieved from next_page_token or previous_page_token to get to next (optional)
     * @param  string|null $sort How the results should be sorted. Must follow \&quot;sort&#x3D;criterion,direction\&quot; format as described in Mirakl API Documentation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rT11'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rT11Async($associative_array)
    {
        return $this->rT11AsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation rT11AsyncWithHttpInfo
     *
     * List returns
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string[]|null $return_id Return id for filtering. This parameter can be supplied multiple times (return_id&#x3D;58fd00d1-4ea4-453e-9a56-ec28c5c156ea&amp;return_id&#x3D;3071c162-dcd9-414b-a39d-ac3165f29453...). (optional)
     * @param  string[]|null $return_state Return state for filtering. This parameter can be supplied multiple times (return_state&#x3D;WAITING_ACCEPTANCE&amp;return_state&#x3D;IN_PROGRESS...). (optional)
     * @param  \DateTime|null $return_creation_date_from Filter returns with a creation date after the given date. (optional)
     * @param  \DateTime|null $return_creation_date_to Filter returns with a creation date before the given date. (optional)
     * @param  \DateTime|null $return_last_updated_from Filter returns updated after the given date. (optional)
     * @param  \DateTime|null $return_last_updated_to Filter returns updated before the given date. (optional)
     * @param  string[]|null $order_commercial_id Order commercial id for filtering. This parameter can be supplied multiple times (order_commercial_id&#x3D;OR01-A&amp;order_commercial_id&#x3D;OR02-A...). (optional)
     * @param  string[]|null $order_line_id Order line id for filtering. This parameter can be supplied multiple times (order_line_id&#x3D;OR01-A-1&amp;order_line_id&#x3D;OR02-A-1...). (optional)
     * @param  string[]|null $return_rma Return RMA for filtering. This parameter can be supplied multiple times (return_rma&#x3D;RMA-1&amp;return_rma&#x3D;RMA-2...). (optional)
     * @param  string[]|null $customer_id Customer id for filtering. This parameter can be supplied multiple times (customer_id&#x3D;id1&amp;customer_id&#x3D;id2...). (optional)
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $page_token Token retrieved from next_page_token or previous_page_token to get to next (optional)
     * @param  string|null $sort How the results should be sorted. Must follow \&quot;sort&#x3D;criterion,direction\&quot; format as described in Mirakl API Documentation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rT11'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rT11AsyncWithHttpInfo($associative_array)
    {
        $returnType = '\cbdesk\Mirakl\Model\RT11Response200';
        $request = $this->rT11Request($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'rT11'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string[]|null $return_id Return id for filtering. This parameter can be supplied multiple times (return_id&#x3D;58fd00d1-4ea4-453e-9a56-ec28c5c156ea&amp;return_id&#x3D;3071c162-dcd9-414b-a39d-ac3165f29453...). (optional)
     * @param  string[]|null $return_state Return state for filtering. This parameter can be supplied multiple times (return_state&#x3D;WAITING_ACCEPTANCE&amp;return_state&#x3D;IN_PROGRESS...). (optional)
     * @param  \DateTime|null $return_creation_date_from Filter returns with a creation date after the given date. (optional)
     * @param  \DateTime|null $return_creation_date_to Filter returns with a creation date before the given date. (optional)
     * @param  \DateTime|null $return_last_updated_from Filter returns updated after the given date. (optional)
     * @param  \DateTime|null $return_last_updated_to Filter returns updated before the given date. (optional)
     * @param  string[]|null $order_commercial_id Order commercial id for filtering. This parameter can be supplied multiple times (order_commercial_id&#x3D;OR01-A&amp;order_commercial_id&#x3D;OR02-A...). (optional)
     * @param  string[]|null $order_line_id Order line id for filtering. This parameter can be supplied multiple times (order_line_id&#x3D;OR01-A-1&amp;order_line_id&#x3D;OR02-A-1...). (optional)
     * @param  string[]|null $return_rma Return RMA for filtering. This parameter can be supplied multiple times (return_rma&#x3D;RMA-1&amp;return_rma&#x3D;RMA-2...). (optional)
     * @param  string[]|null $customer_id Customer id for filtering. This parameter can be supplied multiple times (customer_id&#x3D;id1&amp;customer_id&#x3D;id2...). (optional)
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  string|null $page_token Token retrieved from next_page_token or previous_page_token to get to next (optional)
     * @param  string|null $sort How the results should be sorted. Must follow \&quot;sort&#x3D;criterion,direction\&quot; format as described in Mirakl API Documentation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rT11'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function rT11Request($associative_array)
    {
        // unbox the parameters from the associative array
        $return_id = array_key_exists('return_id', $associative_array) ? $associative_array['return_id'] : null;
        $return_state = array_key_exists('return_state', $associative_array) ? $associative_array['return_state'] : null;
        $return_creation_date_from = array_key_exists('return_creation_date_from', $associative_array) ? $associative_array['return_creation_date_from'] : null;
        $return_creation_date_to = array_key_exists('return_creation_date_to', $associative_array) ? $associative_array['return_creation_date_to'] : null;
        $return_last_updated_from = array_key_exists('return_last_updated_from', $associative_array) ? $associative_array['return_last_updated_from'] : null;
        $return_last_updated_to = array_key_exists('return_last_updated_to', $associative_array) ? $associative_array['return_last_updated_to'] : null;
        $order_commercial_id = array_key_exists('order_commercial_id', $associative_array) ? $associative_array['order_commercial_id'] : null;
        $order_line_id = array_key_exists('order_line_id', $associative_array) ? $associative_array['order_line_id'] : null;
        $return_rma = array_key_exists('return_rma', $associative_array) ? $associative_array['return_rma'] : null;
        $customer_id = array_key_exists('customer_id', $associative_array) ? $associative_array['customer_id'] : null;
        $shop_id = array_key_exists('shop_id', $associative_array) ? $associative_array['shop_id'] : null;
        $page_token = array_key_exists('page_token', $associative_array) ? $associative_array['page_token'] : null;
        $sort = array_key_exists('sort', $associative_array) ? $associative_array['sort'] : null;
        $contentType = $associative_array['contentType'] ?? self::contentTypes['rT11'][0];
        














        $resourcePath = '/api/returns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $return_id,
            'return_id', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $return_state,
            'return_state', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $return_creation_date_from,
            'return_creation_date_from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $return_creation_date_to,
            'return_creation_date_to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $return_last_updated_from,
            'return_last_updated_from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $return_last_updated_to,
            'return_last_updated_to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_commercial_id,
            'order_commercial_id', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_line_id,
            'order_line_id', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $return_rma,
            'return_rma', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $customer_id,
            'customer_id', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shop_id,
            'shop_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_token,
            'page_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation rT21
     *
     * Accept or refuse a return request
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\RT21Request|null $rt21_request rt21_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rT21'] to see the possible values for this operation
     *
     * @throws \cbdesk\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \cbdesk\Mirakl\Model\RT21Response200
     */
    public function rT21($associative_array)
    {
        list($response) = $this->rT21WithHttpInfo($associative_array);
        return $response;
    }

    /**
     * Operation rT21WithHttpInfo
     *
     * Accept or refuse a return request
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\RT21Request|null $rt21_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rT21'] to see the possible values for this operation
     *
     * @throws \cbdesk\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \cbdesk\Mirakl\Model\RT21Response200, HTTP status code, HTTP response headers (array of strings)
     */
    public function rT21WithHttpInfo($associative_array)
    {
        $request = $this->rT21Request($associative_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\cbdesk\Mirakl\Model\RT21Response200',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\cbdesk\Mirakl\Model\RT21Response200',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cbdesk\Mirakl\Model\RT21Response200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation rT21Async
     *
     * Accept or refuse a return request
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\RT21Request|null $rt21_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rT21'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rT21Async($associative_array)
    {
        return $this->rT21AsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation rT21AsyncWithHttpInfo
     *
     * Accept or refuse a return request
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\RT21Request|null $rt21_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rT21'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rT21AsyncWithHttpInfo($associative_array)
    {
        $returnType = '\cbdesk\Mirakl\Model\RT21Response200';
        $request = $this->rT21Request($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'rT21'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\RT21Request|null $rt21_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rT21'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function rT21Request($associative_array)
    {
        // unbox the parameters from the associative array
        $shop_id = array_key_exists('shop_id', $associative_array) ? $associative_array['shop_id'] : null;
        $rt21_request = array_key_exists('rt21_request', $associative_array) ? $associative_array['rt21_request'] : null;
        $contentType = $associative_array['contentType'] ?? self::contentTypes['rT21'][0];
        



        $resourcePath = '/api/returns/accept';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shop_id,
            'shop_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($rt21_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($rt21_request));
            } else {
                $httpBody = $rt21_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation rT25
     *
     * Validate returns as received
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\RT25Request|null $rt25_request rt25_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rT25'] to see the possible values for this operation
     *
     * @throws \cbdesk\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \cbdesk\Mirakl\Model\RT25Response200
     */
    public function rT25($associative_array)
    {
        list($response) = $this->rT25WithHttpInfo($associative_array);
        return $response;
    }

    /**
     * Operation rT25WithHttpInfo
     *
     * Validate returns as received
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\RT25Request|null $rt25_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rT25'] to see the possible values for this operation
     *
     * @throws \cbdesk\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \cbdesk\Mirakl\Model\RT25Response200, HTTP status code, HTTP response headers (array of strings)
     */
    public function rT25WithHttpInfo($associative_array)
    {
        $request = $this->rT25Request($associative_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\cbdesk\Mirakl\Model\RT25Response200',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\cbdesk\Mirakl\Model\RT25Response200',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cbdesk\Mirakl\Model\RT25Response200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation rT25Async
     *
     * Validate returns as received
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\RT25Request|null $rt25_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rT25'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rT25Async($associative_array)
    {
        return $this->rT25AsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation rT25AsyncWithHttpInfo
     *
     * Validate returns as received
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\RT25Request|null $rt25_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rT25'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rT25AsyncWithHttpInfo($associative_array)
    {
        $returnType = '\cbdesk\Mirakl\Model\RT25Response200';
        $request = $this->rT25Request($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'rT25'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\RT25Request|null $rt25_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rT25'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function rT25Request($associative_array)
    {
        // unbox the parameters from the associative array
        $shop_id = array_key_exists('shop_id', $associative_array) ? $associative_array['shop_id'] : null;
        $rt25_request = array_key_exists('rt25_request', $associative_array) ? $associative_array['rt25_request'] : null;
        $contentType = $associative_array['contentType'] ?? self::contentTypes['rT25'][0];
        



        $resourcePath = '/api/returns/receive';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shop_id,
            'shop_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($rt25_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($rt25_request));
            } else {
                $httpBody = $rt25_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation rT26
     *
     * Mark a return as compliant or non compliant
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\RT26Request|null $rt26_request rt26_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rT26'] to see the possible values for this operation
     *
     * @throws \cbdesk\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \cbdesk\Mirakl\Model\RT26Response200
     */
    public function rT26($associative_array)
    {
        list($response) = $this->rT26WithHttpInfo($associative_array);
        return $response;
    }

    /**
     * Operation rT26WithHttpInfo
     *
     * Mark a return as compliant or non compliant
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\RT26Request|null $rt26_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rT26'] to see the possible values for this operation
     *
     * @throws \cbdesk\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \cbdesk\Mirakl\Model\RT26Response200, HTTP status code, HTTP response headers (array of strings)
     */
    public function rT26WithHttpInfo($associative_array)
    {
        $request = $this->rT26Request($associative_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\cbdesk\Mirakl\Model\RT26Response200',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\cbdesk\Mirakl\Model\RT26Response200',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cbdesk\Mirakl\Model\RT26Response200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation rT26Async
     *
     * Mark a return as compliant or non compliant
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\RT26Request|null $rt26_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rT26'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rT26Async($associative_array)
    {
        return $this->rT26AsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation rT26AsyncWithHttpInfo
     *
     * Mark a return as compliant or non compliant
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\RT26Request|null $rt26_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rT26'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rT26AsyncWithHttpInfo($associative_array)
    {
        $returnType = '\cbdesk\Mirakl\Model\RT26Response200';
        $request = $this->rT26Request($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'rT26'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\RT26Request|null $rt26_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rT26'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function rT26Request($associative_array)
    {
        // unbox the parameters from the associative array
        $shop_id = array_key_exists('shop_id', $associative_array) ? $associative_array['shop_id'] : null;
        $rt26_request = array_key_exists('rt26_request', $associative_array) ? $associative_array['rt26_request'] : null;
        $contentType = $associative_array['contentType'] ?? self::contentTypes['rT26'][0];
        



        $resourcePath = '/api/returns/compliance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shop_id,
            'shop_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($rt26_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($rt26_request));
            } else {
                $httpBody = $rt26_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation rT27
     *
     * Mark a return as closed
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\RT27Request|null $rt27_request rt27_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rT27'] to see the possible values for this operation
     *
     * @throws \cbdesk\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \cbdesk\Mirakl\Model\RT27Response200
     */
    public function rT27($associative_array)
    {
        list($response) = $this->rT27WithHttpInfo($associative_array);
        return $response;
    }

    /**
     * Operation rT27WithHttpInfo
     *
     * Mark a return as closed
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\RT27Request|null $rt27_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rT27'] to see the possible values for this operation
     *
     * @throws \cbdesk\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \cbdesk\Mirakl\Model\RT27Response200, HTTP status code, HTTP response headers (array of strings)
     */
    public function rT27WithHttpInfo($associative_array)
    {
        $request = $this->rT27Request($associative_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\cbdesk\Mirakl\Model\RT27Response200',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\cbdesk\Mirakl\Model\RT27Response200',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cbdesk\Mirakl\Model\RT27Response200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation rT27Async
     *
     * Mark a return as closed
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\RT27Request|null $rt27_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rT27'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rT27Async($associative_array)
    {
        return $this->rT27AsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation rT27AsyncWithHttpInfo
     *
     * Mark a return as closed
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\RT27Request|null $rt27_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rT27'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rT27AsyncWithHttpInfo($associative_array)
    {
        $returnType = '\cbdesk\Mirakl\Model\RT27Response200';
        $request = $this->rT27Request($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'rT27'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\RT27Request|null $rt27_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rT27'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function rT27Request($associative_array)
    {
        // unbox the parameters from the associative array
        $shop_id = array_key_exists('shop_id', $associative_array) ? $associative_array['shop_id'] : null;
        $rt27_request = array_key_exists('rt27_request', $associative_array) ? $associative_array['rt27_request'] : null;
        $contentType = $associative_array['contentType'] ?? self::contentTypes['rT27'][0];
        



        $resourcePath = '/api/returns/close';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shop_id,
            'shop_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($rt27_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($rt27_request));
            } else {
                $httpBody = $rt27_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation rT29
     *
     * Mark a return as canceled
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\RT29Request|null $rt29_request rt29_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rT29'] to see the possible values for this operation
     *
     * @throws \cbdesk\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \cbdesk\Mirakl\Model\RT29Response200
     */
    public function rT29($associative_array)
    {
        list($response) = $this->rT29WithHttpInfo($associative_array);
        return $response;
    }

    /**
     * Operation rT29WithHttpInfo
     *
     * Mark a return as canceled
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\RT29Request|null $rt29_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rT29'] to see the possible values for this operation
     *
     * @throws \cbdesk\Mirakl\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \cbdesk\Mirakl\Model\RT29Response200, HTTP status code, HTTP response headers (array of strings)
     */
    public function rT29WithHttpInfo($associative_array)
    {
        $request = $this->rT29Request($associative_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\cbdesk\Mirakl\Model\RT29Response200',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\cbdesk\Mirakl\Model\RT29Response200',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cbdesk\Mirakl\Model\RT29Response200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation rT29Async
     *
     * Mark a return as canceled
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\RT29Request|null $rt29_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rT29'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rT29Async($associative_array)
    {
        return $this->rT29AsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation rT29AsyncWithHttpInfo
     *
     * Mark a return as canceled
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\RT29Request|null $rt29_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rT29'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rT29AsyncWithHttpInfo($associative_array)
    {
        $returnType = '\cbdesk\Mirakl\Model\RT29Response200';
        $request = $this->rT29Request($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'rT29'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int|null $shop_id Use this parameter when your user has access to several shops. If not specified, the shop_id from your default shop will be used. (optional)
     * @param  \cbdesk\Mirakl\Model\RT29Request|null $rt29_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rT29'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function rT29Request($associative_array)
    {
        // unbox the parameters from the associative array
        $shop_id = array_key_exists('shop_id', $associative_array) ? $associative_array['shop_id'] : null;
        $rt29_request = array_key_exists('rt29_request', $associative_array) ? $associative_array['rt29_request'] : null;
        $contentType = $associative_array['contentType'] ?? self::contentTypes['rT29'][0];
        



        $resourcePath = '/api/returns/cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shop_id,
            'shop_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($rt29_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($rt29_request));
            } else {
                $httpBody = $rt29_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        if ($this->config->getCertFile()) {
            $options[RequestOptions::CERT] = $this->config->getCertFile();
        }

        if ($this->config->getKeyFile()) {
            $options[RequestOptions::SSL_KEY] = $this->config->getKeyFile();
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
